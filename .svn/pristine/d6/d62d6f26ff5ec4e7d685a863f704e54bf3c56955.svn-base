<template>
  <div class="equipment bs-content" v-resize="resize">
    <div class="equipment-left bs-left">
      <!-- <BsOrgTree @call="getDevicesDataClick" :orgType="0" orgTitle="机构设备" :isSetting="$BShasPower('BS-SETTING-EQUIPMENT-ORG')"></BsOrgTree> -->
      <BStreeNewBox :iconToggle="false" :searchToggle="true" :searchType="0" :equipmentToggle="false" :resourceToggle="false" :btnGroup="true" :orgType="0" :resType="[0]" @clickData="getDevicesDataClick"></BStreeNewBox>
    </div>
    <div class="bs-main">
      <div class="equipment-right" v-if="$BShasPower('BS-SETTING-EQUIPMENT-VIDEO') || $BShasPower('BS-SETTING-EQUIPMENT-ALARM') || $BShasPower('BS-SETTING-EQUIPMENT-DECODE') || $BShasPower('BS-SETTING-EQUIPMENT-FIRE')">
        <div class="equipment-right-device" :style="{height: (deviceActiveTab === 6) || (deviceActiveTab === 1) || (deviceActiveTab === 7) || (deviceActiveTab === 10) ? `100%` : `calc(100% - ${parseInt(this.botHeight) + 10}px)`}">
          <div class="table-header">
            <TableTab @on-tab-click="deviceTabClick" :tabs="deviceTabs" :isCount="true"></TableTab>
            <div class="table-header-actions clear">
              <div class="actions-btn">
                <Button type="ghost" icon="plus" @click="deviceSingleAdd" :disabled="!thirdParty" v-if="($BShasPower('BS-SETTING-EQUIPMENT-VIDEO-MANAGE') && deviceActiveTab === 0) || ($BShasPower('BS-SETTING-EQUIPMENT-DECODE-MANAGE') && deviceActiveTab === 5) || ($BShasPower('BS-SETTING-EQUIPMENT-ALARM-MANAGE') && deviceActiveTab === 1) || ($BShasPower('BS-SETTING-EQUIPMENT-FIRE-MANAGE') && deviceActiveTab === 7)||deviceActiveTab === 9|| deviceActiveTab === 6 || deviceActiveTab === 10">添加</Button>
                <Button type="ghost" id="Modification" icon="edit" @click="deviceEditModal" :disabled="!(isDeviceChecked && thirdParty)" v-if="($BShasPower('BS-SETTING-EQUIPMENT-VIDEO-MANAGE') && deviceActiveTab === 0) || ($BShasPower('BS-SETTING-EQUIPMENT-DECODE-MANAGE') && deviceActiveTab === 5) || ($BShasPower('BS-SETTING-EQUIPMENT-ALARM-MANAGE') && deviceActiveTab === 1) || ($BShasPower('BS-SETTING-EQUIPMENT-FIRE-MANAGE') && deviceActiveTab === 7)||deviceActiveTab === 9|| deviceActiveTab === 6 || deviceActiveTab === 10">修改</Button>
                <Button type="ghost" icon="trash-a" @click="deviceDeleteOpen" :disabled="!(isDeviceChecked && thirdParty)" v-if="($BShasPower('BS-SETTING-EQUIPMENT-VIDEO-MANAGE') && deviceActiveTab === 0) || ($BShasPower('BS-SETTING-EQUIPMENT-DECODE-MANAGE') && deviceActiveTab === 5) || ($BShasPower('BS-SETTING-EQUIPMENT-ALARM-MANAGE') && deviceActiveTab === 1) || ($BShasPower('BS-SETTING-EQUIPMENT-FIRE-MANAGE') && deviceActiveTab === 7)||deviceActiveTab === 9|| deviceActiveTab === 6 || deviceActiveTab === 10">删除</Button>
                <Button type="ghost" icon="arrow-move" @click="moveDeviceToTreeFn" :disabled="!(isDeviceChecked && thirdParty)">移动</Button>
                <Upload v-if="$BShasPower('BS-SETTING-EQUIPMENT-VIDEO-MANAGE')" style="display:inline-block;" ref="upload" name="file" :headers="headerObj" :action="'/api/setting/device/import?oid='+this.orgActiveId+'&bigtype='+this.deviceActiveTab" :format="['xls','xlsx']" :on-success="uploadSuc" :on-error="uploadError" :on-format-error="formatError" :show-upload-list="false">
                  <Button type="ghost" :disabled="!thirdParty" icon="ivu-icon iconfont icon-import">导入</Button>
                </Upload>
                <Button type="ghost" v-if="$BShasPower('BS-SETTING-EQUIPMENT-VIDEO-MANAGE')" @click="exportData">
                  <i class="ivu-icon iconfont icon-export" style="font-size:14px;"></i>&nbsp;导出</Button>
                <Button type="ghost" disabled v-if="false" @click="deviceCopyOpen">复制</Button>
                <Button type="ghost" disabled v-if="false" @click="deviceBatchAdd">批量添加</Button>
                <Button type="ghost" icon="ios-play" @click="updateDeviceStatus(1)">启用</Button>
                <Button type="ghost" icon="ios-pause" @click="updateDeviceStatus(0)">停用</Button>
                <Button type="ghost" icon="refresh" @click="deviceTableFreshSefresh">刷新</Button>
                <Checkbox v-model="isShowChild" @on-change="showChildRefresh">显示子机构设备</Checkbox>
              </div>
              <div class="actions-search">
                <Input :placeholder="searchPlaceholder" style="width: 220px" v-model="filterKey" @on-change="seekDeviceData(1,true)"  @keyup.enter.native="seekDeviceData(1)">
                <Button slot="append" @click="seekDeviceData(1)">搜索</Button>
                </Input>
              </div>
            </div>
          </div>
          <div class="table-relative" :style="{height: topHeight}" ref="tableBox">
            <div class="table-body">
              <Table ref="deviceTable" size="small" :height="topTableHeight" :columns="deviceColumns" :data="deviceTableData" :highlight-row="true" @on-selection-change="selectDeviceRow" @on-row-click="clickDeviceRow" width="100%" :row-class-name="rowClassName"></Table>
            </div>
          </div>
          <!-- 页码 -->
          <div class="table-footer">
            <div style="float: right;">
              <Page :total="pageInfo.count" :current="pageSelect" :page-size="pageLimit" show-total @on-change="changeDevicePage" show-elevator show-sizer :page-size-opts="$PageInfo.size" @on-page-size-change="sizeChange"></Page>
            </div>
          </div>
        </div>
        <div class="equipment-right-middle">
        </div>
        <!-- 通道 -->
        <div class="equipment-right-footer" :style="{height: botHeight}">
          <DecodeRes v-if="deviceActiveTab === 5" ref="DecodeRes" :deviceId="deviceActiveId" :deviceName="deviceActiveName" :tableHeight="tableHeight" :isHide="isHide" @changeTable="changeHeight"></DecodeRes>
          <VideoRes v-if="deviceActiveTab === 0" ref="VideoRes"  :deviceId="deviceActiveId" :deviceName="deviceActiveName" :hitDeviceInfo="hitDeviceInfo" :tableHeight="tableHeight" :isHide="isHide" @changeTable="changeHeight"></VideoRes>
          <!-- <AlarmRes v-if="deviceActiveTab === 1" ref="AlarmRes" :deviceId="deviceActiveId" :deviceName="deviceActiveName" :tableHeight="tableHeight" :isHide="isHide" @changeTable="changeHeight"></AlarmRes> -->
          <!-- <FireRes v-if="deviceActiveTab === 7" ref="FireRes" :deviceId="deviceActiveId" :deviceName="deviceActiveName" :tableHeight="tableHeight" :isHide="isHide" @changeTable="changeHeight"></FireRes> -->
          <JointRes v-if="deviceActiveTab === 9" ref="JointRes" :deviceId="deviceActiveId" :deviceName="deviceActiveName" :tableHeight="tableHeight" :isHide="isHide" @changeTable="changeHeight"></JointRes>
        </div>
      </div>
    </div>
    <!-- 视频及解码器设备添加弹出框 -->
    <Modal :mask-closable="false" v-model="deviceAddModal" width="500" :title="isEditDevice?'设备修改':'设备添加'" @onCancel="deviceInfoCancel">
      <!-- 视频设备弹出框-->
      <div class="device-video-Modal" v-show="deviceActiveTab === 0">
        <div class="device-modal-header">
          <Button-group>
            <Button :type="deviceModalState.pageOneShow ? 'primary' : 'ghost'" @click="modalPageClick('P1')">1 - 基础信息</Button>
            <Button :type="deviceModalState.pageTwoShow ? 'primary' : 'ghost'" @click="modalPageClick('P2')">2 - 高级信息</Button>
          </Button-group>
        </div>
        <div class="deivce-modal-form" v-show="deviceModalState.pageOneShow">
          <!-- 基础信息form -->
          <Form :model="deviceFormData" label-position="left" :label-width="100" ref="deviceVideOneForm" :rules="deviceFormRole" v-if="deviceFormData.manufacturer !== 'custom'">
            <Form-item label="设备名称" prop="name">
              <Input v-model="deviceFormData.name" :disabled="!isSingleAdd && !isEditDevice" :minlength=1 :maxlength=64></Input>
            </Form-item>
            <Form-item label="设备类型" prop="type">
              <Select v-model="deviceFormData.type">
                <Option v-for="opt in deviceVideoTypeOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
            </Form-item>
            <Form-item label="设备厂商" prop="manufacturer">
              <Select v-model="deviceFormData.manufacturer" @on-change="changDeviceFacturer">
                <Option v-for="opt in deviceFacturerOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
            </Form-item>
            <Form-item label="设备型号" prop="series" >
              <Select v-model="deviceFormData.series">
                <Option v-for="opt in deviceSeriesOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
            </Form-item>
            <Form-item label="IP地址" prop="ip">
              <Bsipv4 v-model="deviceFormData.ip" v-if="isSingleAdd || isEditDevice"></Bsipv4>
              <!-- <Bsipv4s v-model="deviceIps" v-show="!isSingleAdd && !isEditDevice"></Bsipv4s> -->
            </Form-item>
            <Form-item label="控制端口" prop="cport" v-if="deviceFormData.manufacturer !== 'juanxin'">
              <Input v-model="deviceFormData.cport" :minlength=1 :maxlength=5></Input>
            </Form-item>
            <Form-item label="控制端口" v-if="deviceFormData.manufacturer === 'juanxin'">
              <Input v-model="deviceFormData.cport" :minlength=1 :maxlength=5></Input>
            </Form-item>
            <Form-item label="数据端口" prop="dport" v-if="deviceFormData.manufacturer !== 'juanxin'">
              <Input v-model="deviceFormData.dport" :minlength=1 :maxlength=5></Input>
            </Form-item>
             <Form-item label="数据端口" v-if="deviceFormData.manufacturer === 'juanxin'">
              <Input v-model="deviceFormData.dport" :minlength=1 :maxlength=5></Input>
            </Form-item>
            <Form-item label="用户名" v-if="deviceFormData.manufacturer !== 'juanxin'">
              <Input v-model="deviceFormData.username"></Input>
            </Form-item>
             <Form-item label="用户名" v-if="deviceFormData.manufacturer === 'juanxin'">
              <Input v-model="deviceFormData.username"></Input>
            </Form-item>
            <Form-item label="密码" v-if="deviceFormData.manufacturer !== 'juanxin'">
              <Input type="password" v-model="deviceFormData.password" manufacturer="password"></Input>
            </Form-item>
            <Form-item label="密码" type="password" v-if="deviceFormData.manufacturer === 'juanxin'">
              <Input v-model="deviceFormData.password" manufacturer="password"></Input>
            </Form-item>
            <Form-item label="视频通道数量" prop="ipcount">
              <Input v-model="deviceFormData.ipcount"></Input>
            </Form-item>
            <Form-item label="报警输入数量" prop="defenseicount">
              <Input v-model="deviceFormData.defenseicount"></Input>
            </Form-item>
            <Form-item label="报警输出数量" prop="defenseocount">
              <Input v-model="deviceFormData.defenseocount"></Input>
            </Form-item>
          </Form>
          <!-- 自定义时候的form -->
          <Form :model="deviceFormData" label-position="left" :label-width="100" ref="deviceVideCustomForm" :rules="deviceFormRole" v-if="deviceFormData.manufacturer === 'custom'">
            <Form-item label="设备名称" prop="name">
              <Input v-model="deviceFormData.name" :disabled="!isSingleAdd && !isEditDevice"></Input>
            </Form-item>
            <Form-item label="设备类型">
              <Select v-model="deviceFormData.type">
                <Option v-for="opt in deviceVideoTypeOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
            </Form-item>
            <Form-item label="设备厂商">
              <Select v-model="deviceFormData.manufacturer">
                <Option v-for="opt in deviceFacturerOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
            </Form-item>
            <Form-item label="主码流URL" prop="mainStream">
              <Input v-model="deviceFormData.mainStream"></Input>
            </Form-item>
            <Form-item label="子码流URL" prop="subStream">
              <Input v-model="deviceFormData.subStream"></Input>
            </Form-item>
          </Form>
        </div>
        <!-- 设备信息form -->
        <div class="deivce-modal-form" v-show="deviceModalState.pageTwoShow">
          <Form label-position="left" :label-width="100" :model="deviceFormData" ref="deviceVideTwoForm" :rules="deviceFormRole">
            <Form-item label="传输协议" v-show="deviceFormData.manufacturer !== 'custom'">
              <Select v-model="deviceFormData.protocol">
                <Option v-for="opt in deviceProtocolOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
            </Form-item>
            <Form-item label="传输协议" v-show="deviceFormData.manufacturer === 'custom'">
              <Select value='rtsp'>
                <Option v-for="opt in customProtocolOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
            </Form-item>
            <Form-item label="连接方式">
              <Select v-model="deviceFormData.connMode">
                <Option v-for="opt in deviceConnModeOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
            </Form-item>
            <!-- 适配器地址 巨安信厂商时显示-->
            <Form-item label="Adapter地址" prop="adapterIp">
              <Bsipv4 v-model="deviceFormData.adapterIp" v-if="isSingleAdd || isEditDevice"></Bsipv4>
              <!-- <Bsipv4s v-model="deviceIps" v-show="!isSingleAdd && !isEditDevice"></Bsipv4s> -->
            </Form-item>
            <Form-item label="Adapter端口" prop="adapterPort">
              <Input v-model="deviceFormData.adapterPort"></Input>
            </Form-item>
            <!-- <Form-item label="设备型号" prop="model">
                <Input v-model="deviceFormData.model" :disabled="!isSingleAdd && !isEditDevice"></Input>
              </Form-item> -->
            <!-- <Form-item label="视频通道数量" prop="ipcount">
              <Input v-model="deviceFormData.ipcount"></Input>
            </Form-item>
            <Form-item label="报警输入数量" prop="defenseicount">
              <Input v-model="deviceFormData.defenseicount"></Input>
            </Form-item>
            <Form-item label="报警输出数量" prop="defenseocount">
              <Input v-model="deviceFormData.defenseocount"></Input>
            </Form-item> -->
            <!-- <Form-item label="对讲通道数量" prop="intercomcount">
              <Input v-model="deviceFormData.intercomcount"></Input>
            </Form-item>
            <Checkbox v-model="deviceFormData.intelligentalarm" style="height: 35px;margin-right:30px">智能报警</Checkbox>
            <Checkbox v-model="deviceFormData.devicealarm" style="height: 35px;margin-right:30px">设备报警</Checkbox>
            <Checkbox v-model="deviceFormData.monitorypointalarm" style="height: 35px;">监控点报警</Checkbox> -->
          </Form>
        </div>
      </div>
      <!-- 解码器设备弹出框-->
      <div class="device-decoder-Modal" v-if="deviceActiveTab === 5">
        <!-- <div class="device-modal-header">
          <Button-group>
            <Button :type="deviceModalState.pageOneShow ? 'primary' : 'ghost'" @click="modalPageClick('P1')">1 - 基础信息</Button>
            <Button :type="deviceModalState.pageTwoShow ? 'primary' : 'ghost'" @click="modalPageClick('P2')">2 - 高级信息</Button>
          </Button-group>
        </div> -->
        <div class="deivce-modal-form">
          <!-- 基础信息form -->
          <Form label-position="left" :label-width="100" :model="deviceFormData" ref="deviceDecodeOneForm" :rules="deviceFormRole">
            <Form-item label="设备名称" prop="name">
              <Input v-model="deviceFormData.name" :disabled="!isSingleAdd && !isEditDevice" :minlength=1 :maxlength=64></Input>
            </Form-item>
            <Form-item label="厂商">
              <Select v-model="deviceFormData.manufacturer">
                <Option v-for="opt in deviceFacturerOptsOnly" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
            </Form-item>
            <Form-item label="设备类型">
              <Select v-model="deviceFormData.type" @on-change="changDecodeType">
                <Option v-for="opt in deviceDecodeTypeOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
            </Form-item>
            <Form-item label="设备型号">
              <Select v-model="deviceFormData.model">
                <Option v-for="opt in (deviceFormData.type === 'hardDecoder'? deviceModalTROpts: deviceModalTRSOpts)" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
            </Form-item>
            <Form-item label="IP地址" prop="ip">
              <Bsipv4 v-model="deviceFormData.ip" v-if="isSingleAdd || isEditDevice"></Bsipv4>
              <Bsipv4s v-model="deviceIps" v-show="!isSingleAdd && !isEditDevice"></Bsipv4s>
            </Form-item>
            <Form-item label="端口" prop="cport">
              <Input v-model="deviceFormData.cport" :minlength=1 :maxlength=5></Input>
            </Form-item>
            <Form-item label="用户名">
              <Input v-model="deviceFormData.username"></Input>
            </Form-item>
            <Form-item label="密码">
              <Input v-model="deviceFormData.password" type="password"></Input>
            </Form-item>
            <Form-item label="接入服务器">
              <Select v-model="accessServerIp">
                <Option :value="item.value" v-for="(item, index) in accessServerList" :key="index">{{item.label}}</Option>
              </Select>
            </Form-item>
            <Form-item label="解码通道数量" prop="decodecount">
              <Input v-model="deviceFormData.decodecount"></Input>
            </Form-item>
            <Form-item label="音频通道数量" v-if="isTR" prop="voicecount">
              <Input v-model="deviceFormData.voicecount"></Input>
            </Form-item>
            <Form-item label="报警防区数量" v-if="isTR" prop="defenseicount">
              <Input v-model="deviceFormData.defenseicount"></Input>
            </Form-item>
            <Form-item label="报警输出数量" v-if="isTR" prop="defenseocount">
              <Input v-model="deviceFormData.defenseocount"></Input>
            </Form-item>
          </Form>
        </div>
        <!-- 设备信息form -->
        <!-- <div class="deivce-modal-form" v-show="deviceModalState.pageTwoShow">
          <Form label-position="left" :label-width="100" :model="deviceFormData" ref="deviceDecodeTwoForm" :rules="deviceFormRole">
            <Form-item label="解码通道数量" prop="decodecount">
              <Input v-model="deviceFormData.decodecount"></Input>
            </Form-item>
            <Form-item label="音频通道数量" v-if="isTR" prop="voicecount">
              <Input v-model="deviceFormData.voicecount"></Input>
            </Form-item>
            <Form-item label="报警防区数量" v-if="isTR" prop="defenseicount">
              <Input v-model="deviceFormData.defenseicount"></Input>
            </Form-item>
            <Form-item label="报警输出数量" v-if="isTR" prop="defenseocount">
              <Input v-model="deviceFormData.defenseocount"></Input>
            </Form-item>
          </Form>
        </div> -->
      </div>
      <div slot="footer">
        <div class="modal-decoder-footer">
          <Button type="ghost" @click="deviceInfoCancel">取消</Button>
          <Button type="primary" class="modal-decoder-footer-primary" @click="deviceInfoSave">确认</Button>
        </div>
      </div>
    </Modal>
    <!-- 设备移动 -->
    <Modal :mask-closable="false" v-model="devMoveModal" title="设备移动" width="450">
      <div class="res-add-model"  v-if="devMoveModal">
        <p>选择设备,将设备移动到当前机构下</p>
        <div class="res-model-tree">
           <BStreeNewBox :iconToggle="false" :searchToggle="false" :searchType="0" :equipmentToggle="false" :resourceToggle="false" :btnGroup="false" :orgType="0" :resType="[0]" @clickData="selectMoveOrg"></BStreeNewBox>
          <!-- <bs-scroll ref="moveScroller">
            <VTree :treeData="devMoveData" :options="deviceMoveTreeOptions" @node-click="selectMoveOrg" :activeId="resMoveOrgId" @on-expand="$refs.moveScroller.update()">
            </VTree>
          </bs-scroll> -->
        </div>
      </div>
      <div slot="footer">
        <Button type="ghost" @click="resEditCancel">取消</Button>
        <Button type="primary" @click="resEditSave">确认</Button>
      </div>
    </Modal>
    <!-- 消防主机设备添加弹出框 -->
    <FireDevice ref="FireDevice" :fireDeviceShow='fireDeviceShow' :isEditDevice='isEditDevice' :formData="fireFormData" @save="saveFireDevice" @cancel="cancelFireDevice"></FireDevice>
    <!-- 报警主机设备添加弹出框 -->
    <AlarmDevice ref="AlarmDevice" :alarmDeviceShow='alarmDeviceShow' :isEditDevice='isEditDevice' :formData="alarmFormData" @save="saveAlarmDevice" @cancel="cancelAlarmDevice"></AlarmDevice>
    <!-- 拼接控制器 or 网络键盘 设备添加弹出框 -->
    <JointDevice ref="JointDevice" :deviceActiveTab="deviceActiveTab" :isModelLoading="isModelLoading" :jointDeviceShow='jointDeviceShow' :isEditDevice='isEditDevice' :formData="jointFormData" @save="saveJointDevice" @cancel="cancelJointDevice"></JointDevice>
    <KeyboardDevice ref="KeyboardDevice" :keyboardDeviceShow='keyboardDeviceShow' :isEditDevice='isEditDevice' :formData='keyboardFormData' @save="savekeyboarDev" @cancel="cancelkeyboarDev"></KeyboardDevice>
    <ShortMessage ref="ShortMessage" :shortMessageShow='ShortMessageShow' :isEditDevice='isEditDevice' :formData='shortMessageData' @save="saveShortMessage" @cancel="cancelShortMessage"></ShortMessage>
  </div>
</template>
<script>
import BStreeNewBox from '../../../components/BStreeNew/BStreeNewBox'
import { download } from '../../../common/download'
// import BsOrgTree from '../../../components/DevBSorgTree.vue'
import TableTab from './tableTab'
// import VTree from '../../../components/tree/VTree.vue'
import Bsipv4 from '../../../components/BSIPV4.vue'
import Bsipv4s from '../../../components/BSIPV4S.vue'
import FireDevice from './modal/fireDevice'
import AlarmDevice from './modal/alarmDevice'
import JointDevice from './modal/jointDevice'
import KeyboardDevice from './modal/keyboardDevice'
import ShortMessage from './modal/shortMessage'
// import AlarmRes from './resource/alarmRes'
// import FireRes from './resource/fireRes'
import JointRes from './resource/jointRes'
import DecodeRes from './resource/decodeRes'
import VideoRes from './resource/videoRes'
import './devicesRes.css'
import deviceValidate from './deviceValidate.js'
import { mapActions, mapState, mapGetters } from 'vuex'
export default {
  components: {
    TableTab,
    // VTree,
    Bsipv4,
    Bsipv4s,
    BStreeNewBox,
    // BsOrgTree,
    VideoRes,
    FireDevice,
    AlarmDevice,
    JointDevice,
    KeyboardDevice,
    ShortMessage,
    // AlarmRes,
    // FireRes,
    JointRes,
    DecodeRes
  },
  data() {
    return {
      searchPlaceholder: '请输入设备名称、设备IP',
      accessServerIp: '', // 接入服务器 选中项
      accessServerList: [], // 接入服务器 备选项
      videoParameterList: {
        ipc: {
          'bstar': {
            'bsr': ['bsr', 3721, 3720, 'admin', '123456', 'tcp'],
            'BSR-IPHK': ['BSR-IPHK', 3721, 3720, 'admin', '123456', 'tcp'],
            'BSR-IPHAW': ['BSR-IPHAW', 3721, 3720, 'admin', '123456', 'tcp']
          },
          'hikvision': { ' ': [' ', 8000, 8000, 'admin', '12345', 'tcp'] },
          'dahua': { 'HFW7233X-E2': ['HFW7233X-E2', 37777, 37777, 'admin', 'admin', 'tcp'] },
          'onvif': { 'onvif': ['onvif', 80, 554, 'admin', '123456', 'tcp'] },
          'hkprotocol': { ' ': ['', 3721, 3720, 'admin', '123456', 'tcp'] },
          'custom': { ' ': ['', '', '', '', '', ''] },
          'ipcount': 1
        },
        nvr: {
          'bstar': { 'Limit': ['Limit', 3721, 3720, 'admin', '123456', 'tcp'] },
          'hikvision': { ' ': [' ', 8000, 8000, 'admin', '12345', 'tcp'] },
          'dahua': { 'DH-EVS7048S-R': ['DH-EVS7048S-R', 37777, 37777, 'admin', 'admin', 'tcp'] },
          'juanxin': { '居安信': ['居安信', '', '', '', '', ''] },
          'hbnvr': { '汉邦': ['汉邦', 8101, 8101, 'admin', '123456', 'tcp'] },
          'ipcount': 16
        }
      }, // 视频设备参数表
      headerObj: { Authorization: '' },
      isShareServer: true,
      // 机构下设备是否可操作
      thirdParty: true,
      // 所属大类 0:视频设备 1:报警主机 2:门禁设备 3:ip对讲 4:巡更设备 5:解码器 6:网络键盘 7:消防主机
      deviceTabs: [
        {
          title: '视频设备',
          value: 0,
          disabled: false,
          active: false,
          number: 0,
          isHide: !this.$BShasPower('BS-SETTING-EQUIPMENT-VIDEO')
        },
        {
          title: '解码器',
          value: 5,
          disabled: false,
          active: false,
          number: 0,
          isHide: !this.$BShasPower('BS-SETTING-EQUIPMENT-DECODE')
        },
        {
          title: '报警主机',
          value: 1,
          disabled: false,
          active: false,
          number: 0,
          isHide: !this.$BShasPower('BS-SETTING-EQUIPMENT-ALARM')
        },
        {
          title: '门禁设备',
          value: 2,
          disabled: true,
          active: false,
          number: 0,
          isHide: true
        },
        {
          title: 'IP对讲',
          value: 3,
          disabled: true,
          active: false,
          number: 0,
          isHide: true
        },
        {
          title: '巡更设备',
          value: 4,
          disabled: true,
          active: false,
          number: 0,
          isHide: true
        },
        {
          title: '消防主机',
          value: 7,
          disabled: false,
          active: false,
          number: 0,
          isHide: !this.$BShasPower('BS-SETTING-EQUIPMENT-FIRE')
        },
        {
          title: '拼接控制器',
          value: 9,
          disabled: false,
          active: false,
          number: 0,
          isHide: false
        },
        {
          title: '网络键盘',
          value: 6,
          disabled: false,
          active: false,
          number: 0,
          isHide: false
        },
        {
          title: '短信猫',
          value: 10,
          disabled: false,
          active: false,
          number: 0,
          isHide: false
        }
      ],
      // 设备的表格Columns
      deviceColumns: [],
      // 视频设备Columns
      videoColumns: [
        {
          type: 'selection',
          align: 'center',
          width: 60
        },
        {
          title: '序号',
          align: 'left',
          key: 'serialNumber',
          sortable: true,
          width: 80
        },
        {
          title: '设备名称',
          key: 'name',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            return h(
              'span',
              {
                style: {
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                },
                domProps: {
                  title: params.row.name
                }
              },
              params.row.name
            )
          }
        },
        {
          title: 'IP地址',
          key: 'ip',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            let text = ''
            if (params.row.ip === '') {
              text = '...'
            } else {
              text = params.row.ip
            }
            return h('span', text)
          }
        },
        {
          title: '厂商',
          key: 'manufacturer',
          align: 'left',
          sortable: true
          // render: (h, params) => {
          //   let text = ''
          //   switch (params.row.manufacturer) {
          //     case 'dahua':
          //       text = '大华'
          //       break
          //     case 'bstar':
          //       text = '蓝色星际'
          //       break
          //     case 'hikvision':
          //       text = '海康'
          //       break
          //     case 'onvif':
          //       text = 'onvif'
          //       break
          //     case 'custom':
          //       text = '自定义'
          //       break
          //     case 'hkprotocol':
          //       text = '海康协议'
          //       break
          //     case 'juanxin':
          //       text = '居安信'
          //       break
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '设备类型',
          key: 'type',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            let text = ''
            let t = params.row.type
            if (t === 'ipc') {
              text = 'IPC'
            } else if (t === 'nvr') {
              text = 'NVR'
            }
            return h('span', text)
          }
        },
        {
          title: '视频通道数量',
          key: 'ipcount',
          align: 'left',
          sortable: true
        },
        {
          title: '所属机构',
          key: 'orgName',
          align: 'left',
          sortable: true,
          ellipsis: true
          // sortMethod: (a, b, type) => { return type === 'asc' ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name) },
          // render: (h, params) => {
          //   return h('span', params.row.oid.name)
          // }
        },
        {
          title: '启用状态',
          key: 'deviceStatus',
          align: 'left',
          sortable: true,
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) }
          // render: (h, params) => {
          //   let text = ''
          //   let t = params.row.deviceStatus
          //   if (t === 1) {
          //     text = '启用'
          //   } else if (t === 0) {
          //     text = '停用'
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '状态',
          key: 'status',
          align: 'left',
          sortable: true,
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) },
          render: (h, params) => {
            let color
            if (params.row.status === '离线') {
              color = '#ed3f14'
            } else {
              color = '#19be6b'
            }
            return h(
              'span',
              {
                style: {
                  color: color
                }
              },
              params.row.status
            )
          }
        },
        {
          title: '操作',
          key: 'action',
          align: 'left',
          width: 150,
          render: (h, params) => {
            return h(
              'Button',
              {
                props: {
                  type: 'ghost',
                  size: 'small',
                  disabled: params.row.status === false || !this.$BShasPower('BS-SETTING-EQUIPMENT-VIDEO-MANAGE')
                },
                on: {
                  click: e => {
                    e.stopPropagation()
                    this.connectWebPage(params.row)
                  }
                }
              },
              '配置'
            )
          }
        }
      ],
      // 解码器Columns
      decodeColumns: [
        {
          type: 'selection',
          align: 'left',
          width: 60
        },
        {
          title: '序号',
          align: 'left',
          key: 'serialNumber',
          sortable: true,
          width: 80
        },
        {
          title: '解码器名称',
          key: 'name',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            return h(
              'span',
              {
                style: {
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                },
                domProps: {
                  title: params.row.name
                }
              },
              params.row.name
            )
          }
        },
        {
          title: 'IP地址',
          key: 'ip',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            let text = ''
            if (params.row.ip === '') {
              text = '...'
            } else {
              text = params.row.ip
            }
            return h('span', text)
          }
        },
        {
          title: '厂商',
          key: 'manufacturer',
          align: 'left',
          sortable: true
          // render: (h, params) => {
          //   let text = ''
          //   switch (params.row.manufacturer) {
          //     case 'bstar':
          //       text = '蓝色星际'
          //       break
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '设备类型',
          key: 'type',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            let text = ''
            let t = params.row.type
            if (t === 'softDecoder') {
              text = 'TRS'
            } else if (t === 'hardDecoder') {
              text = 'TR'
            }
            return h('span', text)
          }
        },
        {
          title: '型号',
          key: 'model',
          align: 'left',
          sortable: true
        },
        {
          title: '解码通道数量',
          key: 'decodecount',
          align: 'left',
          sortable: true
        },
        {
          title: '所属机构',
          key: 'orgName',
          align: 'left',
          ellipsis: true,
          sortable: true
          // render: (h, params) => {
          //   return h('span', params.row.oid.name)
          // }
        },
        {
          title: '启用状态',
          key: 'deviceStatus',
          align: 'left',
          sortable: true,
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) }
          // render: (h, params) => {
          //   let text = ''
          //   let t = params.row.deviceStatus
          //   if (t === 1) {
          //     text = '启用'
          //   } else if (t === 0) {
          //     text = '停用'
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '状态',
          key: 'status',
          align: 'left',
          sortable: true,
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) },
          render: (h, params) => {
            let color
            if (params.row.status === '离线') {
              color = '#ed3f14'
              // text = '离线'
            } else {
              color = '#19be6b'
              // text = '在线'
            }
            return h(
              'span',
              {
                style: {
                  color: color
                }
              },
              params.row.status
            )
          }
        }
      ],
      // 报警主机Columns
      alarmColumns: [
        {
          type: 'selection',
          align: 'left',
          width: 60
        },
        {
          title: '序号',
          align: 'left',
          key: 'serialNumber',
          sortable: true,
          width: 80
        },
        {
          title: '报警主机名称',
          key: 'name',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            return h(
              'span',
              {
                style: {
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                },
                domProps: {
                  title: params.row.name
                }
              },
              params.row.name
            )
          }
        },
        {
          title: '所属机构',
          key: 'orgName',
          align: 'left',
          ellipsis: true,
          sortable: true
          // render: (h, params) => {
          //   return h('span', params.row.oid.name)
          // }
        },
        {
          title: 'IP地址',
          key: 'ip',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            let text = ''
            if (params.row.ip === '') {
              text = '...'
            } else {
              text = params.row.ip
            }
            return h('span', text)
          }
        },
        {
          title: '厂商',
          key: 'manufacturer',
          sortable: true,
          align: 'left'
          // render: (h, params) => {
          //   let text = ''
          //   if (params.row.manufacturer === 'guangtuo') {
          //     text = '广拓'
          //   } else {
          //     text = params.row.manufacturer
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '型号',
          key: 'model',
          sortable: true,
          align: 'left'
        },
        {
          title: '报警防区数量',
          key: 'defenseicount',
          align: 'left',
          sortable: true
        },
        {
          title: '启用状态',
          key: 'deviceStatus',
          align: 'left',
          sortable: true,
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) }
          // render: (h, params) => {
          //   let text = ''
          //   let t = params.row.deviceStatus
          //   if (t === 1) {
          //     text = '启用'
          //   } else if (t === 0) {
          //     text = '停用'
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '状态',
          key: 'status',
          sortable: true,
          align: 'left',
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) },
          render: (h, params) => {
            let color
            if (params.row.status === '离线') {
              color = '#ed3f14'
              // text = '离线'
            } else {
              color = '#19be6b'
              // text = '在线'
            }
            return h(
              'span',
              {
                style: {
                  color: color
                }
              },
              params.row.status
            )
          }
        }
      ],
      // 报警主机弹窗显示
      alarmDeviceShow: false,
      // 报警主机数据
      alarmFormData: {},
      // 消防主机Columns
      fireEngineColumns: [
        {
          type: 'selection',
          align: 'left',
          width: 60
        },
        {
          title: '序号',
          align: 'left',
          key: 'serialNumber',
          sortable: true,
          width: 80
        },
        {
          title: '消防主机名称',
          key: 'name',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            return h(
              'span',
              {
                style: {
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                },
                domProps: {
                  title: params.row.name
                }
              },
              params.row.name
            )
          }
        },
        {
          title: '所属机构',
          key: 'orgName',
          align: 'left',
          sortable: true,
          ellipsis: true
          // render: (h, params) => {
          //   return h('span', params.row.oid.name)
          // }
        },
        {
          title: 'IP地址',
          key: 'ip',
          sortable: true,
          align: 'left',
          render: (h, params) => {
            let text = ''
            if (params.row.ip === '') {
              text = '...'
            } else {
              text = params.row.ip
            }
            return h('span', text)
          }
        },
        {
          title: '厂商',
          key: 'manufacturer',
          sortable: true,
          align: 'left',
          render: (h, params) => {
            let text = ''
            if (params.row.manufacturer === 'kdfire') {
              text = '科大国创'
            } else {
              text = '利达'
            }
            return h('span', text)
          }
        },
        {
          title: '型号',
          key: 'model',
          sortable: true,
          align: 'left'
        },
        {
          title: '报警响应时间',
          key: 'alarmTesponseTime',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            let text = ''
            if (params.row.manufacturer === 'kdfire') {
              text = '-'
            } else {
              text = (params.row.alarmTesponseTime) * 512
            }
            return h('span', text)
          }
        },
        {
          title: '消防报警数量',
          key: 'alarmMaximumQuantity',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            let text = ''
            if (params.row.manufacturer === 'kdfire') {
              text = '-'
            } else {
              text = params.row.alarmTesponseTime
            }
            return h('span', text)
          }
        },
        {
          title: '启用状态',
          key: 'deviceStatus',
          align: 'left',
          sortable: true,
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) }
          // render: (h, params) => {
          //   let text = ''
          //   let t = params.row.deviceStatus
          //   if (t === 1) {
          //     text = '启用'
          //   } else if (t === 0) {
          //     text = '停用'
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '状态',
          key: 'status',
          align: 'left',
          sortable: true,
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) },
          render: (h, params) => {
            let color
            if (params.row.status === '离线') {
              color = '#ed3f14'
              // text = '离线'
            } else {
              color = '#19be6b'
              // text = '在线'
            }
            return h(
              'span',
              {
                style: {
                  color: color
                }
              },
              params.row.status
            )
          }
        }
      ],
      // 消防主机弹窗显示
      fireDeviceShow: false,
      // 消防主机数据
      fireFormData: {},
      // 拼接控制器弹窗显示
      jointDeviceShow: false,
      // 拼接控制器数据
      jointFormData: {},
      // 拼接控制器Columns
      isModelLoading: false,
      jointColumns: [
        {
          type: 'selection',
          align: 'left',
          width: 60
        },
        {
          title: '序号',
          align: 'left',
          key: 'serialNumber',
          sortable: true,
          width: 80
        },
        {
          title: '拼接控制器名称',
          key: 'name',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            return h(
              'span',
              {
                style: {
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                },
                domProps: {
                  title: params.row.name
                }
              },
              params.row.name
            )
          }
        },
        {
          title: '所属机构',
          key: 'orgName',
          align: 'left',
          sortable: true,
          ellipsis: true
          // render: (h, params) => {
          //   return h('span', params.row.oid.name)
          // }
        },
        {
          title: 'IP地址',
          key: 'ip',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            let text = ''
            if (params.row.ip === '') {
              text = '...'
            } else {
              text = params.row.ip
            }
            return h('span', text)
          }
        },
        {
          title: '厂商',
          key: 'manufacturer',
          align: 'left',
          sortable: true
          // render: (h, params) => {
          //   let text = ''
          //   if (params.row.manufacturer === 'Tricolor') {
          //     text = '淳中科技'
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '输入通道数量',
          key: 'jointinputcount',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            let text = ''
            if (params.row.jointinputcount === '') {
              text = ''
            } else {
              text = params.row.jointinputcount
            }
            return h('span', text || 0)
          }
        },
        {
          title: '启用状态',
          key: 'deviceStatus',
          align: 'left',
          sortable: true,
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) }
          // render: (h, params) => {
          //   let text = ''
          //   let t = params.row.deviceStatus
          //   if (t === 1) {
          //     text = '启用'
          //   } else if (t === 0) {
          //     text = '停用'
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '状态',
          key: 'status',
          align: 'left',
          sortable: true,
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) },
          render: (h, params) => {
            let color
            if (params.row.status === '离线') {
              color = '#ed3f14'
              // text = '离线'
            } else {
              color = '#19be6b'
              // text = '在线'
            }
            return h(
              'span',
              {
                style: {
                  color: color
                }
              },
              params.row.status
            )
          }
        }
      ],
      // 网络键盘弹窗显示
      keyboardDeviceShow: false,
      // 网络键盘数据
      keyboardFormData: {},
      // 网络键盘Columns
      keyboardColumns: [
        {
          type: 'selection',
          align: 'left',
          width: 60
        },
        {
          title: '序号',
          align: 'left',
          sortable: true,
          key: 'serialNumber',
          width: 80
        },
        {
          title: '网络键盘名称',
          key: 'name',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            return h(
              'span',
              {
                style: {
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                },
                domProps: {
                  title: params.row.name
                }
              },
              params.row.name
            )
          }
        },
        {
          title: '所属机构',
          key: 'orgName',
          align: 'left',
          ellipsis: true,
          sortable: true
          // render: (h, params) => {
          //   return h('span', params.row.oid.name)
          // }
        },
        {
          title: 'IP地址',
          key: 'ip',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            let text = ''
            if (params.row.ip === '') {
              text = '...'
            } else {
              text = params.row.ip
            }
            return h('span', text)
          }
        },
        {
          title: '厂商',
          key: 'manufacturer',
          align: 'left',
          sortable: true
          // render: (h, params) => {
          //   let text = ''
          //   if (params.row.manufacturer === 'bstar') {
          //     text = '蓝色星际'
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '型号',
          key: 'model',
          sortable: true,
          align: 'left'
        },
        {
          title: '启用状态',
          key: 'deviceStatus',
          align: 'left',
          sortable: true,
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) }
          // render: (h, params) => {
          //   let text = ''
          //   let t = params.row.deviceStatus
          //   if (t === 1) {
          //     text = '启用'
          //   } else if (t === 0) {
          //     text = '停用'
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '状态',
          key: 'status',
          sortable: true,
          align: 'left',
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) },
          render: (h, params) => {
            console.log(params.row)
            let color
            // let text
            if (params.row.status === '离线') {
              color = '#ed3f14'
              // text = '离线'
            } else {
              color = '#19be6b'
              // text = '在线'
            }
            return h(
              'span',
              {
                style: {
                  color: color
                }
              },
              params.row.status
            )
          }
        }
      ],
      // 短信猫Columns
      smsColumns: [
        {
          type: 'selection',
          align: 'left',
          width: 60
        },
        {
          title: '序号',
          align: 'left',
          sortable: true,
          key: 'serialNumber',
          width: 80
        },
        {
          title: '名称',
          key: 'name',
          align: 'left',
          sortable: true,
          render: (h, params) => {
            return h(
              'span',
              {
                style: {
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                },
                domProps: {
                  title: params.row.name
                }
              },
              params.row.name
            )
          }
        },
        {
          title: '接入方式',
          key: 'ip',
          align: 'left',
          ellipsis: true,
          sortable: true,
          render: (h, params) => {
            let con = ''
            if (params.row.ip === 'COM') {
              con = '串口'
            } else {
              con = ''
            }
            return h('span', con)
          }
        },
        {
          title: '端口',
          key: 'cport',
          align: 'left',
          ellipsis: true,
          sortable: true
          // render: (h, params) => {
          //   let con = params.row.cport === 1 ? 'Rs232 1' : 'Rs232 2'
          //   if (params.row.cport === 1) {
          //     con = 'Rs232 1'
          //   } else if (params.row.cport === 2) {
          //     con = 'Rs232 2'
          //   }
          //   return h('span', con)
          // }
        },
        {
          title: '厂商',
          key: 'manufacturer',
          align: 'left',
          sortable: true
          // render: (h, params) => {
          //   let text = ''
          //   if (params.row.manufacturer === '1') {
          //     text = '金迪'
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '型号',
          key: 'series',
          sortable: true,
          align: 'left'
        },
        {
          title: '所属机构',
          key: 'orgName',
          align: 'left',
          render: (h, params) => {
            return h(
              'span',
              {
                style: {
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                },
                domProps: {
                  title: params.row.orgName
                }
              },
              params.row.orgName
            )
          }
        },
        {
          title: '启用状态',
          key: 'deviceStatus',
          align: 'left',
          sortable: true,
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) }
          // render: (h, params) => {
          //   let text = ''
          //   let t = params.row.deviceStatus
          //   if (t === 1) {
          //     text = '启用'
          //   } else if (t === 0) {
          //     text = '停用'
          //   }
          //   return h('span', text)
          // }
        },
        {
          title: '状态',
          key: 'status',
          sortable: true,
          align: 'left',
          sortMethod: (a, b, type) => { return type === 'asc' ? a.localeCompare(b) : b.localeCompare(a) },
          render: (h, params) => {
            console.log(params.row)
            let color
            // let text
            if (params.row.status === '离线') {
              color = '#ed3f14'
              // text = '离线'
            } else {
              color = '#19be6b'
              // text = '在线'
            }
            return h(
              'span',
              {
                style: {
                  color: color
                }
              },
              params.row.status
            )
          }
        }
      ],
      ShortMessageShow: false,
      shortMessageData: {},
      deviceActiveTab: 0,
      deviceVideoTypeOpts: [
        {
          value: 'ipc',
          label: 'IPC'
        },
        {
          value: 'nvr',
          label: 'NVR'
        }
      ],
      deviceDecodeTypeOpts: [
        {
          value: 'softDecoder', // softDecoder
          label: 'TRS'
        },
        {
          value: 'hardDecoder', // hardDecoder
          label: 'TR'
        }
      ],
      deviceFacturerOpts: [],
      deviceFacturerIpc: [
        {
          value: 'bstar',
          label: '蓝色星际'
        },
        {
          value: 'dahua',
          label: '大华'
        },
        {
          value: 'hikvision',
          label: '海康威视'
        },
        {
          value: 'onvif',
          label: 'onvif'
        },
        {
          value: 'hkprotocol',
          label: '海康协议'
        },
        {
          value: 'custom',
          label: '自定义'
        }
      ],
      deviceFacturerNvr: [
        {
          value: 'bstar',
          label: '蓝色星际'
        },
        {
          value: 'dahua',
          label: '大华'
        },
        {
          value: 'hikvision',
          label: '海康威视'
        },
        {
          value: 'juanxin',
          label: '居安信'
        },
        {
          value: 'hbnvr',
          label: '汉邦'
        }
      ],
      deviceFacturerOptsOnly: [
        {
          value: 'bstar',
          label: '蓝色星际'
        }
      ],
      deviceModalTROpts: [
        {
          value: 'TR01B',
          label: 'TR01B'
        },
        {
          value: 'TR02C',
          label: 'TR02C'
        },
        {
          value: 'TR03B',
          label: 'TR03B'
        }
      ],
      deviceModalTRSOpts: [
        {
          value: 'TRS-M3',
          label: 'TRS-M3'
        }
      ],
      deviceSeriesOpts: [
        {
          value: 'bsr',
          label: 'BSR'
        },
        {
          value: 'BSR-IPHK',
          label: 'BSR-IPHK'
        }
      ],
      deviceProtocolOpts: [
        {
          value: 'tcp',
          label: 'TCP'
        },
        {
          value: 'udp',
          label: 'UDP'
        },
        {
          value: 'rtsp',
          label: 'RTSP'
        }
      ],
      customProtocolOpts: [
        {
          value: 'rtsp',
          label: 'RTSP'
        }
      ],
      deviceConnModeOpts: [
        {
          value: 'active',
          label: '主动连接'
        },
        {
          value: 'passive',
          label: '被动连接'
        }
      ],
      deviceFormData: { // 绑定数据
        accessServerIp: 0,
        name: '',
        bigtype: 0,
        // 所属大类(0：视频设备 1：报警主机 2：门禁设备 3：ip对讲 4：巡更设备) 5：解码器
        type: '',
        manufacturer: 'bstar',
        series: '',
        ip: '',
        adapterIp: '0.0.0.0', // Adapter地址
        adapterPort: '', // Adapter端口
        cport: 3721,
        dport: 3720,
        protocol: 'tcp',
        username: 'admin ',
        password: '123456',
        model: '',
        ipcount: 1,
        defenseicount: 0,
        defenseocount: 0,
        intercomcount: 0,
        decodecount: '',
        voicecount: '',
        encodingcount: '',
        status: false,
        connMode: '',
        // 设备状态
        oid: this.orgActiveId
        // intelligentalarm: false, // 智能报警
        // devicealarm: false, // 设备报警
        // monitorypointalarm: false // 监控点报警
      },
      deviceFormRole: {
        name: [
          { required: true, message: '设备名称不能为空', trigger: 'change' },
          { validator: deviceValidate.verifyName, trigger: 'change' },
          { validator: deviceValidate.noSpace, trigger: 'change' }
        ],
        type: [{ required: true, message: '请选择', trigger: 'change' }],
        manufacturer: [{ required: true, message: '请选择', trigger: 'change' }],
        // series: [{ required: true, message: '请选择', trigger: 'change' }],
        cport: [
          {
            required: true,
            validator: deviceValidate.dePort,
            trigger: 'change'
          }
        ],
        dport: [
          {
            required: true,
            validator: deviceValidate.dePort,
            trigger: 'change'
          }
        ],
        adapterPort: [
          { validator: deviceValidate.dePort, trigger: 'change' }
        ],
        ip: [{ required: true, message: 'ip地址不能为空', trigger: 'change' }],
        username: [
          { required: true, type: 'string', min: 1, message: '请输入用户名', trigger: 'change' },
          { type: 'string', max: 64, message: '不能超过64个字符', trigger: 'change' },
          { validator: deviceValidate.noSpace, trigger: 'change' }
        ],
        password: [
          { required: true, type: 'string', min: 1, message: '请输入密码', trigger: 'change' },
          { type: 'string', max: 64, message: '不能超过64个字符', trigger: 'change' },
          { required: true, validator: deviceValidate.noSpace, trigger: 'change' }
        ],
        ipcount: [{ required: true, validator: deviceValidate.deIpcount, trigger: 'change' }],
        defenseicount: [{ validator: deviceValidate.deTalkcount, trigger: 'change' }],
        defenseocount: [{ validator: deviceValidate.deTalkcount, trigger: 'change' }],
        intercomcount: [{ validator: deviceValidate.deTalkcount, trigger: 'change' }],
        decodecount: [{ validator: deviceValidate.deTalkcount, trigger: 'change' }],
        voicecount: [{ validator: deviceValidate.deTalkcount, trigger: 'change' }],
        mainStream: [
          { required: true, message: '主码流不能为空', trigger: 'change' },
          {
            type: 'string',
            max: 64,
            message: '不能超过64位字符',
            trigger: 'change'
          },
          { validator: deviceValidate.noSpace, trigger: 'change' }
        ],
        subStream: [
          { required: true, message: '子码流不能为空', trigger: 'change' },
          {
            type: 'string',
            max: 64,
            message: '不能超过64位字符',
            trigger: 'change'
          },
          { validator: deviceValidate.noSpace, trigger: 'change' }
        ]
      },
      deviceSelectIds: [],
      deviceSlectDelIdsList: [],
      deviceModalState: {
        pageOneShow: true,
        pageTwoShow: false
      },
      deviceAddModal: false,
      isSingleAdd: false,
      isEditDevice: false,
      deviceIps: '192.168.0.0-0',
      isShowChild: true,
      isTR: false,
      pageSelect: 1,
      pageLimit: this.$PageInfo.size[0],
      filterKey: '',
      isSearch: false,
      deviceActiveId: '',
      deviceActiveName: '',
      isDeviceChecked: false,
      // 把选中的设备数据传到视频通道页面控制tab的显示
      hitDeviceInfo: {},
      botHeight: '163px',
      isHide: true,
      topTableHeight: 0,
      deviceTableData: [],
      devMoveData: [],
      deviceMoveTreeOptions: {
        showInput: false
      },
      devMoveModal: false,
      resMoveOrgId: ''
    }
  },
  computed: {
    ...mapState({
      orgTreeData: ({ orgSetting }) => orgSetting.orgTreeData,
      orgActiveName: ({ orgSetting }) => orgSetting.orgActiveName,
      isRootOrg: ({ orgSetting }) => orgSetting.isRootOrg,
      pageInfo: ({ equipment }) => equipment.pageInfo,
      orgActiveId: ({ orgSetting }) => orgSetting.orgActiveId
    }),
    ...mapGetters(['sysConfrole', 'accessToken']),
    topHeight() {
      return this.deviceActiveTab === 6 ? `calc(100% + 25px)` : `calc(100% - 129px)`
    },
    tableHeight() {
      return parseInt(this.botHeight) - 90
    }
  },
  watch: {
    deviceAddModal(newval) { // 视频及解码器设备添加弹出框 关闭时
      if (!newval) {
        this.deviceInfoCancel()
      }
    },
    // 设备类型变化
    'deviceFormData.type'(val, oldVal) {
      if (val === 'ipc') {
        this.deviceFacturerOpts = this.deviceFacturerIpc
      } else if (val === 'nvr') {
        this.deviceFacturerOpts = this.deviceFacturerNvr
      } else {
        return
      }
      if (document.getElementById('Modification') === document.activeElement) {
        return
      }
      let manufacturer = Object.keys(this.videoParameterList[val])[0]
      let seriesObj = this.videoParameterList[this.deviceFormData.type][manufacturer] // 产品厂商对象 里面是系列
      this.deviceFormData.manufacturer = manufacturer
      this.deviceSeriesOpts = []
      for (const key in seriesObj) {
        this.deviceSeriesOpts.push({ value: key, label: key.toUpperCase() })
      }
      this.deviceFormData.series = seriesObj[Object.keys(seriesObj)[0]][0]
      this.deviceFormData.cport = seriesObj[Object.keys(seriesObj)[0]][1]
      this.deviceFormData.dport = seriesObj[Object.keys(seriesObj)[0]][2]
      this.deviceFormData.username = seriesObj[Object.keys(seriesObj)[0]][3]
      this.deviceFormData.password = seriesObj[Object.keys(seriesObj)[0]][4]
      this.deviceFormData.ipcount = this.videoParameterList[this.deviceFormData.type].ipcount
    },
    'deviceFormData.manufacturer'(newval, val) {
      if (!this.deviceFormData.type || !newval) {
        return
      }
      if (document.getElementById('Modification') === document.activeElement) {
        return
      }
      let seriesObjMan = this.videoParameterList[this.deviceFormData.type][newval]
      this.deviceSeriesOpts = []
      for (const key in seriesObjMan) {
        this.deviceSeriesOpts.push({ value: key, label: key.toUpperCase() })
      }
      this.deviceFormData.series = seriesObjMan[Object.keys(seriesObjMan)[0]][0]
      this.deviceFormData.cport = seriesObjMan[Object.keys(seriesObjMan)[0]][1]
      this.deviceFormData.dport = seriesObjMan[Object.keys(seriesObjMan)[0]][2]
      this.deviceFormData.username = seriesObjMan[Object.keys(seriesObjMan)[0]][3]
      this.deviceFormData.password = seriesObjMan[Object.keys(seriesObjMan)[0]][4]
      this.deviceFormData.ipcount = this.videoParameterList[this.deviceFormData.type].ipcount
    },
    deviceActiveTab(newcal, oldVal) {
      if (this.deviceActiveTab === 5) {
        this.getaccessServerList().then(res => {
          this.accessServerList = []
          res.data.forEach((item, index) => {
            this.accessServerList.push({ value: item, label: item })
          })
          this.accessServerIp = this.accessServerList[0].value
        }).catch(err => {
          console.log(err)
        })
      }
      this.isHide = true
      this.botHeight = '163px'
      this.$nextTick(function() {
        this.topTableHeight = this.$refs.tableBox.offsetHeight
      })
    }
  },
  created() {
    this.headerObj.Authorization = `Bearer ${this.accessToken}`
    for (let item in this.deviceTabs) {
      if (this.deviceTabs[item].isHide === false) {
        this.deviceTabs[item].active = true
        this.deviceTabClick({
          index: this.deviceTabs[item].value,
          obj: this.deviceTabs[item]
        })
        return
      }
    }
    this.setDeviceIsUpdate()
  },
  mounted() {
    this.topTableHeight = this.$refs['tableBox'].offsetHeight
  },
  methods: {
    ...mapActions([
      'getDevicesByType',
      'getDeviceCounts',
      'addSingleDevice',
      'deleteDevice',
      'getDeviceInfo',
      'editDeviceInfo',
      'saveResourceToOrg',
      'getResOfDeviceById',
      'restartDevice',
      'setDeviceIsUpdate',
      'postDevMove',
      'recordLog',
      'getaccessServerList',
      'setDeviceStatus',
      'setOrgActiveId'
    ]),
    // 设备启用停用
    updateDeviceStatus(val) {
      if (this.deviceSelectIds.length === 0) {
        this.warningMsg('请至少选择1个设备')
      } else {
        this.setDeviceStatus({ ids: this.deviceSelectIds, status: val }).then(res => { // 设置设备 在线/离线 状态
          if (val === 1) { // 启用
            this.successMsg('设备启用成功')
          } else { // 停用
            this.successMsg('设备停用成功')
          }
          this.getDevicesData(1) // 获取设备数据表的第1页
          this.deviceSelectIds = []
          this.isDeviceChecked = false
          this.pageSelect = 1
        }).catch(err => {
          console.log(err)
          this.errorMsg('设备状态操作失败')
        })
      }
    },
    resize() {
      this.topTableHeight = this.$refs['tableBox'].offsetHeight
    },
    exportData() {
      // let elemIF = document.createElement('iframe')
      // // 视频设备导出日志提交
      // this.recordLog({
      //   logType: '管理日志',
      //   module: '设备管理',
      //   operateName: '设备导出',
      //   operateContent: '视频设备导出，设备类型:0'
      // })
      // elemIF.src =
      //   window.location.origin + `/api/setting/device/export?oid=${this.orgActiveId}&bigtype=${this.deviceActiveTab}`
      // elemIF.style.display = 'none's
      // document.body.appendChild(elemIF)
      let url = `/api/setting/device/export?oid=${this.orgActiveId}&bigtype=${this.deviceActiveTab}`
      let name
      this.deviceTabs.forEach(item => {
        if (item.value === this.deviceActiveTab) {
          name = `${item.title}-${this.$moment(new Date()).format('YYYYMMDDHHmmss')}.xlsx`
        }
      })
      download(url, name, () => {
      }, () => { this.errorMsg('下载失败！') })
    },
    rowClassName() {},
    // 选中表格第一行的 样式
    rowClassStyle(row, index) {
      if (index === 0) {
        return 'ivu-table-row-highlight'
      }
      return ''
    },
    clickDeviceRow(obj) {
      this.deviceActiveId = obj._id
      this.deviceActiveName = obj.name
      this.hitDeviceInfo = obj
      this.rowClassName = function() {}
    },
    // 页面初次加载获取跟机构第一页
    deviceFormDataInit() {
      this.isEditDevice = false
      switch (this.deviceActiveTab) {
        case 9: {
          this.jointDeviceShow = true
          break
        }
        case 6: {
          this.keyboardDeviceShow = true
          break
        }
        case 7: {
          this.fireDeviceShow = true
          break
        }
        case 1: {
          this.alarmDeviceShow = true
          break
        }
        case 10: {
          this.ShortMessageShow = true
          break
        }
        default: {
          this.deviceAddModal = true // 视频及解码器设备添加框弹出
        }
      }
      this.deviceModalState.pageOneShow = true
      this.deviceModalState.pageTwoShow = false
      if (this.deviceActiveTab === 0) {
        this.deviceFormData = {
          name: '',
          bigtype: 0,
          type: 'ipc',
          manufacturer: 'bstar',
          series: 'bsr',
          ip: '0.0.0.0',
          adapterIp: '0.0.0.0',
          adapterPort: '',
          cport: 3721,
          dport: 3720,
          protocol: 'tcp',
          connMode: 'active',
          username: 'admin',
          password: '123456',
          ipcount: 1,
          defenseicount: 0,
          defenseocount: 0,
          intercomcount: 0,
          encodingcount: '',
          status: false,
          // intelligentalarm: false, // 智能报警
          isDeviceValid: true
          // devicealarm: false, // 设备报警
          // monitorypointalarm: false // 监控点报警
        }
      }
      if (this.deviceActiveTab === 5) {
        this.deviceFormData = {
          name: '',
          bigtype: 5,
          type: 'softDecoder',
          manufacturer: 'bstar',
          series: 'bsr',
          ip: '0.0.0.0',
          cport: 8000,
          dport: '',
          protocol: 'tcp',
          connMode: 'active',
          username: 'admin',
          password: 'test-123',
          model: 'TRS-M3',
          defenseicount: '',
          defenseocount: '',
          decodecount: '',
          voicecount: '',
          encodingcount: '',
          status: false,
          oid: this.orgActiveId,
          isDeviceValid: true
        }
      }
      if (this.deviceActiveTab === 1) {
        this.alarmFormData = {
          type: 'alarmHost',
          bigtype: 1,
          name: '',
          manufacturer: 'shike',
          model: 'SK239G',
          intranetIp: '0.0.0.0', // 服务器ip
          intranetPort: '20433', // 服务器端口
          ip: '0.0.0.0', // 主机地址
          cport: 3721, // 控制端口
          username: 'admin',
          password: '123456',
          defenseicount: '',
          defenseocount: '',
          status: false, // 设备状态
          oid: this.orgActiveId // 所属机构
        }
      }
      if (this.deviceActiveTab === 7) {
        this.fireFormData = {
          type: 'fire',
          bigtype: 7,
          name: '',
          manufacturer: 'lida',
          model: 'ld6930',
          intranetIp: '0.0.0.0', // 内网地址
          ip: '0.0.0.0', // 主机地址
          cport: 3721, // 控制端口
          username: 'admin',
          password: '123456',
          alarmTesponseTime: 3,
          // defenseicount: '',     // 输入防区个数
          // gridinstartnum: '',  // 输入防区起始编号
          // defenseocount: '',     // 输出防区个数
          // gridoutstartnum: '',  // 输出防区起始编号
          status: false, // 设备状态
          oid: this.orgActiveId // 所属机构
        }
      }
      if (this.deviceActiveTab === 9) {
        this.jointFormData = {
          type: 'stictchingCon',
          bigtype: 9,
          name: '拼接控制器',
          manufacturer: 'Tricolor',
          // model: '',
          ip: '0.0.0.0', // 主机地址
          cport: 1024, // 控制端口
          jointinputcount: 0,
          status: false, // 设备状态
          oid: this.orgActiveId // 所属机构
        }
      }
      if (this.deviceActiveTab === 6) {
        this.keyboardFormData = {
          bigtype: 6,
          name: '',
          manufacturer: 'bstar',
          model: 'BSR-K10C',
          type: 'keyboard',
          ip: '0.0.0.0', // 主机地址
          cport: 3721, // 控制端口
          status: false, // 设备状态
          oid: this.orgActiveId // 所属机构
        }
      }
      if (this.deviceActiveTab === 10) {
        this.shortMessageData = {
          bigtype: 10,
          name: '',
          manufacturer: 'jindi',
          series: 'M1206B',
          ip: 'COM',
          cport: 1, // 控制端口
          status: false, // 设备状态
          oid: this.orgActiveId, // 所属机构
          type: 'sim'
        }
      }
    },
    changDecodeType(val) {
      if (document.getElementById('Modification') === document.activeElement) {
        if (val === 'hardDecoder') {
          this.isTR = true
        } else {
          this.isTR = false
        }
        return
      }
      if (val === 'hardDecoder' && this.deviceActiveTab === 5) {
        this.isTR = true
        this.deviceFormData.model = 'TR01B'
      }
      if (val === 'softDecoder' && this.deviceActiveTab === 5) {
        this.isTR = false
        this.deviceFormData.model = 'TRS-M3'
      }
    },
    // 设备厂商变化
    changDeviceFacturer(newval) {
    },
    getDevicesDataClick(val) {
      this.setOrgActiveId(val._id)
      if (val.shareServer) {
        this.thirdParty = false
      } else {
        this.thirdParty = true
      }
      this.isSearch = false
      this.pageSelect = 1
      this.deviceSelectIds = []
      this.deviceSlectDelIdsList = []
      this.isDeviceChecked = false
      this.getDevicesData(1)
      this.isShowChild ? this.getAllDeviceCounts(-1) : this.getAllDeviceCounts(0)
    },
    getAllDeviceCounts(never) {
      this.getDeviceCounts(never)
        .then(suc => {
          for (let i = 0; i < this.deviceTabs.length; i++) {
            if (suc.data[this.deviceTabs[i].value]) {
              this.deviceTabs[i].number = suc.data[this.deviceTabs[i].value]
            } else {
              this.deviceTabs[i].number = 0
            }
          }
          if (this.deviceTabs[this.deviceActiveTab].number === this.pageLimit) {
            this.pageSelect = 1
            this.getDevicesData(1)
          }
        })
        .catch(err => {
          console.log('getDeviceCounts error: ' + err)
        })
    },
    // 点击选择子机构按钮实时刷新
    showChildRefresh() {
      this.deviceTableFresh()
    },
    deviceTableFreshSefresh() {
      this.deviceTableFresh()
    },
    // 页面刷新获取当前页码
    deviceTableFresh() {
      this.isDeviceChecked = false
      this.deviceSelectIds = []
      this.deviceSlectDelIdsList = []
      this.getDevicesData(this.pageSelect, 1)
      this.filterKey = ''
      this.isShowChild ? this.getAllDeviceCounts(-1) : this.getAllDeviceCounts(0)
    },
    // 搜索按钮获取
    seekDeviceData(num, isChange) {
      this.isSearch = true
      if (isChange && !!this.filterKey) {
        return
      }
      this.getDevicesData(num)
    },
    // 获取Devicetable 设备数据表
    getDevicesData(num, val) {
      this.getDevicesByType({
        page: num,
        limit: this.pageLimit,
        never: this.isShowChild ? -1 : 0,
        bigtype: this.deviceActiveTab,
        seek: this.filterKey
      })
        .then(suc => {
          this.deviceTableData = JSON.parse(JSON.stringify(suc.devList))
          let formattingObj = {
            0: {
              manufacturer: {
                dahua: '大华',
                bstar: '蓝色星际',
                hikvision: '海康',
                onvif: 'onvif',
                custom: '自定义',
                hkprotocol: '海康协议',
                juanxin: '居安信',
                hbnvr: '汉邦'
              }
            },
            5: {
              manufacturer: {
                bstar: '蓝色星际'
              }
            },
            7: {
              manufacturer: {
                lida: '利达'
              }
            },
            9: {
              manufacturer: {
                Tricolor: '淳中科技'
              }
            },
            6: {
              manufacturer: {
                bstar: '蓝色星际'
              }
            },
            1: {
              manufacturer: {
                shike: 'shike',
                guangtuo: '广拓'
              }
            },
            10: {
              manufacturer: {
                jindi: '金迪'
              }
            }
          }
          // 格式化表格数据 为了使用 iview 表格排序正确 start
          this.deviceTableData.forEach(item => {
            item.manufacturer = formattingObj[this.deviceActiveTab].manufacturer[item.manufacturer] || item.manufacturer
            item.orgName = item.oid.name
            item.status = item.status ? '在线' : '离线'
            item.deviceStatus = Number(item.deviceStatus) === 1 ? '启用' : '停用'
          })
          // 格式化表格数据 为了使用 iview 表格排序正确 end
          this.deviceTableData.forEach((item, index) => {
            item.serialNumber = index + 1
          })
          if (this.deviceTableData[0]) { // 页面下部设备通道的相关参数
            this.deviceActiveId = this.deviceTableData[0]._id
            this.deviceActiveName = this.deviceTableData[0].name
            this.hitDeviceInfo = this.deviceTableData[0]
          } else {
            this.deviceActiveId = 'notExist'
          }
          this.rowClassName = this.rowClassStyle
          if (val === 1) {
            this.successMsg('数据刷新成功')
          }
        })
        .catch(err => {
          console.log('getDevicesByType error: ' + err)
          this.warningMsg(err)
        })
    },
    // 点击切换页面
    deviceTabClick(data) {
      this.deviceActiveTab = data.obj.value
      this.isSearch = false
      if (this.orgActiveId) {
        this.getDevicesData(1)
      }
      this.pageSelect = 1
      this.deviceSelectIds = []
      this.deviceSlectDelIdsList = []
      this.isDeviceChecked = false
      // 更换表格的Columns
      switch (this.deviceActiveTab) {
        case 0:
          this.deviceColumns = this.videoColumns
          break
        case 1:
          this.deviceColumns = this.alarmColumns
          break
        case 5:
          this.deviceColumns = this.decodeColumns
          break
        case 6:
          this.deviceColumns = this.keyboardColumns
          break
        case 7:
          this.deviceColumns = this.fireEngineColumns
          break
        case 9:
          this.deviceColumns = this.jointColumns
          break
        case 10:
          this.deviceColumns = this.smsColumns
          break
        default:
          this.deviceColumns = this.videoColumns
      }
      if (this.deviceActiveTab === 10) {
        this.searchPlaceholder = '请输入设备名称'
      } else {
        this.searchPlaceholder = '请输入设备名称、设备IP'
      }
    },
    // 选中按钮获取每个的ID
    selectDeviceRow(sels) {
      if (sels.length === 0) {
        this.thirdParty = true
        this.isDeviceChecked = false
      } else {
        this.isDeviceChecked = true
      }
      this.deviceSelectIds = []
      this.deviceSlectDelIdsList = []
      for (let sel of sels) {
        if (sel.shareServer) {
          this.thirdParty = false
        } else {
          this.thirdParty = true
        }
        this.deviceSlectDelIdsList.push(sel)
        this.deviceSelectIds.push(sel._id)
      }
    },
    // 页码改变
    changeDevicePage(n) {
      if (this.isSearch) {
        this.seekDeviceData(n)
      } else {
        this.getDevicesData(n)
      }
      this.pageSelect = n
    },
    // 切换每页条数时的回调，返回切换后的每页条数
    sizeChange(size) {
      this.pageLimit = size
      this.changeDevicePage(1)
    },
    // Modal的方法
    modalPageClick(p) {
      if (p === 'P1') {
        this.deviceModalState.pageOneShow = true
        this.deviceModalState.pageTwoShow = false
      }
      if (p === 'P2') {
        this.deviceModalState.pageOneShow = false
        this.deviceModalState.pageTwoShow = true
      }
    },
    saveShortMessage(data, name) {
      this.recordLog({
        logType: '管理日志',
        module: '设备管理',
        operateName: '设备' + (this.isEditDevice ? '修改' : '添加'),
        operateContent: data.name,
        target: '短信猫',
        deviceIp: ''
      })
      this[!this.isEditDevice ? 'addSingleDevice' : 'editDeviceInfo'](!this.isEditDevice ? data : { form: data, id: data._id })
        .then(() => {
          this.successMsg('设备' + (!this.isEditDevice ? '添加' : '修改') + '成功')
          this.ShortMessageShow = false
          this.$refs['ShortMessage'].$refs[name].resetFields()
          this.deviceTableFresh()
        })
        .catch(err => {
          this.errorMsg('设备' + (!this.isEditDevice ? '添加' : '修改') + '失败')
          console.log('add error: ' + err)
        })
      // this.ShortMessageShow = false
    },
    cancelShortMessage() {
      this.ShortMessageShow = false
    },
    // 设备添加
    deviceSingleAdd() {
      this.isSingleAdd = true
      this.isModelLoading = false
      this.deviceFormDataInit() // 弹出相应的设备添加弹窗
      if (this.deviceActiveTab === 7) {
        this.$refs.FireDevice.facturer = true
      }
    },
    deviceBatchAdd() {
      this.isSingleAdd = false
      this.deviceFormDataInit()
    },
    // 修改设备
    deviceEditModal() {
      if (this.deviceSelectIds.length !== 1) {
        this.$Modal.confirm({
          title: '提示',
          content: '一次只能修改一个！'
        })
        return
      }
      let tab = this.deviceActiveTab
      let index = this.deviceSelectIds[0] // id号
      if (tab === 0 || tab === 5) { // 0,视频;5,解码器
        this.deviceEditOpen(index)
      } else if (tab === 1) {
        this.alarmDeviceEdit(index)
      } else if (tab === 6) {
        this.keyboarDevEdit(index)
      } else if (tab === 7) {
        this.fireDeviceEdit(index)
      } else if (tab === 9) {
        this.jointDeviceEdit(index)
      } else if (tab === 10) {
        this.shortMessageUpdate(index)
      }
    },
    // 视频及解码器的修改
    deviceEditOpen(id) {
      this.getDeviceInfo(id)
        .then(suc => { // 从服务器获取到相应设备的数据
          this.deviceFormData = JSON.parse(JSON.stringify(suc))
          if (this.deviceActiveTab === 0) { // 修改视频设备 // 设备型号
            let seriesObjMan = this.videoParameterList[this.deviceFormData.type][this.deviceFormData.manufacturer]
            this.deviceSeriesOpts = []
            for (const key in seriesObjMan) {
              this.deviceSeriesOpts.push({ value: key, label: key.toUpperCase() })
            }
          }
          if (suc.accessServerIp) {
            this.accessServerIp = suc.accessServerIp
            if (this.accessServerList.length === 0) { // 若接入服务器列表请求失败 生成列表
              this.accessServerList = [ { value: suc.accessServerIp, label: suc.accessServerIp } ]
            }
          }
          if (this.deviceActiveTab === 0 && !this.deviceFormData.adapterIp) {
            this.deviceFormData.adapterIp = '0.0.0.0' // Adapter地址
            this.deviceFormData.adapterPort = '' // Adapter端口
          }
          if (this.deviceFormData.adapterPort === null) { this.deviceFormData.adapterPort = '' }
          if (this.deviceActiveTab === 5 && this.deviceFormData.type === 'hardDecoder') {
            //  判断修改解码器是否显示下面三个输入框
            this.isTR = true
          } else {
            this.isTR = false
          }
          this.isEditDevice = true
          this.deviceAddModal = true
        })
        .catch(err => {
          console.log('getDeviceInfo error: ' + err)
          this.errorMsg(err)
        })
      this.isSingleAdd = false
      this.deviceModalState.pageOneShow = true
      this.deviceModalState.pageTwoShow = false
    },
    deviceCopyOpen() {
      if (this.deviceSelectIds.length !== 1) {
        this.warningMsg('请选择一条设备')
      } else {
        this.getDeviceInfo(this.deviceSelectIds[0])
          .then(suc => {
            this.deviceFormData = JSON.parse(JSON.stringify(suc))
            this.successMsg('所勾选设备信息复制成功')
            this.deviceAddModal = true
          })
          .catch(err => {
            console.log('getDeviceInfo error: ' + err)
            this.errorMsg(err)
          })
      }
    },
    deviceFormValidate() {
      if (this.deviceActiveTab === 0) {
        if (this.deviceFormData.manufacturer === 'custom') {
          this.$refs.deviceVideCustomForm.validate(valid => {
            if (!valid) {
              this.isDeviceValid = false
              this.$refs.deviceVideTwoForm.validate()
              this.deviceModalState.pageOneShow = true
              this.deviceModalState.pageTwoShow = false
            } else {
              this.$refs.deviceVideTwoForm.validate(valid => {
                if (!valid) {
                  this.isDeviceValid = false
                  this.deviceModalState.pageOneShow = false
                  this.deviceModalState.pageTwoShow = true
                } else {
                  this.isDeviceValid = true
                }
              })
            }
          })
        } else {
          this.$refs.deviceVideOneForm.validate(valid => {
            if (!valid) {
              this.isDeviceValid = false
              this.deviceModalState.pageOneShow = true
              this.deviceModalState.pageTwoShow = false
              this.$refs.deviceVideTwoForm.validate()
            } else {
              this.$refs.deviceVideTwoForm.validate(valid => {
                if (!valid) {
                  this.isDeviceValid = false
                  this.deviceModalState.pageOneShow = false
                  this.deviceModalState.pageTwoShow = true
                } else {
                  this.isDeviceValid = true
                }
              })
            }
          })
        }
      }
      if (this.deviceActiveTab === 5) {
        this.$refs.deviceDecodeOneForm.validate(valid => {
          if (valid) {
            this.isDeviceValid = true
          } else {
            this.isDeviceValid = false
          }
        })
      }
    },
    // 视频及解码器的添加修改弹窗保存
    deviceInfoSave() {
      this.deviceFormValidate()
      if (this.isDeviceValid) {
        // 视频设备、解码器设备日志提交
        this.recordLog({
          logType: '管理日志',
          module: '设备管理',
          operateName: '设备' + (this.isEditDevice ? '修改' : this.isSingleAdd ? '添加' : ''),
          operateContent: this.deviceFormData.name,
          target: this.deviceActiveTab === 5 ? '解码器' : '视频设备',
          deviceIp: this.deviceFormData.ip
        })
        // 设备添加或修改
        this.deviceFormData.bigtype = Number(this.deviceActiveTab)
        if (this.isEditDevice) {
          // if (this.deviceFormData.manufacturer === 'custom') {
          //   this.deviceFormData.protocol = 'rtsp'
          // }
          // if (this.deviceFormData.manufacturer !== 'juanxin') {
          //   this.deviceFormData.adapterIp = ''
          //   this.deviceFormData.adapterPort = ''
          // }
          if (this.deviceFormData.bigtype === 5 && this.accessServerIp === '') {
            this.errorMsg('接入服务器必填！')
            return
          }
          for (let index = 0; index < this.accessServerList.length; index++) {
            if (this.accessServerList[index].value === this.accessServerIp) {
              this.deviceFormData.accessServerIp = this.accessServerList[index].label
              break
            }
          }
          this.editDeviceInfo({
            form: this.deviceFormData,
            id: this.deviceSelectIds[0]
          })
            .then(suc => {
              this.successMsg('设备修改成功')
              // 修改完成后  如果修改的和击中的都是表格的第一条数据。应该让设备id人为发生变化，下面的资源列表才会重新加载(因为监听的是设备id)
              this.deviceActiveId = 'notExist'
              this.deviceTableFresh()
              this.deviceAddModal = false
            })
            .catch(err => {
              this.errorMsg(err)
              console.log('editDeviceInfo error: ' + err)
            })
          return
        }
        if (this.isSingleAdd) {
          if (this.deviceFormData.manufacturer === 'custom') {
            this.deviceFormData.cport = ''
            this.deviceFormData.dport = ''
            this.deviceFormData.admin = ''
            this.deviceFormData.password = ''
            // this.deviceFormData.protocol = 'rtsp'
          }
          if (this.deviceActiveTab === 5) {
            this.deviceFormData.dport = ''
          }
          // if (this.deviceFormData.manufacturer !== 'juanxin') {
          //   this.deviceFormData.adapterIp = ''
          //   this.deviceFormData.adapterPort = ''
          // }
          if (this.deviceFormData.bigtype === 5 && this.accessServerIp === '') {
            this.errorMsg('接入服务器必填！')
            return
          }
          for (let index = 0; index < this.accessServerList.length; index++) {
            if (this.accessServerList[index].value === this.accessServerIp) {
              this.deviceFormData.accessServerIp = this.accessServerList[index].label
              break
            }
          }
          this.addSingleDevice(this.deviceFormData)
            .then(suc => {
              this.successMsg('设备添加成功')
              this.deviceTableFresh()
              this.deviceAddModal = false
            })
            .catch(err => {
              this.errorMsg(err)
              console.log('addSingleDevice error: ' + err)
            })
        }
      }
    },
    // 取消清空效果
    deviceInfoCancel() {
      // this.deviceAddModal = false
      // this.$refs.deviceVideOneForm.resetFields()
      // this.$refs.deviceVideTwoForm.resetFields()
      // this.$refs.deviceDecodeOneForm.resetFields()
      try {
        if (this.$refs.deviceVideOneForm) {
          this.$refs.deviceVideOneForm.resetFields()
        }
        if (this.$refs.deviceVideTwoForm) {
          this.$refs.deviceVideTwoForm.resetFields()
        }
        if (this.$refs.deviceDecodeOneForm) {
          this.$refs.deviceDecodeOneForm.resetFields()
        }
        if (this.$refs.deviceDecodeTwoForm) {
          this.$refs.deviceDecodeTwoForm.resetFields()
        }
      } catch (err) {
      }
      this.deviceAddModal = false
      this.isTR = false
    },
    // 设备删除的方法
    deviceDeleteOpen() {
      if (this.deviceSelectIds.length === 0) {
        this.warningMsg('请选择需要删除的设备')
        return
      }
      this.createDeviceDelModel()
    },
    createDeviceDelModel() {
      this.$Modal.confirm({
        title: '提示',
        content: '<p>确认删除所选设备吗？</p>',
        onOk: () => {
          this.deviceDeleteSave()
        },
        onCancel: () => {}
      })
    },
    deviceDeleteSave() {
      let logIp = []
      let logName = []
      this.deviceSlectDelIdsList.forEach(item => {
        logName.push(item.name)
        logIp.push(item.ip)
      })
      // 设备删除日志提交
      this.recordLog({
        logType: '管理日志',
        module: '设备管理',
        operateName: '设备删除',
        operateContent: logName.join(','),
        target: this.tabTypeFn(),
        deviceIp: logIp.join(',')
      })
      // 设备删除日志
      this.deleteDevice(this.deviceSelectIds)
        .then(suc => {
          this.successMsg('删除成功')
          this.deviceTableFresh()
          this.isShowChild ? this.getAllDeviceCounts(-1) : this.getAllDeviceCounts(0)
        })
        .catch(err => {
          console.log('deleteDevice error: ' + err)
          this.errorMsg(err.response.data.message)
        })
    },
    // 设备重启  此方法未验证！！！
    tabTypeFn() {
      let name = ''
      this.deviceTabs.forEach(item => {
        if (this.deviceActiveTab === item.value) {
          name = item.title
        }
      })
      return name
    },
    deviceRestart(id) {
      this.getDeviceInfo(id)
        .then(suc => {
          this.restartDevice({
            ip: suc.ip,
            port: suc.cport
          })
            .then(suc => {
              this.successMsg('重启成功')
            })
            .catch(err => {
              console.log('restartDevice error: ' + err)
              this.errorMsg(err)
            })
        })
        .catch(err => {
          console.log('getDeviceInfo error: ' + err)
          this.errorMsg(err)
        })
    },
    // 报警主机修改
    alarmDeviceEdit(id) {
      this.getDeviceInfo(id)
        .then(suc => {
          this.isEditDevice = true
          this.alarmFormData = JSON.parse(JSON.stringify(suc))
          this.alarmDeviceShow = true
        })
        .catch(err => {
          console.log('getDeviceInfo error: ' + err)
          this.errorMsg(err)
        })
    },
    // 报警主机添加及修改 的弹窗保存
    saveAlarmDevice(data, name) {
      // 报警主机设备添加修改日志提交
      this.recordLog({
        logType: '管理日志',
        module: '设备管理',
        operateName: '设备' + (this.isEditDevice ? '修改' : '添加'),
        operateContent: data.name,
        target: '报警主机设备',
        deviceIp: data.ip
      })
      // 报警主机设备添加修改
      if (!this.isEditDevice) {
        this.addSingleDevice(data)
          .then(() => {
            this.successMsg('设备添加成功')
            this.alarmDeviceShow = false
            this.$refs['AlarmDevice'].$refs[name].resetFields()
            this.deviceTableFresh()
          })
          .catch(err => {
            this.errorMsg(err)
            console.log('add error: ' + err)
          })
      } else {
        this.editDeviceInfo({ form: data, id: data._id })
          .then(() => {
            this.successMsg('设备信息修改成功')
            this.alarmDeviceShow = false
            this.$refs['AlarmDevice'].$refs[name].resetFields()
            this.deviceActiveId = 'notExist'
            this.deviceTableFresh()
          })
          .catch(err => {
            this.errorMsg(err)
            console.log('edit error: ' + err)
          })
      }
    },
    // 报警主机添加及修改 的弹窗取消
    cancelAlarmDevice() {
      this.alarmDeviceShow = false
    },
    // 消防主机修改
    fireDeviceEdit(id) {
      this.getDeviceInfo(id)
        .then(suc => {
          this.isEditDevice = true
          this.fireFormData = JSON.parse(JSON.stringify(suc))
          this.fireDeviceShow = true
        })
        .catch(err => {
          console.log('getDeviceInfo error: ' + err)
          this.errorMsg(err)
        })
    },
    // 消防主机添加及修改 的弹窗取消
    cancelFireDevice() {
      this.fireDeviceShow = false
    },
    // 消防主机添加及修改 的弹窗保存
    saveFireDevice(data, name) {
      // 消防主机设备添加修改日志提交
      this.recordLog({
        logType: '管理日志',
        module: '设备管理',
        operateName: '设备' + (this.isEditDevice ? '修改' : '添加'),
        operateContent: data.name,
        target: '消防主机设备',
        deviceIp: data.ip
      })

      // 消防主机设备添加修改
      if (!this.isEditDevice) {
        this.addSingleDevice(data)
          .then(() => {
            this.successMsg('设备添加成功')
            this.fireDeviceShow = false
            this.$refs['FireDevice'].$refs[name].resetFields()
            this.deviceTableFresh()
          })
          .catch(err => {
            this.errorMsg(err)
            console.log('add error: ' + err)
          })
      } else {
        this.editDeviceInfo({ form: data, id: data._id })
          .then(() => {
            this.successMsg('设备信息修改成功')
            this.fireDeviceShow = false
            this.$refs['FireDevice'].$refs[name].resetFields()
            this.deviceActiveId = 'notExist'
            this.deviceTableFresh()
          })
          .catch(err => {
            this.errorMsg(err)
            console.log('edit error: ' + err)
          })
      }
    },
    // 拼接控制器修改
    jointDeviceEdit(id) {
      this.getDeviceInfo(id)
        .then(suc => {
          this.isEditDevice = true
          this.jointFormData = JSON.parse(JSON.stringify(suc))
          this.jointDeviceShow = true
        })
        .catch(err => {
          console.log('getDeviceInfo error: ' + err)
          this.errorMsg(err)
        })
    },
    // 短信猫修改
    shortMessageUpdate(id) {
      this.getDeviceInfo(id)
        .then(suc => {
          this.isEditDevice = true
          this.shortMessageData = JSON.parse(JSON.stringify(suc))
          this.ShortMessageShow = true
        })
        .catch(err => {
          console.log('getDeviceInfo error: ' + err)
          this.errorMsg(err)
        })
    },
    // 拼接控制器添加及修改 的弹窗取消
    cancelJointDevice() {
      this.jointDeviceShow = false
      this.$refs['JointDevice'].$refs['jointDevice'].resetFields()
    },
    // 拼接控制器添加及修改 的弹窗保存
    saveJointDevice(data, name) {
      this.isModelLoading = true
      // 拼接控制器设备添加修改日志提交
      this.recordLog({
        logType: '管理日志',
        module: '设备管理',
        operateName: '设备' + (this.isEditDevice ? '修改' : '添加'),
        operateContent: data.name,
        target: '拼接控制器',
        deviceIp: data.ip
      })
      // 拼接控制器添加修改
      if (!this.isEditDevice) {
        this.addSingleDevice(data)
          .then(() => {
            this.successMsg('设备添加成功')
            this.jointDeviceShow = false
            try {
              this.$refs['JointDevice'].$refs[name].resetFields()
            } catch (e) {}
            this.deviceTableFresh()
            this.isModelLoading = false
          })
          .catch(err => {
            this.isModelLoading = false
            this.errorMsg('设备添加失败')
            console.log('add error: ' + err)
          })
      } else {
        this.editDeviceInfo({ form: data, id: data._id })
          .then(() => {
            this.successMsg('设备信息修改成功')
            this.jointDeviceShow = false
            this.$refs['JointDevice'].$refs[name].resetFields()
            this.deviceActiveId = 'notExist'
            this.deviceTableFresh()
            this.isModelLoading = false
          })
          .catch(err => {
            this.isModelLoading = false
            this.errorMsg('设备信息修改失败')
            console.log('edit error: ' + err)
          })
      }
    },
    // 关闭网络键盘Mode
    cancelkeyboarDev() {
      this.keyboardDeviceShow = false
      this.$refs['KeyboardDevice'].$refs['KeyboardDevice'].resetFields()
    },
    // 网络键盘修改Mode
    keyboarDevEdit(id) {
      this.getDeviceInfo(id)
        .then(suc => {
          this.isEditDevice = true
          this.keyboardFormData = JSON.parse(JSON.stringify(suc))
          this.keyboardDeviceShow = true
        })
        .catch(err => {
          console.log('getDeviceInfo error: ' + err)
          this.errorMsg(err)
        })
    },
    // 网络键盘Mode添加修改提交
    savekeyboarDev(data, name) {
      let isEdit = !this.isEditDevice
      // 网络键盘设备添加修改日志提交
      this.recordLog({
        logType: '管理日志',
        module: '设备管理',
        operateName: '设备' + (!isEdit ? '修改' : '添加'),
        operateContent: data.name,
        target: '网络键盘',
        deviceIp: data.ip
      })
      // 网络键盘设备添加修改
      this[isEdit ? 'addSingleDevice' : 'editDeviceInfo'](isEdit ? data : { form: data, id: data._id })
        .then(() => {
          this.successMsg('设备' + (isEdit ? '添加' : '修改') + '成功')
          this.keyboardDeviceShow = false
          this.$refs['KeyboardDevice'].$refs[name].resetFields()
          this.deviceTableFresh()
        })
        .catch(err => {
          this.errorMsg('设备' + (isEdit ? '添加' : '修改') + '失败')
          console.log('add error: ' + err)
        })
    },
    // 设置连接ipc/nvr网页
    connectWebPage(data) {
      if (data.status === '在线') {
        window.open('http://' + data.ip)
      }
    },
    // 导入成功
    uploadSuc() {
      this.recordLog({
        logType: '管理日志',
        module: '设备管理',
        operateName: '视频设备导入成功'
      })
      this.successMsg('导入成功')
      this.deviceTableFresh()
    },
    // 导入失败
    uploadError(file, err, fileList) {
      this.recordLog({
        logType: '管理日志',
        module: '设备管理',
        operateName: '视频设备导入失败'
      })
      this.errorMsg('导入数据有误！')
    },
    // 上传的文件类型限制（xls、xlsx）
    formatError(file) {
      this.warningMsg('文件 ' + file.name + ' 格式不正确，请上传xls、xlsx格式的表格。')
    },
    changeHeight() {
      if (this.isHide) {
        this.isHide = false
        this.botHeight = '430px'
      } else {
        this.isHide = true
        this.botHeight = '163px'
      }
      this.$nextTick(function() {
        this.topTableHeight = this.$refs.tableBox.offsetHeight
      })
    },
    // 设备移动tree获取
    moveDeviceToTreeFn() {
      this.devMoveModal = true
      this.devMoveData = JSON.parse(JSON.stringify(this.orgTreeData))
    },
    // 获取当前设备机构
    selectMoveOrg(ops) {
      this.resMoveOrgIdName = ops.name
      this.resMoveOrgId = ops._id
      if (ops.shareServer) {
        this.isShareServer = false
      } else {
        this.isShareServer = true
      }
    },
    resEditCancel() {
      this.devMoveModal = false
    },
    resEditSave() {
      if (!this.isShareServer) {
        this.errorMsg('该机构不可操作！')
        return
      }
      let params = {
        oid: this.resMoveOrgId,
        _ids: this.deviceSelectIds || []
      }
      let logIp = []
      let logName = []
      this.deviceSlectDelIdsList.forEach(item => {
        logName.push(item.name)
        logIp.push(item.ip)
      })
      // 设备移动日志提交
      this.recordLog({
        logType: '管理日志',
        module: '设备管理',
        operateName: '移动设备',
        operateContent: logName.join(','),
        target: '移动设备到"' + this.resMoveOrgIdName + '"机构下',
        deviceIp: logIp.join(',')
      })
      this.postDevMove(params).then(suc => {
        this.devMoveModal = false
        this.deviceTableFresh()
        this.successMsg('设备移动成功')
      }).catch(err => {
        this.errorMsg('设备移动失败')
        console.log(err)
      })
    }
  },
  beforeDestroy() {
    this.deviceFormData = null
  }
}
</script>
<style>
.equipment .table-header-actions {
  padding: 0 12px!important;
}
.equipment .actions-btn {
  height: 30px;
  margin-top: 12px!important;
}
.equipment .actions-btn .ivu-btn {
  margin-right: 8px!important;
}
.equipment .table-header-actions {
  height: 54px!important;
}
.equipment .modal-decoder-footer-primary {
  margin-left: 18px!important;
}
</style>

<style scoped>
.equipment {
  padding: 20px 0;
  width: 100%;
  height: 100%;
}
.equipment-right-device {
  position: relative;
}
.equipment-right-device .table-footer {
  width: 100%;
  position: absolute;
  bottom: 0;
}
.equipment-right {
  height: 100%;
  width: 100%;
  background: #1c3053;
  overflow: hidden;
}
.bs-main {
  padding: 0;
  background-color: #0c1b32;
}
.equipment-right-middle {
  height: 10px;
  background-color: #0c1b32;
}
.table-header-actions {
  height: 54px;
  padding: 0 10px;
  background-color: #1c3054;
  margin: 0;
}

/*按钮和inpu框*/
.actions-btn {
  float: left;
  margin-top: 12px;
}
.actions-search {
  float: right;
  margin-top: 9px;
}
.actions-btn .ivu-btn {
  margin-right: 8px;
}

/*表格和分页的布局*/
.table-relative {
  position: relative;
  height: 232px;
}
.table-body {
  position: absolute;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
}

/*弹出框内容样式*/
.device-modal-header {
  padding-left: 8px;
}
.deivce-modal-form {
  margin-top: 20px;
  padding: 0 8px;
}
.device-decoder-Modal .deivce-modal-form {
  min-height: 435px;
}
.device-video-Modal .deivce-modal-form {
  height: 657px;
}
.deivce-modal-form > p {
  margin-bottom: 20px;
}
.deivce-modal-form > p > button {
  margin-left: 30px;
}
.ipv4 .ip_label {
  width: 266px;
  height: 32px;
}
.clear:after {
  content: '';
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}
.equipment-right-footer {
  overflow: hidden;
}
.res-model-tree {
  height: 450px;
  width: 400px;
  margin-top: 20px;
  overflow: hidden;
}
</style>
