<template>
  <div class="container">
    <Row class="bs-content">
      <div class="bs-left">
        <div class="sidebar">
          <a >机构资源</a>
          <div class="tree-org">
            <BStreeNewBox :iconToggle="false" :searchToggle="true" :searchType="0" :equipmentToggle="false" :resourceToggle="false" :btnGroup="true" :orgType="11" :resType="[0]" @clickData="getDevicesDataClick"  :delFun="isdelFun"></BStreeNewBox>
          </div>
        </div>
        <div class="sidebarDark">
          <ul>
            <li  v-bind:class="{Serveractive: isServeractive===1}" @click="isServeractive=1">服务器配置</li>
            <li  v-bind:class="{Serveractive: isServeractive===2}" @click="isServeractive=2">高级参数设置</li>
          </ul>
        </div>
      </div>
      <div class="bs-main">
        <div class="resource-right-table" v-if="isServeractive===null">
          <div class="table-header">
            <TableTab @on-tab-click="resTabClick" :tabs="resTabs" :isCount="false"></TableTab>
            <div class="table-header-actions clear">
              <div class="actions-btn">
                <!-- 增加视频通道-->
                <Button  type="ghost" icon="plus" @click="addModalOpen"  v-if="resTabs[resActiveTab].btnShow.add">添加</Button>
                <Button  type="ghost" icon="trash-a" @click="resDelOpen" v-if="resTabs[resActiveTab].btnShow.delete" :disabled="selectRes.length==0">删除</Button>
                <Button  type="ghost" icon="arrow-move" @click="resMoveOpen" v-if="resTabs[resActiveTab].btnShow.move" :disabled="selectRes.length===0">移动</Button>
                <Button  type="ghost" icon="ivu-icon iconfont ios-sync" @click="resSynchronization(resActiveTab)" v-if="resTabs[resActiveTab].btnShow.synchronization">获取</Button>
                <Button type="ghost" icon="refresh" @click="resTableFresh" v-if="resTabs[resActiveTab].btnShow.resfesh">刷新</Button>
                <Button type="ghost" icon="refresh" @click="resopenDoor" v-if="resTabs[resActiveTab].btnShow.LongRangeOpen" :disabled="selectRes.length!==1" >远程开门</Button>
                <Button type="ghost" icon="refresh" @click="rescloseDoor" v-if="resTabs[resActiveTab].btnShow.LongRangeClose" :disabled="selectRes.length!==1">远程关门</Button>
                <Button type="ghost" icon="refresh" @click="reslongOpenDoor" v-if="resTabs[resActiveTab].btnShow.LongRange" :disabled="selectRes.length!==1">远程常开</Button>
                <Button type="ghost" icon="md-reverse-camera" @click="resBindPhoto" v-if="resTabs[resActiveTab].btnShow.photo" :disabled="selectRes.length<1">绑定/解绑</Button>
                <!--                <Select :disabled="resSelectIds.length<1" style="width:120px;margin-left:16px" placeholder="同步通道名称" v-model="channelNameSyncSelect">-->
                <!--                  <Option @click.native="selectChannelName" v-for="opt in channelNameSyncOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>-->
                <!--                </Select>-->
                <!--                <Select :disabled="resSelectIds.length<1" style="width:100px" placeholder="设置码流" v-model="batchStreamSelect">-->
                <!--                  <Option @click.native="selectBatchStream(opt)" v-for="opt in batchStreamOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>-->
                <!--                </Select>-->
                <Checkbox v-model="isShowSubstructure" @on-change="showChildRefresh" style="margin-left:16px" v-if="resTabs[resActiveTab].btnShow.equipment">显示子机构设备</Checkbox>
                <span v-if="resTabs[resActiveTab].btnShow.personNum">
                   <span>在线：</span>
                   <span style="color:green">{{resourceTableData.onlinecount}}</span>
                   <span>|</span>
                   <span style="color:red">{{resourceTableData.count-resourceTableData.onlinecount}}</span>
                 </span>
              </div>
              <div class="actions-search">
                <Input :placeholder="inputPlaceholder" style="width: 220px" v-model="filterKey" @keyup.enter.native="seekResData(0)">
                <Button slot="append" @click="seekResData(0)">搜索</Button>
                </Input>
              </div>
              <!--            </div>-->
            </div>
            <div class="table-relative" ref="tableBox" >
              <div class="table-body table-cover" >
                <Table size="small" :columns="resColumns[resActiveTab]" :height="tableHeight"   :data="resourceTableData.list" :highlight-row="true" @on-selection-change="selectRows" width="100%"></Table>
              </div>
            </div>
            <div class="table-footer">
              <div style="float: right;">
                <Page show-sizer :page-size-opts="$PageInfo.size" @on-page-size-change="pageSizeChange" :total="resourceTableData.count" :current="resourceTableData.curPage" :page-size="pageLimit" show-total show-elevator @on-change="changeResPage"></Page>
              </div>
            </div>
          </div>
        </div>

        <div class="resource-right-table" v-if="isServeractive==1">
          <div  class="table-header">
            <div class="table-header-actions clear">
              <div class="actions-btn">
                <Button  type="ghost" icon="plus" @click="resAddOpenServer">添加</Button>
                <Button  type="ghost" icon="trash-a" @click="resDelOpenServer">删除</Button>
                <Button type="ghost" icon="refresh" @click="resTableFreshServer" >刷新</Button>
              </div>
              <div class="actions-search">
                <Input :placeholder="inputPlaceholder" style="width: 220px" v-model="filterKey">
                <Button slot="append" @click="seekResData(1)">搜索</Button>
                </Input>
              </div>
              <!--            </div>-->
            </div>
            <div class="table-relative" ref="tableBox">
              <div class="table-body table-cover">
                <Table size="small" :columns="resColumns[6]" :height="tableHeight" :data="serverResourceTableData" :highlight-row="true" @on-selection-change="selectResRow" width="100%"></Table>
              </div>
            </div>
            <div class="table-footer">
              <div style="float: right;">
                <Page show-sizer :page-size-opts="$PageInfo.size" @on-page-size-change="pageServerChange($event,'size')" :total="serverParams.total"
                      :current="serverParams.current" :page-size="serverParams.pageSize" show-total show-elevator @on-change="pageServerChange($event,'page')"></Page>
              </div>
            </div>
          </div>
        </div>
        <div class="resource-right-table " v-if="isServeractive==2">
          <div class="advancedConfiguration" style="width: 400px;padding-left:100px;">
            <div class="res-edit-form">
              <Form label-position="left" :label-width="100" :model="advancedConfigurationParmams" ref="resEditForm" :rules="advancedConfigFormRole">
                <Form-item label="数据源" prop="source">
                  <Select v-model="advancedConfigurationParmams.data.source">
                    <Option v-for="opt in advancedConfigurationSource" :value="opt.value" :key="opt.value">{{ opt.name }}</Option>
                  </Select>
                </Form-item>
                <Form-item label="通行记录保存" prop="timeLang">
                  <Input v-model="advancedConfigurationParmams.data.timeLang">天</Input>
                </Form-item>
              </Form>
              <div style="width:100%;height: 40px;display: flex;justify-content: space-around;padding-left:100px;">
                <Button type="primary" @click="saveadvancedConfiguration">保存</Button>
                <Button type="primary" @click="resetadvancedConfiguration" >恢复默认</Button>
              </div>
            </div>
          </div>

        </div>
      </div>
      <!-- 服务器添加弹出框 -->
      <div>
        <Modal :mask-closable="false"  title="服务器添加" width="550" v-model="AddModalServer">
          <div class="res-add-model">
            <div class="res-model-tree"  >
              <div class="res-edit-form">
                <Form label-position="left" :label-width="100" :model="addServerParams" ref="resEditForm" :rules="resServerFormRole">
                  <Form-item label="名称" prop="name">
                    <Input v-model="addServerParams.name" :maxlength="16"></Input>
                  </Form-item>
                  <Form-item label="类型" prop="type">
                    <Select v-model="addServerParams.type" @on-change="serverType" >
                      <Option   v-for=" item in ServerAddressConfiguration"   :value="item.value"  :key="item.name">{{item.name}}</Option>
                    </Select>
                  </Form-item>
                  <Form-item label="厂家" prop="vendor">
                    <Input v-model="addServerParams.vendor" disabled ></Input>
                  </Form-item>
                  <Form-item label="IP地址" prop="ip">

                    <Bsipv4 v-model="addServerParams.ip" ></Bsipv4>
                  </Form-item>
                  <Form-item label="端口" prop="port">
                    <Input v-model="addServerParams.port"></Input>
                  </Form-item>
                  <Form-item label="用户名" prop="userName">
                    <Input  v-model="addServerParams.userName"></Input>
                  </Form-item>
                  <Form-item label="密码" prop="passWord" >
                    <Input  v-model="addServerParams.passWord"></Input>
                  </Form-item>
                  <Form-item label="密钥" prop="token" v-if="addServerParams.type==1">
                    <Input v-model="addServerParams.token"></Input>
                  </Form-item>
                  <Form-item label="数据库名称" prop="dataBase" v-if="addServerParams.type==4">
                    <Input v-model="addServerParams.dataBase"></Input>
                  </Form-item>

                  <!--                  <Form-item label="状态" prop="sex">-->
                  <!--                    <Select v-model="addServerParams.status">-->
                  <!--                      <Option  value="1">在线</Option>-->
                  <!--                      <Option  value="0">离线</Option>-->
                  <!--                    </Select>-->
                  <!--                  </Form-item>-->

                </Form>
              </div>
            </div>
          </div>
          <div slot="footer">
            <Button type="ghost" @click="AddModalServer = false">取消</Button>
            <Button type="primary" :loading="loadingServer" @click="modalloadingServer" >确认</Button>
          </div>
        </Modal>
      </div>

      <!-- 视频通道弹窗-->
      <div v-if="addModal.isShow">
        <Modal :mask-closable="false" v-model="addModal.isShow" title="资源分配" width="510">
          <div class="res-add-model">
            <p>选择机构资源，将资源添加到当前机构下
              <!-- <Checkbox style="float:right" v-model="addModal.isAllTree" @on-change="addModalOpen">其他类型资源</Checkbox> -->
            </p>
            <div class="res-model-tree" v-if="addModal.isShow">
              <bs-scroll ref="scrollerOne" style="width:100%;">
                <VTree @on-expand="expandOne" @loadMore="expandOne" @creatTreeEnd="expandOne" ref="resTree" :treeData="addModal.treeData" :options="addModal.addOptions">
                </VTree>
              </bs-scroll>
            </div>
          </div>
          <div slot="footer">
            <Button type="ghost" @click="addModalCancel">取消</Button>
            <Button type="primary" @click="addModalSave" :loading="addModal.loading">确认</Button>
          </div>
        </Modal>
      </div>
      <!-- 读头绑定相机弹窗-->
      <div v-if="protoModel.isShow">
        <Modal :mask-closable="false" v-model="protoModel.isShow" title="资源分配" width="500">
          <div class="res-add-model">
            <p>请选择门禁设备对应的视频通道
            </p>
            <div class="res-model-tree" v-if="protoModel.isShow">
              <!-- <bs-scroll ref="scrollerThree" style="width:100%;"> -->
                <div style="width:100%;">
                <TreeBox  :searchToggle="false" :searchType="0" :resourceToggle="true" :iconToggle="false" :checkBox="true"
                    :scroll="true" :equipmentToggle="true" :btnGroup="false" :orgType="11" :resType="[0]" :equType="[0]"   @on-expand="expandThree"  @clickData="bindProtoClick"></TreeBox>
              <!-- </bs-scroll> -->
              </div>
            </div>
          </div>
          <div slot="footer">
            <Button type="ghost" @click="addModalCancel">取消</Button>
            <Button type="primary" @click="addModalSave" :loading="addModal.loading">确认</Button>
          </div>
        </Modal>
      </div>
      <!-- //  人证核验机绑定相机弹窗 -->
      <div v-if="devicePeopleaddModal.isShow">
        <Modal :mask-closable="false" v-model="devicePeopleaddModal.isShow" title="资源分配" width="500">
          <div class="res-add-model">
            <p>请选择门禁设备对应的视频通道
            </p>
            <div class="res-model-tree" v-if="devicePeopleaddModal.isShow">
              <div style="width:100%;">
              <!-- <bs-scroll ref="scroller" style="width:100%;"> -->
                <TreeBox  :searchToggle="false" :searchType="0" :resourceToggle="true" :iconToggle="false" :checkBox="true"
                    :scroll="true"  :equipmentToggle="true" :btnGroup="false" :orgType="11" :resType="[0]" :equType="[0]"  @clickData="bindProtoClick" ></TreeBox>
              <!-- </bs-scroll> -->
              </div>
            </div>
          </div>
          <div slot="footer">
            <Button type="ghost" @click="addModalCancel">取消</Button>
            <Button type="primary" @click="addModalSave" :loading="addModal.loading">确认</Button>
          </div>
        </Modal>
      </div>
      <!-- 资源移动 -->
      <div v-if="resMoveModal">
        <Modal :mask-closable="false" v-model="resMoveModal" title="资源移动" width="550">
          <div class="res-add-model">
            <p>选择机构,将资源移动到当前机构下</p>
            <div class="res-model-tree">
              <bs-scroll ref="scrollerTwo" style="width:100%;">
                <VTree @creatTreeEnd='expandTwo' @on-expand="expandTwo" @loadMore="expandTwo" :treeData="resMoveTreeData" :activeId="resMoveOrgId" :options="resMoveTreeOptions" @node-click="selectMoveOrg" :isUpChecked='true'>
                </VTree>
                <!--                <TreeBox  :searchToggle="false" :searchType="0" :resourceToggle="false" :iconToggle="false" :checkBox="true"-->
                <!--                          :equipmentToggle="false" :btnGroup="false" :orgType="11" :resType="[0]" :equType="[0]"  @clickData="selectMoveOrg" @on-expand="expand"  ></TreeBox>-->
              </bs-scroll>
            </div>
          </div>
          <div slot="footer">
            <Button type="ghost" @click="resMoveCancel">取消</Button>
            <Button type="primary" @click="resMoveSave">确认</Button>
          </div>
        </Modal>
      </div>
      <!-- 人脸识别机弹窗-->
      <div v-if="faceaddModal.isShow">
        <Modal :mask-closable="false" v-model="faceaddModal.isShow" title="设备状态设置" width="450">
          <div class="res-add-model">
            <Select v-model="faceSave.deviceStatus">
              <Option v-for="opt in faceSource" :value="opt.value" :key="opt.value">{{ opt.name }}</Option>
            </Select>
          </div>
          <div slot="footer">
            <Button type="ghost" @click="faceaddModal.isShow=false;">取消</Button>
            <Button type="primary" @click="faceAddModalSave">确认</Button>
          </div>
        </Modal>
      </div>
      <!-- 人证核验机弹窗 -->
      <div v-if="devicePeopleaddModal.isShow">
        <Modal :mask-closable="false" v-model="devicePeopleaddModal.isShow" title="设备设置" width="450">
          <div class="res-add-model">
            <Select v-model="devicePeopleSave.deviceStatus">
              <Option v-for="opt in faceSource" :value="opt.value" :key="opt.value">{{ opt.name }}</Option>
            </Select>
          </div>
          <div slot="footer">
            <Button type="ghost" @click="devicePeopleaddModal.isShow=false;">取消</Button>
            <Button type="primary" @click="devicePeopleaddSave">确认</Button>
          </div>
        </Modal>
      </div>
      <!-- 视频通道修改弹窗 -->
      <!--      :orgActiveName="orgActiveName">-->
      <VideoRes ref="VideoChanRes"   :resShow="videoResShow" :formData="videoResFormData" @save="saveAlarmInRes" @cancel="cancelAlarmInRes"></VideoRes>
    </Row>
  </div>
</template>
<script>
import BStreeNewBox from '../../../components/BStreeNew/BStreeNewBox'
import TableTab from '../../settings/equipment/tableTab'
import { mapState, mapActions } from 'vuex'
import TreeBox from '../../../components/BStreeNew/BStreeNewBox'
// import { save } from '../../../../storage'
// import './facePage/tree.css'
import toTreeData from '../../../assets/js/toTreeData.js'
import VideoRes from '../../veriface/setting/videoModal'
import Bsipv4 from '../../../components/BSIPV4.vue'
export default {
  name: 'deviceManagement',
  components: {
    BStreeNewBox,
    TableTab,
    VideoRes,
    TreeBox,
    Bsipv4
  },
  data() {
    const validateuserName = (rule, value, callback) => {
      if (!/^[a-zA-Z0-9_\u4e00-\u9fa5]{1,16}$/.test(value)) {
        callback(new Error('请输入16位以内的数字、字母、下划线或汉字!'))
      } else if (value.length > 16) {
        callback(new Error('请输入16位以内的数字、字母、下划线或汉字!'))
      } else {
        callback()
      }
    }
    const validateName = (rule, value, callback) => {
      if (!/^[a-zA-Z0-9_\u4e00-\u9fa5]{1,16}$/.test(value)) {
        callback(new Error('请输入16位以内的数字、字母、下划线或汉字!'))
      } else if (value.length > 16) {
        callback(new Error('请输入16位以内的数字、字母、下划线或汉字!'))
      } else {
        callback()
      }
    }
    const validatedePort = (rule, value, callback) => {
      let r = /(^[1-9]([0-9]*)$|^[0-9]$)/
      if (rule.field !== 'adapterPort') {
        if (value === '') {
          return callback(new Error('不可以为空'))
        }
        if (r.test(value)) {
          if (Number(value) > 65535) {
            return callback(new Error('超过最大值'))
          } else {
            callback()
          }
        } else {
          return callback(new Error('请输入有效数字'))
        }
      } else {
        if (value !== '') {
          if (r.test(value)) {
            if (Number(value) > 65535) {
              return callback(new Error('超过最大值'))
            } else {
              callback()
            }
          } else {
            return callback(new Error('请输入有效数字'))
          }
        } else {
          callback()
        }
      }
    }
    const validatePwd = (rule, value, callback) => {
      if (!/^[a-zA-Z0-9]{1,16}$/.test(value)) {
        callback(new Error('请输入16位以内的数字、字母！'))
      } else if (value.length > 16) {
        callback(new Error('请输入16位以内的数字、字母!'))
      } else {
        callback()
      }
    }
    const validTimeLang = (rule, value, callback) => {
      // if (value.trim().length> 64) {
      //   callback(new Error('不能超过64位字符'));
      // }else{
      callback()
      // }
    }
    return {
      loadingServer: false,
      deviceCurrentNodeKey: '', // 展开树形图，默认选中的节点
      resServerFormRole: {
        userName: [{ validator: validateuserName, trigger: 'blur' }],
        name: [{ validator: validateName, trigger: 'blur' }],
        passWord: [{ validator: validatePwd, trigger: 'blur' }],
        port: [{ validator: validatedePort, trigger: 'change', required: true }]
      },
      advancedConfigFormRole: {
        timeLang: [{ validator: validTimeLang, trigger: 'change' }]
      },
      advancedConfigurationParmams: {
        _id: '',
        data: {
          source: 2,
          timeLang: 30
        }
      },
      advancedConfigurationSource: [
        { name: '门禁 + 人脸', value: 1 },
        { name: '门禁 ', value: 2 },
        { name: '人脸', value: 3 }
      ],
      protoModel: {
        isShow: false,
        treeData: [],
        addOptions: {}
      },
      faceSource: [{ value: 0, name: '进' }, { value: 1, name: '出' }],
      faceSave: {
        deviceStatus: 0,
        arr: []
      },
      devicePeopleSave: {
        deviceStatus: 0,
        arr: []
      },
      faceaddModal: {
        isShow: false,
        treeData: [],
        addOptions: {}
      },
      // 人证核验机弹窗
      devicePeopleaddModal: {
        isShow: false,
        treeData: [],
        addOptions: {}
      },
      resMoveModal: false, // 移动弹窗
      resMoveOrgId: '',
      resMoveTreeOptions: {
        showInput: false
      },
      addModal: {
        // 视频通道增加机构弹窗
        isShow: false,
        addOptions: {
          showInput: true
        },
        // 机构树
        treeData: [],
        // 是否显示其他机构
        isAllTree: false,
        loading: false
      },
      selectedServerID: [], // 存放已经选中的服务端配置的id
      AddModalServer: false, // 服务器增加弹窗框
      isServeractive: null,
      route: '',
      isSearch: false,
      tableHeight: 435,
      pageLimit: this.$PageInfo.limit,
      pageCur: 1,
      filterKey: '',
      inputPlaceholder: '请输入通道名称',
      resActiveTab: 0,
      isShowSubecMhanismEquipment: [true, true, true, true, true],
      serverResourceTableData: [], // 保存服务器配置数据
      serverParams: {
        total: 0,
        current: 1,
        pageSize: this.$PageInfo.limit
      },
      isShowSubstructure: true, // 是否显示子机构
      VideoChannelParam: {
        // 视频通道列表请求参数
        page: 1,
        limit: this.$PageInfo.limit,
        oid: '',
        type: 0,
        never: -1,
        seek: ''
      },
      guardParam: {
        // 门禁设备列表请求参数
        pageSize: this.$PageInfo.limit,
        pageNum: 1,
        orgId: '',
        showChildren: true,
        keyWord: ''
      },
      faceRecognitionParam: {
        // 人脸识别设备列表请求参数
        pageSize: this.$PageInfo.limit,
        pageNum: 1,
        orgId: '',
        showChildren: true,
        keyWord: ''
      },
      peopleCardParam: {
        pageSize: this.$PageInfo.limit,
        pageNum: 1,
        orgId: '',
        showChildren: true,
        keyWord: ''
      },
      doorParam: {
        // 门、通道列表请求参数
        pageSize: this.$PageInfo.limit,
        pageNum: 1,
        orgId: '',
        showChildren: true,
        keyWord: ''
      },
      readlistParam: {
        // 门禁设备列表请求参数
        pageSize: this.$PageInfo.limit,
        pageNum: 1,
        orgId: '',
        showChildren: true,
        keyWord: ''
      },
      bindProtoParam: {
        cameraData: [],
        id: [] // 多个读头可以绑定一个相机
      },
      // 人证核验绑定相机参数
      peopleCardBindParam: {
        cameraData: [],
        device: []
      },
      getserverListParams: {
        pageNum: 1,
        pageSize: this.$PageInfo.limit,
        keyWord: ''

      },
      addServerParams: {
        // 增加服务器配置接口
        name: '中控',
        ip: '0.0.0.0',
        port: 8098,
        vendor: '中控',
        type: 1,
        token: '',
        status: 1,
        passWord: '',
        userName: '',
        dataBase: ''

      },
      isEditServerConfig: false,
      resTabs: [
        {
          title: '视频通道',
          value: 0,
          disabled: false,
          active: true,
          number: 5,
          btnShow: {
            add: true,
            delete: true,
            move: true,
            resfesh: true,
            equipment: true,
            personNum: true,
            LongRangeOpen: false,
            LongRangeClose: false,
            LongRange: false, // 远程常开
            photo: false, // 绑定相机，
            synchronization: false
          }
        },
        {
          title: '门禁设备',
          value: 1,
          disabled: false,
          active: false,
          number: 5,
          btnShow: {
            add: false,
            delete: false,
            move: true,
            resfesh: true,
            equipment: true,
            personNum: false,
            LongRangeOpen: false,
            LongRangeClose: false,
            LongRange: false, // 远程常开
            photo: false, // 绑定相机
            synchronization: true
          }
        },
        {
          title: '门/通道',
          value: 2,
          disabled: false,
          active: false,
          number: 5,
          btnShow: {
            add: false,
            delete: false,
            move: false,
            resfesh: true,
            equipment: true,
            personNum: false,
            LongRangeOpen: true,
            LongRangeClose: true,
            LongRange: true, // 远程常开
            photo: false, // 绑定相机
            synchronization: false // 获取
          }
        },
        {
          title: '读头',
          value: 3,
          disabled: false,
          active: false,
          number: 5,
          btnShow: {
            add: false,
            delete: false,
            move: false,
            resfesh: true,
            equipment: true,
            personNum: false,
            LongRangeOpen: false,
            LongRangeClose: false,
            LongRange: false, // 远程常开
            photo: true, // 绑定相机
            synchronization: false
          }
        },
        {
          title: '人脸识别机',
          value: 4,
          disabled: false,
          active: false,
          number: 5,
          btnShow: {
            add: true,
            delete: true,
            move: true,
            resfesh: true,
            equipment: true,
            personNum: true,
            LongRangeOpen: false,
            LongRangeClose: false,
            LongRange: false, // 远程常开
            photo: true, // 绑定相机
            synchronization: true
          }
        },
        {
          title: '人证核验机',
          value: 5,
          disabled: false,
          active: false,
          number: 5,
          btnShow: {
            add: false,
            delete: false,
            move: true,
            resfesh: true,
            equipment: true,
            personNum: false,
            LongRangeOpen: false,
            LongRangeClose: false,
            LongRange: false, // 远程常开
            photo: true, // 绑定相机
            synchronization: true
          }
        }
      ],
      resColumns: [
        [
          {
            type: 'selection',
            width: 60,
            align: 'left'
          },
          {
            title: '序号',
            type: 'index',
            align: 'left',
            width: 60
          },
          {
            title: '通道名称',
            key: 'name',
            align: 'left',
            minWidth: 165
          },
          {
            title: '所属设备',
            key: 'eid.name',
            align: 'left',
            minWidth: 165,
            render: (h, params) => {
              let text = params.row.eid ? params.row.eid.name : ''
              return h('span', text)
            }
          },
          {
            title: 'IP地址',
            key: 'ip',
            align: 'left',
            minWidth: 60
          },
          {
            title: '通道号',
            key: 'chan',
            align: 'left',
            minWidth: 50
          },
          {
            title: '状态',
            key: 'status',
            align: 'left',
            minWidth: 75,
            render: (h, params) => {
              let text = ''
              switch (params.row.status) {
                case 0:
                  text = h(
                    'span',
                    {
                      style: { color: 'red' }
                    },
                    '离线'
                  )
                  break
                case 1:
                  text = h(
                    'span',
                    {
                      style: { color: 'green' }
                    },
                    '在线'
                  )
                  break
              }
              return h('span', [text])
            }
          },
          {
            title: '操作',
            key: 'action',
            minWidth: 160,
            align: 'center',
            render: (h, params) => {
              return h('div', [
                h(
                  'Button',
                  {
                    props: {
                      type: 'ghost',
                      size: 'small'
                    },
                    style: {
                      marginRight: '5px'
                    },
                    on: {
                      click: e => {
                        e.stopPropagation()
                        // this.resActiceId = params.row._id
                        // this.resEditOpen(this.resActiceId)
                        this.openEditDeviceResInfo(params)
                      }
                    }
                  },
                  '编辑'
                )
              ])
            }
          }
        ],
        [
          {
            type: 'selection',
            width: 60,
            align: 'left'
          },
          {
            title: 'ID',
            type: 'index',
            align: 'left',
            width: 60
          },
          {
            title: '设备名称',
            key: 'name',
            minWidth: 60,
            align: 'left'
          },
          {
            title: '序列号',
            key: 'sn',
            align: 'left',
            minWidth: 60
          },
          {
            title: '所属区域',
            key: 'orgName',
            align: 'left',
            minWidth: 165
          },
          {
            title: '设备类型',
            key: 'type',
            align: 'left',
            minWidth: 75
          },

          {
            title: '设备状态',
            key: 'status',
            align: 'left',
            minWidth: 110,
            render: (h, params) => {
              let text = params.row.status == 1 ? '启用' : '禁用'
              return h('span', text)
            }
          }
          // {
          //   title: '所属模块',
          //   key: 'guardModule',
          //   align: 'left',
          //   minWidth: 50,
          //   render: (h, params) => {
          //   let text = ''
          //   switch (params.row.guardModule) {  //acc 门禁，att 考勤，ele 梯控
          //     case 'acc':
          //       text = '门禁'
          //       break
          //     case 'att':
          //       text = '考勤'
          //       break
          //     case 'ele':
          //       text = '梯控'
          //       break
          //         }
          //  return h('span', text)
          //   }
          // },
        ],
        [
          {
            type: 'selection',
            width: 60,
            align: 'left'
          },
          {
            title: 'ID',
            type: 'index',
            align: 'left',
            width: 60
          },
          {
            title: '名称',
            key: 'name',
            align: 'left',
            minWidth: 60
          },
          {
            title: '所属门禁',
            key: 'name',
            align: 'left',
            minWidth: 150,
            render: (h, params) => {
              console.log(params)
              let text = params.row.doorName
              return h('span', text)
            }
          },
          {
            title: '所属区域',
            key: 'org',
            minWidth: 60,
            align: 'left',
            render: (h, params) => {
              let text = ''
              if (params.row.org) {
                text = params.row.org.name
              } else {
                text = '...'
              }
              return h('span', text)
            }
          },
          {
            title: '连接状态',
            key: 'connect',
            align: 'left',
            minWidth: 110,
            render: (h, params) => {
              let text = ''
              switch (Number(params.row.connect)) {
                case 0:
                  text = h(
                    'span',
                    {
                      style: { color: 'red' }
                    },
                    '离线'
                  )
                  break
                case 1:
                  text = h(
                    'span',
                    {
                      style: { color: 'green' }
                    },
                    '在线'
                  )
                  break
              }
              return h('span', [text])
            }
          },
          {
            title: '报警状态',
            key: 'alarm',
            align: 'left',
            minWidth: 50
          }
        ],
        [
          {
            type: 'selection',
            width: 60,
            align: 'left'
          },
          {
            title: '序号',
            type: 'index',
            align: 'left',
            width: 60
          },
          {
            title: '读头名称',
            key: 'name',
            align: 'left',
            minWidth: 100
          },
          {
            title: '所属门/通道',
            key: 'doorName',
            align: 'left',
            minWidth: 100
          },
          {
            title: '所属区域',
            key: 'orgName',
            minWidth: 100,
            align: 'left'
          },
          {
            title: '出入状态',
            key: 'readState',
            align: 'left',
            minWidth: 50,
            render: (h, params) => {
              let text = params.row.readerState == 0 ? '入' : '出'
              return h('span', text)
            }
          },
          {
            title: '绑定相机',
            key: 'chan',
            align: 'left',
            minWidth: 180,
            render: (h, params) => {
              let textArr = params.row.cameraData || []
              let text = textArr.map(it => {
                return it.name
              })
              return h('span', text.join(','))
            }
          }
          // {
          //   title: '所属门',
          //   key: 'doorName',
          //   align: 'left',
          //   minWidth: 100
          // }
        ],
        [
          {
            type: 'selection',
            width: 60,
            align: 'left'
          },
          {
            title: 'ID',
            type: 'index',
            align: 'left',
            width: 60
          },
          {
            title: '设备名称',
            key: 'deviceName',
            align: 'left',
            minWidth: 100
          },
          {
            title: '序列号',
            key: 'ip',
            align: 'left',
            minWidth: 130,
            render: (h, params) => {
              let text = ''
              text = params.row.ID ? params.row.ID : '------'
              return h('span', text)
            }
          },
          {
            title: '设备类型',
            key: 'deviceType',
            minWidth: 100,
            align: 'left',
            render: (h, params) => {
              let text = ''
              let arr = ['Camera', '2-SenseKeeper', '3-SenseNebula-M', '4-SenseDLC', '5-SenseID', '6-SensePass']
              //                text = params.row.deviceType==1?'摄像机':params.row.deviceType==2?'面板机':'------';
              text = arr[params.row.deviceType && params.row.deviceType - 1] || '------'
              return h('span', text)
            }
          },
          {
            title: '连接状态',
            key: 'accessState',
            align: 'left',
            minWidth: 50,
            render: (h, params) => {
              let text = ''
              switch (params.row.accessState) {
                case 0:
                  text = h(
                    'span',
                    {
                      style: { color: 'red' }
                    },
                    '离线'
                  )
                  break
                case 1:
                  text = h(
                    'span',
                    {
                      style: { color: 'green' }
                    },
                    '在线'
                  )
                  break
              }
              return h('span', [text])
            }
          },
          {
            title: '启动状态',
            key: 'state',
            align: 'left',
            minWidth: 75,
            render: (h, params) => {
              let text = ''
              switch (params.row.state) {
                case 0:
                  text = '未启动'
                  break
                case 1:
                  text = '已启动'
                  break
              }
              return h('span', text)
            }
          },
          // {
          //   title: '用户数量',
          //   key: 'ip',
          //   align: 'left',
          //   minWidth: 110,
          //   render: (h, params) => {
          //     let text = params.row.userLength
          //     return h('span', text)
          //   }
          // },
          {
            title: '绑定相机',
            key: 'ip',
            align: 'left',
            minWidth: 160,
            render: (h, params) => {
              let text =
                params.row.cameraData && params.row.cameraData.length > 0 ? params.row.cameraData[0].name : '-----'
              return h('span', text)
            }
          },
          {
            title: '出入状态',
            key: 'deviceState',
            align: 'left',
            minWidth: 60,
            render: (h, params) => {
              let text = '------'
              if (params.row.deviceState === 0) {
                text = '进'
              } else if (params.row.deviceState === 1) {
                text = '出'
              } else {
                text = '未知'
              }
              return h('span', text)
            }
          },
          {
            title: '操作',
            key: 'action',
            minWidth: 160,
            align: 'center',
            render: (h, params) => {
              return h('div', [
                h(
                  'Button',
                  {
                    props: {
                      type: 'ghost',
                      size: 'small'
                    },
                    style: {
                      marginRight: '5px'
                    },
                    on: {
                      click: e => {
                        this.faceSave.arr = []
                        //                        e.stopPropagation()
                        this.faceaddModal.isShow = true
                        this.faceSave.arr.push(params.row._id)
                        // this.resActiceId = params.row._id
                        // this.resEditOpen(this.resActiceId)
                      }
                    }
                  },
                  '编辑'
                )
              ])
            }
          }
        ],
        [
          {
            type: 'selection',
            width: 60,
            align: 'left'
          },
          {
            title: 'ID',
            type: 'index',
            align: 'left',
            width: 60
          },
          {
            title: '设备名称',
            key: 'deviceName',
            align: 'left',
            minWidth: 100,
            render: (h, params) => {
              let text = ''
              text = params.row.name ? params.row.name : '------'
              return h('span', text)
            }
          },
          {
            title: 'IP地址',
            key: 'ip',
            align: 'left',
            minWidth: 100,
            render: (h, params) => {
              let text = ''
              text = params.row.ip ? params.row.ip : '------'
              return h('span', text)
            }
          },
          {
            title: '设备序列号',
            key: 'port',
            minWidth: 180,
            align: 'left',
            render: (h, params) => {
              let text = ''
              text = params.row.dev ? params.row.dev : '------'
              return h('span', text)
            }
          },
          {
            title: '连接状态',
            key: 'status',
            align: 'left',
            minWidth: 80,
            render: (h, params) => {
              let text = ''
              switch (params.row.status) {
                case 0:
                  text = h(
                    'span',
                    {
                      style: { color: 'red' }
                    },
                    '离线'
                  )
                  break
                case 1:
                  text = h(
                    'span',
                    {
                      style: { color: 'green' }
                    },
                    '在线'
                  )
                  break
              }
              return h('span', [text])
            }
          },
          {
            title: '绑定相机',
            key: 'ip',
            align: 'left',
            minWidth: 160,
            render: (h, params) => {
              let text =
                params.row.cameraData && params.row.cameraData.length > 0 ? params.row.cameraData[0].name : '-----'
              return h('span', text)
            }
          },
          {
            title: '出入状态',
            key: 'readerState',
            align: 'left',
            minWidth: 50,
            render: (h, params) => {
              let text = ''
              if (params.row.readerState === 0) {
                text = '进'
              } else if (params.row.readerState === 1) {
                text = '出'
              } else {
                text = '未设置'
              }
              return h('span', text)
            }
          },
          {
            title: '操作',
            key: 'action',
            minWidth: 100,
            align: 'center',
            render: (h, params) => {
              console.log(params)
              return h('div', [
                h(
                  'Button',
                  {
                    props: {
                      type: 'ghost',
                      size: 'small'
                    },
                    style: {
                      marginRight: '5px'
                    },
                    on: {
                      click: e => {
                        console.log(params, '-------------')
                        this.devicePeopleaddModal.isShow = true
                        this.devicePeopleSave.arr = [params.row._id]
                      }
                    }
                  },
                  '编辑'
                )
              ])
            }
          }
        ],
        [
          {
            type: 'selection',
            width: 60,
            align: 'left'
          },
          {
            title: 'ID',
            type: 'index',
            align: 'left',
            width: 60
          },
          {
            title: '设备名称',
            key: 'deviceName',
            align: 'left',
            minWidth: 100,
            render: (h, params) => {
              let text = ''
              text = params.row.name ? params.row.name : '------'
              return h('span', text)
            }
          },
          {
            title: 'IP地址',
            key: 'ip',
            align: 'left',
            minWidth: 100,
            render: (h, params) => {
              let text = ''
              text = params.row.ip ? params.row.ip : '------'
              return h('span', text)
            }
          },
          {
            title: '端口',
            key: 'port',
            minWidth: 100,
            align: 'left',
            render: (h, params) => {
              let text = ''
              text = params.row.port ? params.row.port : '------'
              return h('span', text)
            }
          },
          {
            title: '厂家',
            key: 'vendor',
            minWidth: 100,
            align: 'left',
            render: (h, params) => {
              let text = params.row.vendor
              return h('span', text)
            }
          },
          {
            title: '类型',
            key: '',
            minWidth: 100,
            align: 'left',
            render: (h, params) => {
              let text = ''
              if (params.row.vendor === '中控') {
                text = '门禁服务器'
              } else if (params.row.vendor === '商汤') {
                text = '人脸服务器'
              } else if (params.row.vendor === '一卡通') {
                text = '一卡通'
              } else {
                text = '-----'
              }
              return h('span', text)
            }
          },
          {
            title: '连接状态',
            key: 'status',
            align: 'left',
            minWidth: 80,
            render: (h, params) => {
              let text = ''
              switch (params.row.status) {
                case 0:
                  text = h(
                    'span',
                    {
                      style: { color: 'red' }
                    },
                    '离线'
                  )
                  break
                case 1:
                  text = h(
                    'span',
                    {
                      style: { color: 'green' }
                    },
                    '在线'
                  )
                  break
              }
              return h('span', [text])
            }
          },
          {
            title: '操作',
            key: 'action',
            minWidth: 160,
            align: 'center',
            render: (h, params) => {
              return h('div', [
                h(
                  'Button',
                  {
                    props: {
                      type: 'ghost',
                      size: 'small'
                    },
                    style: {
                      marginRight: '5px'
                    },
                    on: {
                      click: e => {
                        console.log(params)
                        this.AddModalServer = true
                        this.isEditServerConfig = true
                        this.addServerParams = params.row
                        // this.faceSave.arr.push(params.row._id)
                      }
                    }
                  },
                  '编辑'
                )
              ])
            }
          }
        ]
      ],
      orgActiveId: '', // 左侧机构选中的id
      resMoveTreeData: [], // 移动树
      selectRes: [],
      videoResShow: false,
      videoResFormData: {},
      videoOnlineOffline: {
        online: 0,
        offline: 0
      }
    }
  },
  computed: {
    ...mapState({
      ServerAddressConfiguration: ({ deviceManagementStatus }) => deviceManagementStatus.ServerAddressConfiguration,
      ServerManufacturer: ({ deviceManagementStatus }) => deviceManagementStatus.ServerManufacturer,
      resourceTableData: ({ deviceManagementStatus }) => deviceManagementStatus.resourceTableData
    })
  },
  methods: {
    ...mapActions([
      'addDeviceServerManagement',
      'getDeviceServerManagementList',
      'deleteDeviceServerManagement',
      'getVideoResTree', //, 请求机构树，公共方法
      'addVerifaceResources',
      'getVideoChannelList',
      'getVerifaceSettingOrgTree11',
      'changeVerifaceResourceOrg', // 移动视频通道
      'unbindVerifaceResource', // 删除视频通道
      'asyncGuardList', // 同步门禁设备,
      'asyncDevicePeople', // 同步人证核验设备
      'saveVerifaceResourceInfo', // 视频通道修改保存接口
      'guardList', // 门禁列表
      'grardOrgModify', // 门禁移动机构
      'closeDoor', // 远程关门
      'openDoor', // 远程开门
      'openTimeLang', // 远程常开
      'getReadList', // 读头列表
      'bindCamera', // 读头绑定相机
      'faceBindCamera', // 人脸识别绑定相机
      'faceasyncDevice', // 人脸识别同步到数据库
      'moveFaceOrg', // 人脸识别移动组织机构
      'movePeopleDeviceOrg', // 移动人证核验机绑定的机构信息
      'getFaceRecognitionList', // 人脸识别获取列表
      'getPeopleCard', // 人证核验机获取列表
      'doorList', // 门获取列表
      'getLevelConfig',
      'editLevelConfig',
      'getDeviceStatus', // 获取视频通道在线离线数量
      'editConfig', // 修改服务器配置
      'getLiveCount',
      'faceSaveDevice', // 人脸编辑保存
      'peopleCardSaveDevice', // 人证核验编辑保存
      'peopleCardCamera', // 人证核验机绑定相机
      'getServerStatus' // 服务器在线状态
    ]),

    // 添加中树的数据请求 刚打开modal时data传true  其他传false 如果勾选其他机构树
    addModalOpen() {
      this.getVideoResTree({
        all: true,
        type: 0,
        orgtype: 11,
        bigtype: 0
      })
        .then(suc => {
          this.addModal.treeData = []
          this.addModal.treeData = toTreeData([suc])
          console.log(this.addModal.treeData)
          this.addModal.isShow = true
        })
        .catch(err => {
          console.log('getVideoResTree error: ' + err)
        })
    },
    // 确定添加弹框
    addModalSave() {
      if (this.resActiveTab == 0) {
        this.addModal.loading = true
        let rids = this.$refs.resTree.getSelectedNodeIds()
        this.addVerifaceResources({ rids, oid: this.orgActiveId })
          .then(res => {
            this.addModal.loading = false
            this.addModal.isShow = false
            this.successMsg('添加成功')
            this.getResData()
          })
          .catch(err => {
            console.log('addVerifaceResources error: ' + err)
            this.errorMsg(err.response.message)
            this.addModal.loading = false
          })
      } else if (this.resActiveTab == 3) {
        if (!this.bindProtoParam.cameraData) {
          this.errorMsg('请选择资源')
          return
        }
        this.bindCamera(this.bindProtoParam).then(res => {
          if (res) {
            this.protoModel.isShow = false
            this.selectRes = []
            this.successMsg('绑定相机成功')
            this.getreadList()
          }
        })
      } else if (this.resActiveTab == 4) {
        if (!this.bindProtoParam.cameraData) {
          this.errorMsg('请选择资源')
          return
        }
        this.faceBindCamera(this.bindProtoParam).then(res => {
          if (res) {
            this.protoModel.isShow = false
            this.selectRes = []
            this.successMsg('绑定相机成功')
            this.getFaceRecognitionListFuc()
          }
        })
      } else if (this.resActiveTab == 5) {
        if (!this.bindProtoParam.cameraData) {
          this.errorMsg('请选择资源')
          return
        }
        this.peopleCardCamera(this.peopleCardBindParam).then(res => {
          if (res) {
            this.protoModel.isShow = false
            this.selectRes = []
            this.successMsg('绑定相机成功')
            this.getPeopleCardFuc()
          }
        })
      }
    },

    // 认证验证机
    faceAddModalSave() {
      this.faceSaveDevice({ state: this.faceSave.deviceStatus, arr: this.faceSave.arr }).then(res => {
        this.getFaceRecognitionListFuc() // 人脸识别
        this.faceaddModal.isShow = false
      })
    },
    // 人证核验编辑保存
    devicePeopleaddSave() {
      this.peopleCardSaveDevice({ state: this.devicePeopleSave.deviceStatus, device: this.devicePeopleSave.arr }).then(
        res => {
          this.getPeopleCardFuc() // 人证核验
          this.devicePeopleaddModal.isShow = false
        }
      )
    },
    // 获取table接口
    getResData() {
      this.VideoChannelParam.oid = this.orgActiveId
      this.VideoChannelParam.seek = this.filterKey
      this.VideoChannelParam.never = this.isShowSubstructure ? -1 : 0
      this.selectRes = []
      this.getDeviceStatus(this.VideoChannelParam)
        .then(res => {
          if (res) {
            this.resTabs[this.resActiveTab].number = this.resourceTableData.count
          }
        })
        .catch(err => console.log(err))
    },
    getResData_() {
      this.VideoChannelParam.oid = this.orgActiveId
      this.VideoChannelParam.never = this.isShowSubstructure ? -1 : 0
      this.getDeviceStatus(this.VideoChannelParam)
        .then(res => {
          if (res) {
          }
        })
        .catch(err => console.log(err))
    },
    // 关闭添加弹框
    addModalCancel() {
      this.addModal.isShow = false
      this.addModal.treeData = []
      // 绑定相机关闭
      this.protoModel.isShow = false
    },

    resMoveOpen(item) {
      this.resMoveOrgId = ''
      this.getVerifaceSettingOrgTree11().then(res => {
        this.resMoveTreeData = toTreeData([res.data])
        this.resMoveModal = true
      })
    },
    expandTwo() {
      this.$refs.scrollerTwo.update()
    },
    expandThree() {
      this.$refs.scrollerThree.update()
    },
    selectMoveOrg(item) {
      this.resMoveOrgId = item._id
    },
    // 资源移动保存
    resMoveSave() {
      let param
      if (this.resActiveTab == 0) {
        param = {
          ids: [],
          oid: this.resMoveOrgId
        }
        this.selectRes.map(item => {
          param.ids.push(item._id)
        })
        this.changeVerifaceResourceOrg(param)
          .then(res => {
            this.resMoveModal = false
            this.getResData()
          })
          .catch(err => {
            console.log(err)
          })
      } else if (this.resActiveTab == 1) {
        param = {
          _id: [],
          org: this.resMoveOrgId
        }
        this.selectRes.map(item => {
          param._id.push(item._id)
        })
        this.grardOrgModify(param).then(res => {
          if (res) {
            this.resMoveModal = false
            this.guardListFuc()
          }
        })
      } else if (this.resActiveTab == 4) {
        param = {
          _id: [],
          org: this.resMoveOrgId
        }
        this.selectRes.map(item => {
          param._id.push(item._id)
        })
        this.moveFaceOrg(param).then(res => {
          if (res) {
            this.resMoveModal = false
            this.getFaceRecognitionListFuc()
          }
        })
      } else if (this.resActiveTab == 5) {
        param = {
          orgId: this.resMoveOrgId,
          device: []
        }
        this.selectRes.map(item => {
          param.device.push(item._id)
        })
        this.movePeopleDeviceOrg(param).then(res => {
          if (res) {
            this.resMoveModal = false
            this.getPeopleCardFuc()
          }
        })
      }
    },
    resMoveCancel() {
      this.resMoveModal = false
    },
    // 选择资源列
    selectRows(rows) {
      this.selectRes = rows
    },
    // 服务器类型
    serverType(val) {
      if (val === 2) {
        this.addServerParams.vendor = '商汤'
      } else if (val === 4) {
        this.addServerParams.vendor = '一卡通'
      } else {
        this.addServerParams.vendor = '中控'
      }
    },
    expandOne() {
      this.$refs.scrollerOne.update()
    },
    // 资源的修改
    openEditDeviceResInfo(params) {
      // this.getVerifaceServer().then(res => {
      //   this.verifaceServers = res.data.results
      // })
      console.log(this.orgActiveId)
      params.row['orgName'] = params.row.eid.oid.name
      this.videoResShow = true // 显示弹窗
      this.videoResFormData = params.row // 向模态框传入回填的数据
    },
    // 服务器配置修改
    // openServerResInfo(params) {
    //   this.AddModalServer = true
    //   this.isEditServerConfig = true
    //   this.addServerParams = params.row
    // },
    // 资源修改模态框的保存
    saveAlarmInRes(data, name) {
      this.saveVerifaceResourceInfo({ form: data, id: data._id })
        .then(() => {
          this.successMsg('资源信息修改成功')
          this.videoResShow = false
          this.getResData()
          this.$refs['VideoChanRes'].$refs[name].resetFields()
        })
        .catch(err => {
          console.log('saveVerifaceResourceInfo error: ' + err)
          this.errorMsg(err.response.message)
          // this.deviceResSelectIds = []
        })
    },
    cancelAlarmInRes() {
      this.videoResShow = false
      this.$refs['VideoChanRes'].$refs[name].resetFields()
    },
    getDevicesDataClick(event) {
      console.log(event)
      this.isServeractive = null
      this.resourceTableData.curPage = 1 // 初始化页面为第一页
      this.orgActiveId = event._id
      this.VideoChannelParam.oid = event._id
      if (this.resActiveTab == 0) {
        this.VideoChannelParam = {
          // 视频通道列表请求参数
          page: 1,
          oid: '',
          type: 0,
          never: -1,
          seek: '',
          limit: this.$PageInfo.limit
        }
        this.getResData() // 视频通道
      } else if (this.resActiveTab == 1) {
        this.guardParam = {
          // 门禁设备列表请求参数
          pageSize: this.$PageInfo.limit,
          pageNum: 1,
          orgId: '',
          showChildren: true,
          keyWord: ''
        }
        this.guardListFuc() // 门禁设备列表
      } else if (this.resActiveTab == 2) {
        this.doorParam = {
          // 门列表请求参数
          pageSize: this.$PageInfo.limit,
          pageNum: 1,
          orgId: '',
          showChildren: true,
          keyWord: ''
        }
        this.getDoorList() // 获取门列表
      } else if (this.resActiveTab == 3) {
        this.readlistParam = {
          // 门禁设备列表请求参数
          pageSize: this.$PageInfo.limit,
          pageNum: 1,
          orgId: '',
          showChildren: true,
          keyWord: ''
        }
        this.getreadList() // 读头
      } else if (this.resActiveTab == 4) {
        this.faceRecognitionParam = {
          // 人脸识别设备列表请求参数
          pageSize: this.$PageInfo.limit,
          pageNum: 1,
          orgId: '',
          showChildren: true,
          keyWord: ''
        }
        this.getFaceRecognitionListFuc() // 人脸识别
      } else if (this.resActiveTab == 5) {
        this.peopleCardParam = {
          // 人证核验设备列表请求参数
          pageSize: this.$PageInfo.limit,
          pageNum: 1,
          orgId: '',
          showChildren: true,
          keyWord: ''
        }
        this.getPeopleCardFuc() // 人证核验
      }
    },
    showChildRefresh() {
      // 是否现在子机构
      if (this.resActiveTab == 0) {
        this.VideoChannelParam.never = this.isShowSubstructure ? 0 : -1
        this.getResData() // 视频通道
      } else if (this.resActiveTab == 1) {
        this.guardParam.showChildren = this.isShowSubstructure
        this.guardListFuc() // 门禁设备列表
      } else if (this.resActiveTab == 2) {
        this.getDoorList() // 获取门列表
      } else if (this.resActiveTab == 3) {
        this.readlistParam.showChildren = this.isShowSubstructure
        this.getreadList() // 读头
      } else if (this.resActiveTab == 4) {
        this.faceRecognitionParam.showChildren = this.isShowSubstructure
        this.getFaceRecognitionListFuc() // 人脸识别
      } else if (this.resActiveTab == 5) {
        this.peopleCardParam.showChildren = this.isShowSubstructure
        this.getPeopleCardFuc() // 人证核验
      }
    },
    // 选中某条数据
    selectResRow(e) {
      console.log(e)
      this.selectedServerID = []
      e.forEach(item => {
        this.selectedServerID.push(item._id)
      })
    },
    pageSizeChange(event) {
      console.log(event)
      if (this.resActiveTab == 0) {
        this.VideoChannelParam.limit = event
        this.getResData() // 视频通道
      } else if (this.resActiveTab == 1) {
        this.guardParam.pageSize = event
        this.guardListFuc() // 门禁设备列表
      } else if (this.resActiveTab == 2) {
        this.doorParam.pageSize = event
        this.getDoorList() // 获取门列表
      } else if (this.resActiveTab == 3) {
        this.readlistParam.pageSize = event
        this.getreadList() // 读头
      } else if (this.resActiveTab == 4) {
        this.faceRecognitionParam.pageSize = event
        this.getFaceRecognitionListFuc() // 人脸识别
      } else if (this.resActiveTab == 5) {
        this.peopleCardParam.pageSize = event
        this.getPeopleCardFuc() // 人证核验设备列表
      }
    },
    changeResPage(event) {
      console.log(event)
      if (this.resActiveTab == 0) {
        this.VideoChannelParam.page = event
        this.getResData() // 视频通道
      } else if (this.resActiveTab == 1) {
        this.guardParam.pageNum = event
        this.guardListFuc() // 门禁设备列表
      } else if (this.resActiveTab == 2) {
        this.doorParam.pageNum = event
        this.getDoorList() // 获取门列表
      } else if (this.resActiveTab == 3) {
        this.readlistParam.pageNum = event
        this.getreadList() // 读头
      } else if (this.resActiveTab == 4) {
        this.faceRecognitionParam.pageNum = event
        this.getFaceRecognitionListFuc() // 人脸识别
      } else if (this.resActiveTab == 5) {
        this.peopleCardParam.pageNum = event
        this.getPeopleCardFuc() // 人证核验
      }
    },
    seekResData(type) {
      // 搜索
      this.resourceTableData.curPage = 1
      if (type === 0) {
        // 机构对应搜索
        if (this.resActiveTab == 0) {
          this.inputPlaceholder = '请输入通道名称'
          this.VideoChannelParam.seek = this.filterKey
          this.getResData() // 视频通道
        } else if (this.resActiveTab == 1) {
          this.inputPlaceholder = '请输入设备名称'
          this.guardParam.keyWord = this.filterKey
          this.guardListFuc() // 门禁设备列表
        } else if (this.resActiveTab == 2) {
          this.inputPlaceholder = '请输入门/通道名称'
          this.doorParam.keyWord = this.filterKey
          this.getDoorList() // 获取门列表
        } else if (this.resActiveTab == 3) {
          this.inputPlaceholder = '请输入搜索内容'
          this.readlistParam.keyWord = this.filterKey
          this.getreadList() // 读头
        } else if (this.resActiveTab == 4) {
          this.faceRecognitionParam.keyWord = this.filterKey
          this.getFaceRecognitionListFuc() // 人脸识别
        } else if (this.resActiveTab == 5) {
          this.peopleCardParam.keyWord = this.filterKey
          this.getPeopleCardFuc()
        }
      } else if (type === 1) {
        this.getserverListParams.keyWord = this.filterKey
        this.getDeviceServerManagementListFuc()
        // 服务器配置搜索
      }
    },
    resAddOpen() {},
    resDelOpen() {
      // 删除资源（接触绑定）
      this.$Modal.confirm({
        title: '提示',
        content: '<p>确认删除所选资源吗？</p>',
        onOk: () => {
          const param = {
            type: 11,
            ids: []
          }
          this.selectRes.map(item => {
            param.ids.push(item._id)
          })
          this.unbindVerifaceResource(param)
            .then(res => {
              this.getResData()
            })
            .catch(err => console.error(err))
        },
        onCancel: () => {}
      })
    },
    resTableFresh() {
      if (this.resActiveTab === 0) {
        this.getResData()
        this.successMsg('刷新成功！')// 视频通道
      } else if (this.resActiveTab === 1) {
        this.guardListFuc()
        this.successMsg('刷新成功！') // 获取门禁列表
      } else if (this.resActiveTab === 2) {
        this.getDoorList()
        this.successMsg('刷新成功！') // 获取门列表
      } else if (this.resActiveTab === 3) {
        this.getreadList()
        this.successMsg('刷新成功！') // 读头
      } else if (this.resActiveTab === 4) {
        this.getFaceRecognitionListFuc()
        this.successMsg('刷新成功！')
      } else if (this.resActiveTab === 5) {
        this.getPeopleCardFuc()
        this.successMsg('刷新成功！')
      }
    },
    resTabClick(event) {
      this.resActiveTab = event.index
      if (event.index == 0) {
        this.getResData() // 初始化获取视频通道列表
      } else if (event.index == 1) {
        // 获取门禁设备列表
        this.guardListFuc()
      } else if (this.resActiveTab == 2) {
        this.getDoorList() // 获取门列表
      } else if (this.resActiveTab == 3) {
        this.getreadList() // 读头
      } else if (this.resActiveTab == 4) {
        // 人脸识别
        this.getFaceRecognitionListFuc() // 人脸识别列表=
      } else if (this.resActiveTab == 5) {
        // 人证核验
        this.getPeopleCardFuc() // 人证核验列表
      }
    },
    // 打开服务器配置增加页面
    resAddOpenServer() {
      this.loadingServer = false
      this.AddModalServer = true
      this.isEditServerConfig = false
      this.addServerParams = {
        // 增加服务器配置接口
        name: '中控',
        ip: '0.0.0.0',
        port: 8098,
        vendor: '中控',
        type: 1,
        token: '',
        passWord: '',
        passName: ''
      }
    },
    // 删除服务器配置
    resDelOpenServer() {
      this.deleteDeviceServerManagement({ configId: this.selectedServerID }).then(res => {
        if (res) {
          this.successMsg('删除成功')
          this.getDeviceServerManagementListFuc()
        }
      })
    },
    // 服务器配置页码改变回调
    pageServerChange(e, type) {
      if (type === 'size') {
        this.getserverListParams.pageSize = e
      } else {
        this.getserverListParams.pageNum = e
      }
      this.getDeviceServerManagementListFuc()
    },
    // 刷新服务器配置
    resTableFreshServer() {
      this.getDeviceServerManagementListFuc()
    },
    Guardconfirm() {
      this.$Modal.confirm({
        title: '',
        content: '<p>确认重新获取门禁设备？</p>',
        onOk: () => {
          this.asyncGuardList().then(res => {
            if (res.code === 200) {
              this.guardListFuc() // 获取成功后刷新列表
              this.successMsg('获取成功')
            } else {
              this.errorMsg(res.message)
            }
          })
        },
        onCancel: () => {
          // this.$Message.info('Clicked cancel');
        }
      })
    },
    // 人脸识别机获取
    FaceasyncConfirm() {
      this.$Modal.confirm({
        title: '',
        content: '<p>确认重新获取人脸识别机设备？</p>',
        onOk: () => {
          this.faceasyncDevice().then(res => {
            if (res.code === 200) {
              this.getFaceRecognitionListFuc() // 获取成功后刷新列表
              this.successMsg('获取成功')
            } else {
              this.errorMsg(res.message)
            }
          })
        },
        onCancel: () => {
          // this.$Message.info('Clicked cancel');
        }
      })
    },
    // 人证核验机获取
    asyncDeviceConfirm() {
      this.$Modal.confirm({
        title: '',
        content: '<p>确认重新获取人证核验机设备？</p>',
        onOk: () => {
          this.asyncDevicePeople().then(res => {
            if (res.code === 200) {
              this.successMsg('获取成功')
              this.getPeopleCardFuc()
            } else {
              this.errorMsg(res.message)
            }
          }) // 获取完成刷新列表
        },
        onCancel: () => {
          // this.$Message.info('Clicked cancel');
        }
      })
    },
    // 同步设备
    resSynchronization(type) {
      switch (type) {
        case 1: // 同步门禁设备
          this.Guardconfirm()
          break
        case 2:
          break
        case 3:
          break
        case 4:
          this.FaceasyncConfirm()
          break
        case 5:
          this.asyncDeviceConfirm()
          break
      }
    },
    // 服务器配置增加按钮
    modalloadingServer() {
      this.loadingServer = true
      if (!this.isEditServerConfig) {
        if (this.addServerParams.vendor === '一卡通') {
          this.addServerParams.type = 4
        }
        this.addDeviceServerManagement(this.addServerParams).then(res => {
          if (res.message == '该类型的服务已经存在') {
            this.errorMsg(res.message)
            this.AddModalServer = false
            this.loadingServer = false
            this.getDeviceServerManagementListFuc()
          } else if (res.code === 500) {
            this.errorMsg(res.message)
            this.AddModalServer = false
            this.loadingServer = false
            this.getDeviceServerManagementListFuc()
          } else if (res.code === 200) {
            this.successMsg(res.message)
            this.AddModalServer = false
            this.loadingServer = false
            this.getDeviceServerManagementListFuc()
          }
        })
      } else {
        delete this.addServerParams._v
        delete this.addServerParams._index
        delete this.addServerParams._rowKey
        delete this.addServerParams.status
        if (this.addServerParams.vendor === '一卡通') {
          this.addServerParams.type = 4
        }
        this.editConfig(this.addServerParams)
          .then(res => {
            if (res.message == '该类型的服务已经存在') {
              this.errorMsg(res.message)
              this.AddModalServer = false
              this.loadingServer = false
              this.getDeviceServerManagementListFuc()
            } else if (res.code === 500) {
              this.errorMsg(res.message)
              this.AddModalServer = false
              this.loadingServer = false
              this.getDeviceServerManagementListFuc()
            } else if (res.code === 200) {
              this.successMsg(res.message)
              this.AddModalServer = false
              this.loadingServer = false
              this.getDeviceServerManagementListFuc()
            }
          })
          .catch(err => {})
      }
    },
    // 获取服务器配置列表
    getDeviceServerManagementListFuc() {
      this.getDeviceServerManagementList(this.getserverListParams).then(res => {
        console.log(res)
        if (res) {
          this.serverResourceTableData = res.data
          this.serverParams.total = res.length
        }
      })
    },
    // 获取服务器在线状态
    getServerStatusFuc() {
      this.getServerStatus('').then(res => {
        if (res.code === 200) {
          this.successMsg(res.message)
        } else {
          this.errorMsg(res.message)
        }
      })
    },
    /// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////门禁模块
    // 获取门禁设备列表
    guardListFuc() {
      this.guardParam.orgId = this.orgActiveId
      this.guardParam.showChildren = this.isShowSubstructure
      console.log(this.guardParam)
      this.guardList(this.guardParam).then(res => {
        if (res) {
          this.resTabs[this.resActiveTab].number = this.resourceTableData.count
        }
      })
    },

    /// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 门/通道
    // 获取门列表
    getDoorList() {
      this.doorParam.orgId = this.orgActiveId
      this.doorParam.showChildren = this.isShowSubstructure
      this.doorList(this.doorParam).then(res => {
        if (res) {
        }
      })
    },
    // 远程常开
    reslongOpenDoor() {
      var id = this.selectRes[0]._id
      this.openTimeLang({ id: id }).then(res => {
        if (res) {
          this.successMsg('')
        }
      })
    },
    // 远程开门
    resopenDoor() {
      var id = this.selectRes[0]._id
      this.openDoor({ id: id }).then(res => {
        if (res) {
          this.getFaceRecognitionListFuc()
          this.successMsg('开门成功')
        }
      })
    },
    // 远程关门
    rescloseDoor() {
      var id = this.selectRes[0]._id
      this.closeDoor({ id: id }).then(res => {
        if (res) {
          this.successMsg('关门成功')
        }
      })
    },

    /// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 读头
    // 获取读头列表
    getreadList() {
      this.readlistParam.orgId = this.orgActiveId
      this.readlistParam.showChildren = this.isShowSubstructure
      this.getReadList(this.readlistParam).then(res => {
        if (res) {
        }
      })
    },
    // 获取人证核验设备列表
    getPeopleCardFuc() {
      this.peopleCardParam.orgId = this.orgActiveId
      this.peopleCardParam.showChildren = this.isShowSubstructure
      this.getPeopleCard(this.peopleCardParam).then(res => {
        console.log('=======', res)
        res.data.data.forEach(item => {
          if (!('readerState' in item)) {
            item.readerState = ''
          }
          if (item.status === '在线') {
            item.status = 1
          } else {
            item.status = 0 // 离线
          }
        })
      })
    },
    // 绑定相机
    resBindPhoto() {
      this.protoModel.isShow = true
      if (this.selectRes.length == 1) {
        this.deviceCurrentNodeKey = this.selectRes[0].cameraData[0]._id
      } else {
        this.deviceCurrentNodeKey = ''
      }
    },
    // 选中相机之后的回调
    bindProtoClick(event) {
      this.bindProtoParam.cameraData = []
      this.peopleCardBindParam.cameraData = []
      this.peopleCardBindParam.device = []
      this.bindProtoParam.id = []
      console.log(event)
      this.bindProtoParam.id = this.selectRes.map(item => {
        return item._id
      })
      this.peopleCardBindParam.device = this.selectRes.map(item => {
        return item._id
      })
      // this.bindProtoParam._id = this.selectRes[0]._id;
      if (event.tierType === 'res') {
        this.bindProtoParam.cameraData.push(event._id) // 如果接收到的值为资源的话，
      }
      if (event.tierType === 'res') {
        this.peopleCardBindParam.cameraData.push(event._id)
      }

      // event.forEach(item=>{
      //   if(item.tierType === 'res'){          // 如果接收到的值为资源的话，
      //     this.bindProtoParam.cameraData.push( item._id);
      //   }
      // });
    },

    /// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 人脸识别
    // 获取人脸识别列表
    getFaceRecognitionListFuc() {
      this.getLiveCount()
      this.faceRecognitionParam.orgId = this.orgActiveId
      this.faceRecognitionParam.showChildren = this.isShowSubstructure
      this.getFaceRecognitionList(this.faceRecognitionParam).then(res => {
        if (res) {
        }
      })
    },

    // 高级配置
    saveadvancedConfiguration() {
      this.editLevelConfig(this.advancedConfigurationParmams).then(res => {
        if (res) {
          this.successMsg('更新成功')
        }
      })
    },
    // 重置高级配置
    resetadvancedConfiguration() {
      this.advancedConfigurationParmams.data.timeLang = 30
      this.advancedConfigurationParmams.data.source = 1
      this.editLevelConfig(this.advancedConfigurationParmams).then(res => {
        if (res) {
          this.successMsg('恢复成功')
        }
      })
    },

    // 删除机构时判断是否能删除
    async isdelFun(del) {
      let obj = {
        state: true,
        msg: ''
      }
      if (this.resActiveTab == 0) {
        this.VideoChannelParam = {
          // 视频通道列表请求参数
          page: 1,
          limit: this.$PageInfo.limit,
          oid: '',
          type: 0,
          never: -1,
          seek: ''
        }
        await this.getResData() // 视频通道
        console.log(this.resourceTableData)
        if (this.resourceTableData.list.length > 0) {
          obj.state = false
          obj.msg = '该机构下存在视频通道，不能删除'
        }
      } else if (this.resActiveTab == 1) {
        this.guardParam = {
          // 门禁设备列表请求参数
          pageSize: this.$PageInfo.limit,
          pageNum: 1,
          orgId: '',
          showChildren: true,
          keyWord: ''
        }
        await this.guardListFuc() // 门禁设备列表
        if (this.resourceTableData.list.length > 0) {
          obj.state = false
          obj.msg = '该机构下存在门禁列表数据，不能删除'
        }
      } else if (this.resActiveTab == 2) {
        this.doorParam = {
          // 门列表请求参数
          pageSize: this.$PageInfo.limit,
          pageNum: 1,
          orgId: '',
          showChildren: true,
          keyWord: ''
        }
        await this.getDoorList() // 获取门列表
        if (this.resourceTableData.list.length > 0) {
          obj.state = false
          obj.msg = '该机构下存在门列表数据，不能删除'
        }
      } else if (this.resActiveTab == 3) {
        this.readlistParam = {
          // 门禁设备列表请求参数
          pageSize: this.$PageInfo.limit,
          pageNum: 1,
          orgId: '',
          showChildren: true,
          keyWord: ''
        }
        await this.getreadList() // 读头
        if (this.resourceTableData.list.length > 0) {
          obj.state = false
          obj.msg = '该机构下存在读头数据，不能删除'
        }
      } else if (this.resActiveTab == 4) {
        this.faceRecognitionParam = {
          // 人脸识别设备列表请求参数
          pageSize: this.$PageInfo.limit,
          pageNum: 1,
          orgId: '',
          showChildren: true,
          keyWord: ''
        }
        await this.getFaceRecognitionListFuc() // 人脸识别
        if (this.resourceTableData.list.length > 0) {
          obj.state = false
          obj.msg = '该机构下存在人脸，不能删除'
        }
      } else if (this.resActiveTab == 5) {
        this.peopleCardParam = {
          pageSize: this.$PageInfo.limit,
          pageNum: 1,
          orgId: '',
          showChildren: true,
          keyWord: ''
        }
        await this.getPeopleCardFuc() // 人证核验
        if (this.resourceTableData.list.length > 0) {
          obj.state = false
          obj.msg = '该机构下存在人证核验数据，不能删除'
        }
      }
      return obj
    },
    resizefun() {
      this.tableHeight = this.$refs['tableBox'].offsetHeight
    }
  },
  created() {
    this.route = this.$route.path
    this.getServerStatusFuc()
    this.getDeviceServerManagementListFuc()
    this.getLevelConfig('').then(res => {
      if (res) {
        this.advancedConfigurationParmams.data.source = res.data[0].source
        this.advancedConfigurationParmams.data.timeLang = res.data[0].timeLang
        this.advancedConfigurationParmams._id = res.data[0]._id
      }
    })
  },
  mounted() {
    console.log(this.$refs['tableBox'])
    this.tableHeight = this.$refs['tableBox'].offsetHeight
    window.addEventListener('resize', this.resizefun)
  },
  beforeDestroy() {
    window.removeEventListener('resize', this.resizefun)
    this.resizefun = null
  }
}
</script>
<style scoped>
.container {
  width: 100%;
  height: auto;
  position: relative;
  display: flex;
}
.el-textarea__inner {
  color: #ffffff;
}
.sidebar {
  width: 100%;
  height: auto;
}
.sidebarDark ul li {
  width: 100%;
  height: 45px;
  text-align: center;
  line-height: 45px;
  cursor: pointer;
}
.sidebarDark ul li:first-child {
  border-top: 1px solid rgba(85, 119, 167, 1);
}
.sidebarDark ul li:last-child {
  border-top: 1px solid rgba(85, 119, 167, 1);
  border-bottom: 1px solid rgba(85, 119, 167, 1);
}
.sidebarDark ul li:hover {
  color: rgba(0, 121, 254, 1);
}
.sidebarDark ul .Serveractive {
  background: rgba(0, 121, 254, 1);
}
.sidebarDark ul .Serveractive:hover {
  color: #333333;
}
.sidebar > a {
  display: block;
  height: 38px;
  line-height: 38px;
  font-size: 14px;
  color: #fff;
  padding-left: 20px;
  background-color: #0f2243;
}

.tree-org {
  height: 565px;
}

.config-list li {
  position: relative;
  cursor: pointer;
  border-bottom: 1px solid #5d5d5d;
  font-size: 14px;
  color: #80848f;
  border-right: 2px solid transparent;
}

.config-list li:hover {
  color: #fff;
}

.sidebar > .config-list > .active {
  color: #2d8cf0;
  border-right: 2px solid #2d8cf0;
  background-color: #444;
  z-index: 2;
}

li > div {
  padding: 14px 40px;
}

.bs-main {
  padding: 0;
  background-color: #1c3053;
  overflow: hidden;
}

.resource-right-table {
  flex: 1;
  display: flex;
  flex-direction: column;
  height: 100%;
}
.resource-right-table .table-header {
  height: 100%;
  display: flex;
  flex-direction: column;
}
.resource-right {
  height: 100%;
}

/*按钮和inpu框*/

.table-header-actions {
  /* height: 50px; */
  margin: 12px 10px 12px 24px;
  background-color: #1c3054;
}

/*按钮和inpu框*/

.actions-btn {
  float: left;
  /* margin-top: 10px; */
}
.actions-btn span span {
  display: inline-block;
  margin: 0 10px;
}
.actions-search {
  float: right;
  /* margin-top: 9px; */
}

.actions-btn .ivu-btn {
  margin-right: 8px;
}

.actions-btn .ivu-select {
  margin-right: 8px;
}

/* table样式 */

.table-relative {
  position: relative;
  flex: 1;
}

.table-body {
  position: absolute;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
}

/*修改弹出框内容样式*/

.res-add-model {
  padding: 0px 10px;
}

.res-edit-form {
  padding: 10px 10px;
  width: 100%;
}

.res-edit-form .check-input .ivu-col-span-8 {
  width: 100px;
  height: 32px;
  line-height: 32px;
}

.res-edit-form .check-input .ivu-col-span-16 {
  width: calc(100% - 100px);
  height: 56px;
}
.res-model-tree {
  height: 470px;
  width: 450px;
  margin-top: 20px;
  overflow: auto;
  display: flex;
}
.formTip {
  display: inline-block;
  color: red;
  height: 24px;
  line-height: 24px;
}

.check-input .ivu-col-span-16 input {
  display: inline-block;
  width: 100%;
  height: 32px;
  line-height: 1.5;
  padding: 4px 7px;
  font-size: 12px;
  border: 1px solid #5676a9;
  border-radius: 4px;
  color: #ffffff;
  background-color: #1c3053;
  cursor: text;
  outline: none;
}

.check-input .ivu-col-span-16 input:hover {
  border: 1px solid #33b7e9;
}

.check-input .ivu-col-span-16 input:focus {
  border: 1px solid #33b7e9;
}

.check-input .ivu-col-span-16 .redBorder {
  border: 1px solid red;
}

.check-input .ivu-col-span-16 .redBorder:hover {
  border: 1px solid red;
}

.check-input .ivu-col-span-16 .redBorder:focus {
  border: 1px solid red;
}
.check-input .redBorderDis {
  cursor: not-allowed;
}
.check-input .redBorderDis:hover {
  cursor: not-allowed;
}

.clear:after {
  content: '';
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}
</style>
