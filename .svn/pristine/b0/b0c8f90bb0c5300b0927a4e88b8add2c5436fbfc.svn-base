<template>
  <div class="bs-resource-manage bs-content">
    <div class="resource-left bs-left">
      <!-- <BsOrgTree @call="getResDataClick" @shareServer='shareServer' :orgType="0" orgTitle="机构资源" :isHandle="false"></BsOrgTree> -->
      <BStreeNewBox :iconToggle="false" :searchToggle="true" :searchType="0" :equipmentToggle="false" :resourceToggle="false" :orgType="0" :resType="[0]" @clickData="nodeClick"></BStreeNewBox>
    </div>
    <div class="bs-main">
      <div class="resource-right-table">
        <div class="table-header">
          <TableTab ref="resTab" :tabs="resTabs" :isCount="true"></TableTab>
          <div class="table-header-actions clear">
            <div class="actions-btn">
              <Button type="ghost" icon="plus" v-if="$BShasPower('BS-SETTING-RESOURCE-VIDEO-MANAGE')" @click="resAddOpenFn" :disabled="!isAddRes">添加</Button>
              <Button type="ghost" icon="edit" v-if="$BShasPower('BS-SETTING-RESOURCE-VIDEO-MANAGE') && tabIndex !== 2" @click="resEditOpen" :disabled="!isResChecked">修改</Button>
              <Button type="ghost" icon="trash-a" v-if="$BShasPower('BS-SETTING-RESOURCE-VIDEO-MANAGE')" @click="resDelOpen" :disabled="!isResChecked">删除</Button>
              <Button type="ghost" icon="arrow-move" v-if="$BShasPower('BS-SETTING-RESOURCE-VIDEO-MANAGE') && (tabIndex === 0 || tabIndex === 2)" @click="resMoveOpen" :disabled="!isResChecked">移动</Button>
              <Button type="ghost" icon="" v-if="$BShasPower('BS-SETTING-RESOURCE-VIDEO-MANAGE')&&tabIndex === 1" @click="rtspCfgOpen">配置</Button>
              <Button type="ghost" icon="refresh" @click="resFreshPageDataFn">刷新</Button>
              <Select style="width:120px" :disabled='isSynchronization' placeholder="同步通道名称" v-model="channelNameSyncSelect" v-if="$BShasPower('BS-SETTING-RESOURCE-VIDEO-MANAGE')&&tabIndex===0">
                <Option @click.native="selectChannelName" v-for="opt in channelNameSyncOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
              <Select style="width:100px" placeholder="设置码流" v-model="batchStreamSelect" v-if="$BShasPower('BS-SETTING-RESOURCE-VIDEO-MANAGE')&&(tabIndex===0 || tabIndex===2)">
                <Option @click.native="selectBatchStream" v-for="opt in batchStreamOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
              </Select>
              <Checkbox v-model="isShowChild" @on-change="showChildRefresh">显示子机构设备</Checkbox>
            </div>
            <div class="actions-search">
              <Input placeholder="请输入通道名称" style="width: 220px" v-model="filterKey" @keyup.enter.native="seekResData(1)">
              <Button slot="append" @click="seekResData(1)">搜索</Button>
              </Input>
            </div>
          </div>
        </div>
        <div class="table-relative" ref="tableBox">
          <div class="table-body">
            <Table size="small" :columns="tableColumns" :height="tableHeight" :data="resourceTableData" :highlight-row="true" @on-selection-change="selectResRow" width="100%" style="overflow:auto"></Table>
          </div>
        </div>
        <div class="table-footer">
          <div style="float: right;" class="footer-cont">
            <Page :total="resourceCounts" :current="pageSelect" :page-size="pageLimit" show-total show-elevator @on-change="changeResPage" show-sizer :page-size-opts="$PageInfo.size" @on-page-size-change="pageSizeChange"></Page>
          </div>
        </div>
      </div>
    </div>
    <!-- 资源添加弹出框 -->
    <Modal :mask-closable="false" class="editModal" v-model="resAddModal" :title="tabIndex===0?'资源分配': (tabIndex === 1 ? '视频通道rtsp流分配' : '报警求助设备')" width="450" @on-cancel="resAddCancel">
      <div class="res-add-model">
        <p v-if="tabIndex===0">选择机构资源，将资源添加到当前机构下
          <Checkbox style="float:right" v-model="isAllResTree" @on-change="toggleResTree">其他机构资源</Checkbox>
        </p>
        <p v-if="tabIndex===1">选择通道
          <span style="float:right">{{'剩余数/总数: '+ (rtspcountAll-rtspNumber>=0 ? rtspcountAll-rtspNumber: 0) + '/' + rtspcountAll}}</span>
        </p>
         <p v-if="tabIndex===1">
          <span style="float:right;">{{'勾选数：' + rtspCheckNumber}}</span>
        </p>
        <p v-if="tabIndex===2">选择报警终端设备，将设备添加到当前机构下</p>
        <div class="res-model-tree" v-if="resAddModal === true">
          <bs-scroll ref="scroller">
            <bsr-tree :treeData="resAddTreeData[0]||{}" ref="resTree"  @on-expand="$refs.scroller.update()" showCheckbox @getSelectedNodes="treeCheckChange">
              <template slot-scope="{ node }">
                <span :class="{'item': true, 'offline': (node.eid && node.status !== 1)}" :title="node.name">
                  <i class="iconfont" :class="[getNodeIcon(node).class]" :title="getNodeIcon(node).title"></i>
                  {{node.name}}
                </span>
              </template>
            </bsr-tree>
          </bs-scroll>
        </div>
      </div>
      <div slot="footer">
        <Button type="ghost" @click="resAddCancel">取消</Button>
        <Button type="primary" @click="resAddSave" :loading="modalloading">确认</Button>
      </div>
    </Modal>
    <!-- 资源移动弹出框 -->
    <Modal :mask-closable="false" v-model="resMoveModal" title="资源移动" width="450">
      <div class="res-add-model">
        <p>选择机构,将资源移动到当前机构下</p>
        <div class="res-model-tree">
          <BStreeNewBox :iconToggle="false" :searchToggle="false" :searchType="0" :equipmentToggle="false" :resourceToggle="false" :orgType="0" :resType="[0]" @clickData="selectMoveOrg"></BStreeNewBox>
          <!-- <bs-scroll ref="moveScroller">
            <VTree :treeData="resMoveTreeData" :options="resMoveTreeOptions" @node-click="selectMoveOrg" :activeId="resMoveOrgId" @on-expand="$refs.moveScroller.update()">
            </VTree>
          </bs-scroll> -->
        </div>
      </div>
      <div slot="footer">
        <Button type="ghost" @click="resMoveCancel">取消</Button>
        <Button type="primary" @click="resMoveSave" :loading="modalloading">确认</Button>
      </div>
    </Modal>
    <!-- 资源修改弹出框 -->
    <Modal :mask-closable="false" v-model="resEditModal" title="资源修改" width="450">
      <div class="res-edit-form">
        <Form label-position="left" :label-width="100" :model="resEditFormData" ref="resEditForm" :rules="resFormRole">
          <Form-item label="所属设备" style="word-wrap: break-word">
            {{ resEditFormInfo.deviceName }}
          </Form-item>
          <Form-item label="通道号">
            {{ resEditFormData.chan }}
          </Form-item>
          <Form-item label="所属机构" style="word-wrap: break-word">
            {{ resEditFormInfo.orgName }}
          </Form-item>
          <Form-item label="通道名称" prop="name">
            <Input v-model="resEditFormData.name"></Input>
          </Form-item>
          <Form-item label="监控点类型">
            <Select v-model="resEditFormData.monitortype">
              <Option v-for="opt in monitortypeOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
            </Select>
          </Form-item>
          <Form-item label="实时视频码流">
            <Select v-model="resEditFormData.stream">
              <Option v-for="opt in streamOpts" :value="opt.value" :key="opt.value">{{ opt.label }}</Option>
            </Select>
          </Form-item>
          <Form-item label="键盘控制号" prop="keycode">
            <Input v-model="resEditFormData.keycode"></Input>
          </Form-item>
          <Row class="check-input">
            <Col span="8">
            <Checkbox v-model="resEditFormData.isprerecord">预录时间</Checkbox>
            </Col>
            <Col span="16">
            <Input v-model="resEditFormData.precord" :class="{redBorder: precordTip !== '' }" :disabled="!resEditFormData.isprerecord"></Input>
            <span class="formTip">{{precordTip}}</span>
            </Col>
          </Row>
          <Row class="check-input">
            <Col span="8">
            <Checkbox v-model="resEditFormData.isdelayrecord">延录时间</Checkbox>
            </Col>
            <Col span="16">
            <Input v-model="resEditFormData.delayrecord" :class="{redBorder: delayrecordTip !== '' }" :disabled="!resEditFormData.isdelayrecord"></Input>
            <span class="formTip">{{delayrecordTip}}</span>
            </Col>
          </Row>
        </Form>
      </div>
      <div slot="footer">
        <Button type="ghost" @click="resEditCancel">取消</Button>
        <Button type="primary" @click="resEditSave" :loading="modalloading">确认</Button>
      </div>
    </Modal>
    <!-- rtsp流修改弹出框 -->
    <Modal :mask-closable="false" v-model="rtspEditModal" title="视频通道rtsp流修改" width="450">
      <div class="res-edit-form">
        <Form label-position="left" :label-width="100" :model="rtspEditFormData" ref="rtspEditForm" :rules="rtspFormRole">
          <Form-item label="rtsp流地址" prop="rtspCount">
            <span>{{rtspEditFormData.rtspString}}</span><Input v-model="rtspEditFormData.rtspCount" style="width:50px;display:inlint-block"></Input>
          </Form-item>
        </Form>
      </div>
      <div slot="footer">
        <Button type="ghost" @click="rtspEditCancel">取消</Button>
        <Button type="primary" @click="resEditSave" :loading="modalloading">确认</Button>
      </div>
    </Modal>
    <!-- rtsp流配置弹出框 -->
    <RtspCfg ref="RtspCfg" :rtspFormData="rtspFormData" @cancel="rtspCfgCancel" @save="editRtspServer" :rtspCfgModalShow="rtspCfgModalShow"></RtspCfg>
  </div>
</template>
<script>
import BStreeNewBox from '../../../components/BStreeNew/BStreeNewBox'
// import BsOrgTree from '../../../components/BSorgTree.vue'
import TableTab from '../equipment/tableTab'
import toTreeData from 'assets/js/toTreeData.js'
import RtspCfg from './modal/rtspCfg'
import { getNodeIcon } from 'components/BStree/commonMethods.js'
import { mapState, mapActions, mapGetters, mapMutations } from 'vuex'
import deviceValidate from '../equipment/deviceValidate.js'
export default {
  components: {
    // BsOrgTree,
    TableTab,
    RtspCfg,
    BStreeNewBox
  },
  data() {
    // 键盘控制号0-65535
    const codeTime = (rule, value, callback) => {
      const r = /(^[1-9]([0-9]*)$|^[0-9]$)/
      if (value === '' || value === undefined) {
        callback()
      }
      if (r.test(value)) {
        if (Number(value) > 65535) {
          return callback(new Error('超过最大值'))
        } else {
          callback()
        }
      } else {
        return callback(new Error('请输入有效数字'))
      }
    }
    const rtspCountsValidate = (rule, value, callback) => {
      let count
      this.getRtspCfg()
        .then(suc => {
          count = suc.rtspcount
          const r = /(^[1-9]([0-9]*)$|^[0-9]$)/
          if (value === '' || value === null || value === undefined) {
            return callback(new Error('不能为空'))
          }
          if (r.test(value)) {
            if (Number(value) > count) {
              return callback(new Error('超过最大值' + count))
            } else if (Number(value) < 0) {
              return callback(new Error('小于最小值0'))
            } else {
              callback()
            }
          } else {
            return callback(new Error('请输入有效数字'))
          }
        })
        .catch(err => {
          console.log('getRtspCfg error' + err)
        })
    }
    return {
      tabIndex: 0,
      tableHeight: 435,
      resTabs: [
        {
          title: '视频通道',
          value: 0,
          disabled: false,
          active: true,
          number: 0,
          isHide: false
        },
        {
          title: 'rtsp流配置',
          value: 0,
          disabled: false,
          active: false,
          number: 0,
          isHide: true
        },
        {
          title: '报警求助设备',
          value: 0,
          disabled: false,
          active: false,
          number: 0,
          isHide: false
        }
      ],
      tableColumns: [],
      resColumns: [
        {
          type: 'selection',
          width: 60,
          align: 'left'
        },
        {
          title: '序号',
          type: 'index',
          align: 'left',
          width: 70
        },
        {
          title: '通道名称',
          key: 'name',
          align: 'left',
          minWidth: 160,
          render: (h, params) => {
            return h(
              'span',
              {
                style: {
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                },
                domProps: {
                  title: params.row.name
                }
              },
              params.row.name
            )
          }
        },
        {
          title: '所属设备',
          key: 'device',
          minWidth: 120,
          align: 'left',
          ellipsis: true,
          render: (h, params) => {
            let text = ''
            if (params.row.eid) {
              text = params.row.eid.name
            } else {
              text = '...'
            }
            return h('span', text)
          }
        },
        {
          title: '设备IP',
          key: 'ip',
          align: 'left',
          width: 140,
          render: (h, params) => {
            let text = params.row.ip
            return h('span', text)
          }
        },
        {
          title: '通道号',
          key: 'chan',
          align: 'left',
          width: 80
        },
        {
          title: '监控点类型',
          key: 'monitortype',
          align: 'left',
          width: 110,
          render: (h, params) => {
            let text = ''
            switch (params.row.monitortype) {
              case 0:
                text = '枪机'
                break
              case 1:
                text = '红外枪机'
                break
              case 2:
                text = '半球'
                break
              case 3:
                text = '快球'
                break
              case 4:
                text = '全景'
                break
            }
            return h('span', text)
          }
        },
        {
          title: '实时码流',
          key: 'stream',
          align: 'left',
          width: 120,
          render: (h, params) => {
            let text = ''
            let t = params.row.stream
            if (t === 'main') {
              text = '主码流'
            } else if (t === 'sub1') {
              text = '子码流'
            } else if (t === 'sub2') {
              text = '第三码流'
            }
            return h('span', text)
          }
        },
        {
          title: '预录',
          key: 'isprerecord',
          align: 'left',
          minWidth: 80,
          render: (h, params) => {
            let text = ''
            if (!params.row.isprerecord) {
              text = '未开启'
            } else {
              text = params.row.precord
            }
            return h('span', text)
          }
        },
        {
          title: '延录',
          key: 'isdelayrecord',
          align: 'left',
          minWidth: 80,
          render: (h, params) => {
            let text = ''
            if (!params.row.isdelayrecord) {
              text = '未开启'
            } else {
              text = params.row.delayrecord
            }
            return h('span', text)
          }
        },
        {
          title: 'rtsp流地址',
          key: 'rtsp',
          align: 'left',
          minWidth: 160,
          render: (h, params) => {
            let text = ''
            text = params.row.rtsp ? params.row.rtsp.main : ''
            return h('span', text)
          }
        },
        {
          title: '状态',
          key: 'status',
          align: 'left',
          width: 70,
          render: (h, params) => {
            let color
            let text
            if (params.row.status === 0) {
              color = '#ed3f14'
              text = '离线'
            } else {
              color = '#19be6b'
              text = '在线'
            }
            return h(
              'span',
              {
                style: {
                  color: color
                }
              },
              text
            )
          }
        }
      ],
      rtspColumns: [
        {
          type: 'selection',
          width: 60,
          align: 'left'
        },
        {
          title: '序号',
          type: 'index',
          align: 'left',
          width: 60
        },
        {
          title: '通道名称',
          key: 'name',
          align: 'left',
          minWidth: 160,
          render: (h, params) => {
            return h(
              'span',
              {
                style: {
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                },
                domProps: {
                  title: params.row.name
                }
              },
              params.row.name
            )
          }
        },
        {
          title: '所属设备',
          key: 'device',
          minWidth: 120,
          align: 'left',
          ellipsis: true,
          render: (h, params) => {
            let text = ''
            if (params.row.eid) {
              text = params.row.eid.name
            } else {
              text = '...'
            }
            return h('span', text)
          }
        },
        {
          title: '设备IP',
          key: 'ip',
          align: 'left',
          minWidth: 120,
          render: (h, params) => {
            let text = params.row.ip
            return h('span', text)
          }
        },
        {
          title: '通道号',
          key: 'chan',
          align: 'left',
          width: 80
        },
        {
          title: 'rtsp流地址',
          key: 'rtsp',
          align: 'left',
          minWidth: 180,
          render: (h, params) => {
            let text = ''
            text = params.row.rtsp ? params.row.rtsp.main : '......'
            return h('span', text)
          }
        }
      ],
      alarmColums: [
        {
          type: 'selection',
          width: 60,
          align: 'left'
        },
        {
          title: '序号',
          type: 'index',
          align: 'left',
          width: 60
        },
        {
          title: '设备名称',
          key: 'name',
          align: 'left',
          minWidth: 110,
          render: (h, params) => {
            return h(
              'span',
              {
                style: {
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                },
                domProps: {
                  title: params.row.name
                }
              },
              params.row.name
            )
          }
        },
        {
          title: '设备IP',
          key: 'ip',
          align: 'left',
          minWidth: 110,
          render: (h, params) => {
            let text = params.row.ip
            return h('span', text)
          }
        },
        {
          title: '实时码流',
          key: 'stream',
          align: 'left',
          minWidth: 120,
          render: (h, params) => {
            let text = ''
            let t = params.row.stream
            if (t === 'main') {
              text = '主码流'
            } else if (t === 'sub1') {
              text = '子码流'
            } else if (t === 'sub2') {
              text = '第三码流'
            }
            return h('span', text)
          }
        }
      ],
      resAddTreeData: [],
      resAddTreeDataMap: {}, // 添加数据时，存储资源通道数据
      resMoveTreeData: [],
      resAddTreeOptions: {
        showInput: true
      },
      resMoveTreeOptions: {
        showInput: false
      },
      resEditFormInfo: {
        deviceName: '设备名',
        orgName: '机构名'
      },
      rtspFromInfo: {},
      isSynchronization: false,
      resEditFormData: {
        name: '通道资源名称',
        chan: 0,
        monitortype: 0,
        stream: 'main',
        keycode: '',
        isprerecord: false,
        precord: 6,
        isdelayrecord: false,
        delayrecord: 6
      },
      rtspEditFormData: {
        rtspCount: '',
        rtspString: ''
      },
      resFormRole: {
        keycode: [{ validator: codeTime, trigger: 'change' }],
        name: [
          {
            required: true,
            validator: deviceValidate.verifyResName,
            trigger: 'change'
          },
          { validator: deviceValidate.noSpace, trigger: 'change' }
        ]
      },
      rtspFormRole: {
        rtspCount: [{ required: true, validator: rtspCountsValidate, trigger: 'change' }]
      },
      monitortypeOpts: [
        {
          value: 0,
          label: '枪机'
        },
        {
          value: 1,
          label: '红外枪机'
        },
        {
          value: 2,
          label: '半球'
        },
        {
          value: 3,
          label: '快球'
        },
        {
          value: 4,
          label: '全景'
        }
      ],
      streamOpts: [
        {
          value: 'main',
          label: '主码流'
        },
        {
          value: 'sub1',
          label: '子码流'
        },
        {
          value: 'sub2',
          label: '第三码流'
        }
      ],
      channelNameSyncOpts: [
        {
          value: 'center',
          label: '同步到中心'
        },
        {
          value: 'device',
          label: '同步到设备'
        }
      ],
      batchStreamOpts: [
        {
          value: 'main',
          label: '主码流'
        },
        {
          value: 'sub1',
          label: '子码流'
        },
        {
          value: 'sub2',
          label: '第三码流'
        }
      ],
      batchStreamSelect: '',
      channelNameSyncSelect: '',
      resAddModal: false,
      resEditModal: false,
      rtspEditModal: false,
      resMoveModal: false,
      resSelectIds: [],
      selectedOperate: [],
      resActiceId: '',
      resMoveOrgId: '',
      resActiveTab: 0,
      isAllResTree: false, // 添加按钮，是否选中弹出层内部 其他机构资源
      isEditRes: false,
      isShowChild: true,
      pageSelect: 1,
      pageLimit: this.$PageInfo.limit,
      modalLoading: false,
      precordTip: '',
      delayrecordTip: '',
      filterKey: '',
      isResChecked: false,
      modalloading: false,
      true: true,
      rtspFormData: {},
      rtspCfgModalShow: false,
      rtspcountAll: 0,
      rtspNumber: 0,
      initialNumber: 0,
      rtspCheckNumber: 0,
      isAddRes: true,
      selectChecked: {}
    }
  },
  computed: {
    ...mapState({
      resourceTableData: ({ resource }) => resource.resourceTableData,
      resourceCounts: ({ resource }) => resource.resourceCounts,
      orgTreeData: ({ orgSetting }) => orgSetting.orgTreeData,
      isRootOrg: ({ orgSetting }) => orgSetting.isRootOrg,
      orgActiveName: ({ orgSetting }) => orgSetting.orgActiveName,
      orgActiveId: ({ orgSetting }) => orgSetting.orgActiveId
    }),
    ...mapGetters(['sysConfrole'])
  },
  watch: {
    'resEditFormData.precord'(newval) {
      const r = /(^[1-9]([0-9]*)$|^[0-9]$)/
      if (newval === '' || newval === null) {
        this.precordTip = ''
      } else if (r.test(newval)) {
        if (Number(newval) > 30) {
          this.precordTip = '超出范围1-30'
        } else if (Number(newval) < 1) {
          this.precordTip = '超出范围1-30'
        } else {
          this.precordTip = ''
        }
      } else {
        this.precordTip = '请输入有效数字'
      }
    },
    'resEditFormData.delayrecord'(newval) {
      const r = /(^[1-9]([0-9]*)$|^[0-9]$)/
      if (newval === '' || newval === null) {
        this.delayrecordTip = ''
      } else if (r.test(newval)) {
        if (Number(newval) > 3600) {
          this.delayrecordTip = '超出范围1-3600'
        } else if (Number(newval) < 1) {
          this.delayrecordTip = '超出范围1-3600'
        } else {
          this.delayrecordTip = ''
        }
      } else {
        this.delayrecordTip = '请输入有效数字'
      }
    }
  },
  methods: {
    ...mapActions([
      'getResourceByType',
      'getVideoResTree',
      'saveResourceToOrg',
      'deleteResource',
      'unbindResource',
      'getSingleResource',
      'getDeviceInfo',
      'getOrgName',
      'saveResourceInfo',
      'changeResourceOrg',
      'getRootId',
      'channelNameSync',
      'batchSetStreams',
      'getRtspCfg',
      'editRtspCfg',
      'getRtspResourceTree',
      'delResourceRtsp',
      'addResourceRtsp',
      'getUnusedRtspData',
      'getRootRescounts',
      'saveRtspInfo',
      'getResourceCount',
      'recordLog',
      'setOrgActiveId'
    ]),
    ...mapMutations(['SET_ORGACTIVE_ID']),
    nodeClick(node) {
      this.SET_ORGACTIVE_ID(node._id)
      this.getResDataClick()
      this.shareServer(node)
    },
    selective(node) {
      if (node.shareServer) {
        return false
      }
      return true
    },
    getNodeIcon(item) {
      return getNodeIcon(item)
    },
    getResDataClick() {
      this.isSearch = false
      this.isResChecked = false
      this.resSelectIds = []
      this.selectedOperate = []
      let tab = this.tabIndex === 2 ? 'alarmHelp' : ''
      this.resAddOpen()
      this.getResData(1, undefined, tab)
    },
    shareServer(node) {
      this.isAddRes = true
      if (node.shareServer) {
        this.isAddRes = false
      }
    },
    seekResData(num) {
      this.isSearch = true
      let obj = {
        page: num,
        limit: this.pageLimit,
        never: this.isShowChild ? -1 : 0,
        type: this.resActiveTab,
        seek: this.filterKey
      }
      if (this.tabIndex === 2) {
        obj.tab = 'alarmHelp'
      }
      this.getResourceByType(obj)
        .then(suc => {})
        .catch(err => {
          console.log('getResourceByType error: ' + err)
          this.warningMsg(err)
        })
    },
    getResData(num, cb, ops) {
      let query = {
        page: num,
        limit: this.pageLimit,
        never: 0,
        type: this.resActiveTab,
        seek: ''
      }
      if (ops) {
        query.tab = ops
      }
      this.isShowChild && (query.never = -1)
      this.tabIndex === 1 && (query.rtsp = 1)
      this.getResourceByType(query)
        .then(suc => {
          if (cb) {
            cb(suc)
          }
          this.getResourceCount()
            .then(suc => {
              let data = suc.data
              this.resTabs[0].number = data.videoCount
              this.resTabs[2].number = data.alarmHelpCount
              this.isSynchronization = false
            })
            .catch(err => {
              console.log(err)
            })
        })
        .catch(err => {
          console.log('getResourceByType error: ' + err)
        })
    },
    // 点击选择子机构按钮刷新
    showChildRefresh() {
      let tab = this.tabIndex === 2 ? 'alarmHelp' : ''
      this.resTableFresh(undefined, tab)
    },
    resFreshPageDataFn() {
      let tab = this.tabIndex === 2 ? 'alarmHelp' : ''
      this.resTableFresh(suc => {
        if (suc.status === 200) {
          this.successMsg('数据刷新成功')
        } else {
          this.successMsg('数据刷新失败')
        }
      }, tab)
    },
    // 页面刷新获取当前页码
    resTableFresh(cb, ops) {
      this.getResData(this.pageSelect, cb, ops)
      this.filterKey = ''
      this.isResChecked = false
      this.resSelectIds = []
      this.selectedOperate = []
    },
    resTabClick(data) {
      this.tabIndex = data.index
      this.resAddOpen()
      let tab = ''
      this.resActiveTab = data.obj.value
      if (data.obj.title === '视频通道') {
        this.tableColumns = this.resColumns
      } else if (data.obj.title === 'rtsp流配置') {
        this.tableColumns = this.rtspColumns
      } else if (data.obj.title === '报警求助设备') {
        this.tableColumns = this.alarmColums
        tab = 'alarmHelp'
      }
      this.isSearch = false
      this.getResData(1, undefined, tab)
      this.pageSelect = 1
      this.resSelectIds = []
      this.selectedOperate = []
    },
    // 页码改变
    changeResPage(n) {
      // 报警输出与报警输入数组合并
      let tab = this.tabIndex === 2 ? 'alarmHelp' : ''
      if (this.isSearch) {
        this.seekResData(n)
      } else {
        this.getResData(n, undefined, tab)
      }
      this.pageSelect = n
    },
    // 切换每页条数时的回调
    pageSizeChange(size) {
      this.pageLimit = size
      this.changeResPage(1)
    },
    // 资源添加，内部checkbox选择其他机构的方法
    toggleResTree() {
      let index = this.tabIndex // tab标签ID
      let getTree = index === 1 ? 'getRtspResourceTree' : 'getVideoResTree'
      let params = {
        all: this.isAllResTree,
        type: 0,
        orgtype: 0,
        bigtype: 0
      }
      if (index === 1) {
        params.rtsp = 0
      }
      this[getTree](params)
        .then(suc => {
          this.resAddTreeData = []
          this.resAddTreeData = toTreeData([suc])
        })
        .catch(err => {
          console.log(getTree + ' error: ' + err)
        })
    },
    resAddOpenFn() {
      this.resAddModal = true // 显示弹出层
      if (!this.resAddTreeData.length) {
        this.resAddOpen()
      }
    },
    resAddOpen() {
      let index = this.tabIndex // tab标签ID
      let getTree = ''
      let params = {
        all: false,
        intelligent: null,
        type: 0,
        orgtype: 0,
        bigtype: 0
      }
      switch (index) {
        case 0:
          getTree = 'getVideoResTree'
          params.all = false
          break
        case 1:
          getTree = 'getRtspResourceTree'
          params.all = true
          params.rtsp = 0
          break
        case 2:
          params.all = false
          getTree = 'getVideoResTree'
          params.tab = 'alarmHelp'
          break
      }
      this.resAddTreeData = []
      this.isAllResTree = false
      this.modalloading = true // 保存按钮 多次点击，状态设置
      this[getTree](params)
        .then(suc => {
          this.resAddTreeData = toTreeData([suc])
          this.modalloading = false
          if (index === 1) {
            rtspFn(suc)
          }
        })
        .catch(err => {
          console.log(getTree + 'error: ' + err)
        })
      function rtspFn(data) {
        let orgId = data._id
        this.getRtspCfg().then(suc => {
          this.rtspcountAll = suc.rtspcount
        })
        this.getRootRescounts({ type: this.resActiveTab, oid: orgId, never: -1, rtsp: 1, page: 1, limit: 100 })
          .then(suc => {
            this.rtspNumber = Number(suc.headers['x-bsc-count'])
            this.initialNumber = Number(suc.headers['x-bsc-count'])
          })
          .catch(err => {
            console.log('getResourceByType 813 error' + err)
          })
      }
    },
    resAddSave() {
      let index = this.tabIndex
      let rids = this.getSelectedDeepIds()
      let logIp = []
      let logName = []
      rids.forEach(item => {
        logName.push(item.name)
        logIp.push(item.ip)
      })
      this.recordLog({
        logType: '管理日志',
        module: '资源管理',
        operateName: '资源添加',
        operateContent: logName.join(','),
        target: this.tabTypeFn(),
        deviceIp: logIp.join(',')
      })
      if (rids.length > 0) {
        this.modalloading = true
        if (index === 1) {
          if (this.rtspcountAll >= this.rtspNumber) {
            this.getUnusedRtspData(rids)
              .then(obj => {
                this.addResourceRtsp(obj.data)
                  .then(suc => {
                    this.successMsg('资源rtsp流添加成功')
                    this.modalloading = false
                    this.resAddModal = false
                    this.rtspCheckNumber = 0
                    this.resAddOpen()
                    this.resTableFresh()
                  })
                  .catch(err => {
                    this.modalloading = false
                    console.log('saveResourceToOrg error: ' + err)
                    this.errorMsg(err)
                  })
              })
              .catch(err => {
                this.errorMsg(err)
              })
          } else {
            this.errorMsg('勾选的超过了剩余的rtsp流数量')
          }
        } else {
          this.saveResourceToOrg(rids)
            .then(suc => {
              this.successMsg(index === 2 ? '报警求助设备添加成功' : '资源分配成功')
              this.modalloading = false
              this.resAddModal = false
              if (index === 2) {
                this.rtspCheckNumber = 0
              }
              this.resAddOpen()
              this.resTableFresh(undefined, index === 2 ? 'alarmHelp' : '')
            })
            .catch(err => {
              this.modalloading = false
              this.resAddModal = false
              this.errorMsg(err)
            })
        }
      } else {
        this.resAddCancel()
        return this.warningMsg('请选择资源')
      }
    },
    resAddCancel() {
      this.resAddModal = false
      this.rtspCheckNumber = 0
      // this.resAddTreeData = []
    },
    selectResRow(sels) {
      if (sels.length === 0) {
        this.isResChecked = false
      } else {
        this.isResChecked = true
      }
      this.isSynchronization = false
      this.resSelectIds = []
      this.selectedOperate = []
      for (let sel of sels) {
        this.selectedOperate.push(sel)
        this.resSelectIds.push(sel._id)
        if (sel.shareServer) {
          this.isResChecked = false
          this.isSynchronization = true
        }
      }
    },
    resMoveOpen() {
      this.modalloading = false
      if (this.resSelectIds.length === 0) {
        this.warningMsg('请选择所需要移动的资源')
      } else {
        this.resMoveModal = true
      }
      this.resMoveTreeData = JSON.parse(JSON.stringify(this.orgTreeData))
    },
    selectMoveOrg(node) {
      console.log(node)
      this.resMoveOrgId = node._id
      this.selectChecked = node
    },
    resMoveSave() {
      this.modalloading = true
      if (this.selectChecked.shareServer) {
        this.warningMsg('该机构下不支持移入')
        this.modalloading = false
      } else {
        this.changeResourceOrg({
          arrId: this.resSelectIds,
          oid: this.resMoveOrgId
        })
          .then(suc => {
            this.successMsg('资源移动成功')
            this.modalloading = false
            this.resMoveModal = false
            this.resTableFresh(undefined, this.tabIndex === 2 ? 'alarmHelp' : '')
          })
          .catch(err => {
            this.modalloading = false
            console.log('changeResourceOrg error: ' + err)
            this.errorMsg(err)
          })
      }
    },
    resMoveCancel() {
      this.resMoveModal = false
    },
    resEditOpen() {
      if (this.resSelectIds.length !== 1) {
        this.$Modal.confirm({
          title: '提示',
          content: '一次只能修改一个！'
        })
      } else {
        this.resActiceId = this.resSelectIds[0]
        this.tabIndex === 0 && this.$refs.resEditForm.resetFields()
        this.tabIndex === 1 && this.$refs.rtspEditForm.resetFields()
        this.delayrecordTip = ''
        this.precordTip = ''
        // 此处同可直接获取页面初次加载的数据
        this.getSingleResource(this.resActiceId)
          .then(suc => {
            if (this.tabIndex === 0) {
              this.resEditFormData = JSON.parse(JSON.stringify(suc))
              if (!this.resEditFormData.stream) {
                this.resEditFormData.stream = 'main'
              }
              if (!this.resEditFormData.monitortype) {
                this.resEditFormData.monitortype = 0
              }
              if (suc.eid) {
                this.resEditFormInfo.deviceName = suc.eid.name
              }
              this.resEditFormInfo.orgName = this.orgActiveName
              this.resEditModal = true
            } else if (this.tabIndex === 1) {
              const rtspMain = suc.rtsp.main ? suc.rtsp.main : suc.rtsp.sub
              this.rtspEditFormData = {
                rtspCount: rtspMain.split('=').pop(),
                rtspString: rtspMain.split('=').shift() + '='
              }
              this.rtspEditModal = true
            }
          })
          .catch(err => {
            console.log('getSingleResource error: ' + err)
          })
      }
    },
    resEditSave() {
      this.tabIndex === 0 &&
        this.$refs.resEditForm.validate(valid => {
          if (valid && this.precordTip === '' && this.delayrecordTip === '') {
            this.modalloading = true
            const obj = {
              id: this.resActiceId,
              form: this.resEditFormData
            }
            this.recordLog({
              logType: '管理日志',
              module: '资源管理',
              operateName: '资源修改',
              operateContent: this.resEditFormData.name,
              target: this.tabTypeFn(),
              deviceIp: this.resEditFormData.ip
            })
            this.saveResourceInfo(obj)
              .then(suc => {
                this.successMsg('资源信息修改成功')
                this.modalloading = false
                this.resEditModal = false
                this.resTableFresh()
              })
              .catch(err => {
                this.modalloading = false
                console.log('saveResourceInfo error: ' + err)
                this.errorMsg(err)
              })
          }
        })
      this.tabIndex === 1 &&
        this.$refs.rtspEditForm.validate(valid => {
          if (valid) {
            this.saveRtspInfo({
              id: this.resActiceId,
              form: {
                rtsp: {
                  main: this.rtspEditFormData.rtspString + this.rtspEditFormData.rtspCount,
                  sub: ''
                }
              }
            })
              .then(suc => {
                this.successMsg('rtsp流修改成功')
                this.modalloading = false
                this.rtspEditModal = false
                this.resTableFresh()
              })
              .catch(err => {
                this.modalloading = false
                console.log('saveResourceInfo error: ' + err)
                this.errorMsg(err)
              })
          }
        })
    },
    resEditCancel() {
      this.resEditModal = false
      setTimeout(() => {
        this.$refs.resEditForm.resetFields()
      }, 500)
    },
    rtspEditCancel() {
      this.rtspEditModal = false
      setTimeout(() => {
        this.$refs.rtspEditForm.resetFields()
      }, 500)
    },
    resDelOpen() {
      if (this.resSelectIds.length === 0) {
        this.warningMsg('请选择所需要删除的资源')
      } else {
        this.createResDelModel()
      }
    },
    createResDelModel() {
      this.$Modal.confirm({
        title: '提示',
        content: '<p>确认删除所选资源吗？</p>',
        onOk: () => {
          if (this.tabIndex === 0) {
            this.resDelSave()
          } else if (this.tabIndex === 1) {
            this.rtspDelSave()
          } else if (this.tabIndex === 2) {
            this.resDelSave('alarmHelp')
          }
        },
        onCancel: () => {}
      })
    },
    resDelSave(ops) {
      let obj = {
        arrId: this.resSelectIds,
        type: 0
      }
      let logIp = []
      let logName = []
      this.selectedOperate.forEach(item => {
        logName.push(item.name)
        logIp.push(item.ip)
      })
      this.recordLog({
        logType: '管理日志',
        module: '资源管理',
        operateName: '资源删除',
        operateContent: logName.join(','),
        target: this.tabTypeFn(),
        deviceIp: logIp.join(',')
      })
      this.unbindResource(obj)
        .then(suc => {
          this.resAddOpen()
          this.successMsg('删除成功')
          this.resTableFresh(undefined, ops)
        })
        .catch(err => {
          console.log('unbindResource error: ' + err)
          this.errorMsg(err)
        })
    },
    rtspDelSave() {
      this.delResourceRtsp({ arrId: this.resSelectIds })
        .then(suc => {
          this.successMsg('删除成功')
          this.resTableFresh()
        })
        .catch(err => {
          console.log('rtspDelSave error: ' + err)
          this.errorMsg(err)
        })
    },
    // 同步通道名称
    selectChannelName() {
      if (this.resSelectIds.length === 0) {
        this.warningMsg('请选择所需要同步的资源')
      } else {
        const contentText = '确认同步所选资源名称吗?'
        this.$Modal.confirm({
          title: '提示',
          content: contentText,
          onOk: () => {
            this.channelNameSync({
              syncTtype: this.channelNameSyncSelect,
              arrId: this.resSelectIds
            })
              .then(suc => {
                this.successMsg('同步名称成功')
                this.resTableFresh()
              })
              .catch(err => {
                console.log('channelNameSync error: ' + err)
                this.errorMsg(err)
              })
          },
          onCancel: () => {}
        })
      }
    },
    // 批量设置主码流子码流
    selectBatchStream() {
      if (this.resSelectIds.length === 0) {
        this.warningMsg('请选择所需要设置码流的资源')
      } else {
        const contentText = '确认更改为所选资源码流吗?'
        this.$Modal.confirm({
          title: '提示',
          content: contentText,
          onOk: () => {
            this.batchSetStreams({
              streamType: this.batchStreamSelect,
              arrId: this.resSelectIds
            })
              .then(suc => {
                this.successMsg('码流设置成功')
                this.resTableFresh(undefined, this.tabIndex === 2 ? 'alarmHelp' : '')
              })
              .catch(err => {
                console.log('batchSetStreams error: ' + err)
                this.errorMsg(err)
              })
          },
          onCancel: () => {}
        })
      }
    },
    // 配置rtsp流
    rtspCfgOpen() {
      this.rtspCfgModalShow = true
      this.getRtspCfg()
        .then(suc => {
          if (suc) {
            this.rtspFormData = JSON.parse(JSON.stringify(suc))
          } else {
            this.rtspFormData = {
              password: '123456',
              port: 554,
              rtspcount: 0,
              url: '0.0.0.0',
              username: 'Admin'
            }
          }
        })
        .catch(err => {
          this.errorMsg(err)
        })
    },
    editRtspServer(data, name) {
      this.editRtspCfg(data)
        .then(suc => {
          this.rtspCfgModalShow = false
          this.successMsg('rtsp流服务器配置成功')
          this.$refs['RtspCfg'].$refs[name].resetFields()
        })
        .catch(err => {
          this.errorMsg(err)
        })
    },
    rtspCfgCancel(name) {
      this.rtspCfgModalShow = false
      this.$refs['RtspCfg'].$refs[name].resetFields()
    },
    getSelectedDeepIds() {
      const arr = this.$refs.resTree.getSelectedNodes()
      let selectNode = []
      arr.forEach(item => {
        if (item.eid) {
          selectNode.push(item)
        }
      })
      return selectNode
    },
    // trsp复选tree变化时计算出剩余数
    treeCheckChange() {
      let checkRes = this.getSelectedDeepIds()
      this.rtspCheckNumber = checkRes.length
      this.rtspNumber = this.initialNumber + checkRes.length
    },
    tabTypeFn() {
      return this.tabIndex === 0 ? '视频通道' : this.tabIndex === 2 ? '报警求助通道' : 'rtsp流配置'
    },
    resizefun() {
      this.tableHeight = this.$refs['tableBox'].offsetHeight
    }
  },
  created() {
    // this.resAddOpen()
    this.getRootId()
    for (let i = 0; i < this.resTabs.length; i++) {
      if (!this.resTabs[i].isHide) {
        if (this.resTabs[i].title === '视频通道') {
          this.tableColumns = this.resColumns
        } else if (this.resTabs[i].title === 'rtsp流配置') {
          this.tableColumns = this.rtspColumns
        } else if (this.resTabs[i].title === '报警求助设备') {
          this.tableColumns = this.alarmColums
        }
      }
      break
    }
  },
  mounted() {
    this.$refs['resTab'].$on('on-tab-click', this.resTabClick)
    this.tableHeight = this.$refs['tableBox'].offsetHeight
    window.addEventListener('resize', this.resizefun)
  },
  beforeDestroy() {
    this.$refs['resTab'].$off('on-tab-click')
    this.resMoveTreeData = null
    this.resEditFormData = null
    window.removeEventListener('resize', this.resizefun)
    this.resizefun = null
  }
}
</script>
<style>
.editModal .ivu-modal-body {
  padding-bottom: 0 !important;
}
</style>
<style scoped>
.bs-resource-manage {
  padding: 20px 0;
  width: 100%;
  height: 100%;
}

.resource-right-table {
  min-width: 1300px;
  flex: 1;
  display: flex;
  flex-direction: column;
  background: #1c3053;
}

.resource-right {
  height: 100%;
}

/*按钮和inpu框*/

.table-header-actions {
  background-color: #1c3054;
  margin: 0;
  padding: 12px 24px;
}

/*按钮和inpu框*/

.actions-btn {
  float: left;
}

.actions-search {
  float: right;
}

.actions-btn .ivu-btn {
  margin-right: 8px;
}

.actions-btn .ivu-select {
  margin-right: 8px;
}

/* table样式 */

.table-relative {
  position: relative;
  flex: 1;
  height: calc(100% - 135px);
}
.table-relative /deep/ tr th:first-child .ivu-table-cell {
  padding-left: 24px !important;
}
.table-relative /deep/ tr td:first-child .ivu-table-cell {
  padding-left: 24px !important;
}
.table-footer {
  position: relative;
}
.footer-cont {
  position: absolute;
  right: 0;
  top: 3px;
}

/*修改弹出框内容样式*/

.res-add-model {
  padding: 0px 10px;
}

.res-edit-form {
  padding: 0px 10px;
}

.res-edit-form .check-input .ivu-col-span-8 {
  width: 100px;
  height: 32px;
  line-height: 32px;
}

.res-edit-form .check-input .ivu-col-span-16 {
  width: 286px;
  height: 56px;
}

.formTip {
  display: inline-block;
  color: red;
  height: 24px;
  line-height: 24px;
}

.check-input .ivu-col-span-16 input {
  display: inline-block;
  width: 100%;
  height: 32px;
  line-height: 1.5;
  padding: 4px 7px;
  font-size: 12px;
  border: 1px solid #5676a9;
  border-radius: 4px;
  color: #ffffff;
  background-color: #1c3053;
  cursor: text;
  outline: none;
}

.check-input .ivu-col-span-16 input:hover {
  border: 1px solid #33b7e9;
}

.check-input .ivu-col-span-16 input:focus {
  border: 1px solid #33b7e9;
}

.check-input .ivu-col-span-16 .redBorder {
  border: 1px solid red;
}

.check-input .ivu-col-span-16 .redBorder:hover {
  border: 1px solid red;
}

.check-input .ivu-col-span-16 .redBorder:focus {
  border: 1px solid red;
}

.res-model-tree {
  height: 400px;
  width: 400px;
  margin-top: 20px;
  overflow: hidden;
}

.clear:after {
  content: '';
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}
</style>
