<template>
  <div class="video-container">
    <video-frame ref="frame" pluginType="record" :pluginCount="16" :clickInit="false" :defaultShowscreen="1" @update:state="setState" :slotHeight="56" @playEnd="finishPlay" @setShowscreen="num => $emit('screen', selectedShowscreen = num)" @activeChange="avtiveChange" @changePluginData="changePluginData" :bgColor="'#404040'" :fullScreenflag="fullScreenflag" :showBtn="false">
      <div class="playback">
        <!-- <div class="video-bottom-bottom" v-show="showscreenShow||(_isPlay&&(showmodeShow||showSpeed))"></div>
        <div class="video-bottom-jiexian"></div> -->
        <div style="display: inline-block" class="leftIcon">

          <i class="icon iconfont" :class="[_isPlay? 'icon-pause': 'icon-play', state.isStopped? 'disable' : '']" :title="[_isPlay? '暂停': '播放']" @click="_isPlay? pause(): resume()"></i>

          <i class="icon iconfont icon-stop" :class="[btnStopDisable? 'disable' : '']" @click="stop" title="停止"></i>
          <i class="icon iconfont icon-stop-all" @click="stopAll" title="停止全部"></i>
          <i class="icon iconfont icon-frame-forward" :class="{'disable': state.isStopped }" @click="setPlayerMode" title="逐帧进"></i>

          <div class="dp-con" @mouseenter.stop="(hoverSpeed=selectedSpeed)&&(showSpeed=true)&&(segmentModal=false)" @mouseleave="speedMouseleave">
            <i class="icon iconfont" :class="[!_isPlay?'disable':'',speedIcon]" title="播放速度" style="font-size:23px;"></i>
            <ul v-show="showSpeed&&_isPlay" class="iconspeed" style="z-index:999">
              <!-- <ul v-show="showSpeed" class="iconspeed"> -->
              <i></i>
              <li v-for="(speed, i) in speedList" :key='i' @mouseenter.stop="hoverSpeed=speed.label" @click="clickSpeed(speed)" :class="{active: speed.label===hoverSpeed}">{{speed.label}}</li>
            </ul>
          </div>

          <i v-if="false" class="icon iconfont icon-Izhen" :class="{'disable' :!state.isPlay || selectedSpeed !== '16'}" @click="setIMode" title="I帧"></i>

          <!-- <div @mouseenter.stop=" isasyn && (showVolume = true)" @mouseleave="showVolume = false" style="display:inline-block;">
            <i class="icon iconfont" :class="{'disable' :!_isPlay||isSync, 'icon-volume': volume, 'icon-mute': clickMute|| !volume}" @click="clickOpenSound&&(clickMute=!clickMute)"></i>

            <div class="slider-box" style="width:80px;display:inline-block;vertical-align: top;" :style="{opacity: showVolume?1:0 }" @mouseenter.stop v-if="!showSpeed">
              <slider color="#20adff" v-model="volume" @change="_setVolume" :disabled="!clickOpenSound"></slider>
            </div>
          </div> -->

          <div style="display:inline-block;">

            <i class="icon iconfont" title="音量" :class="[!state.isVolumeOpen? 'icon-mute': 'icon-volume',_isPlay&&isasyn?'':'disable']" @click="!state.isStopped ? (state.isVolumeOpen? _closeSound(): _openSound()) : ''"></i>

            <div class="slider-box" style="width:80px;display:inline-block;vertical-align: top;" :style="{opacity: state.isVolumeOpen?1:0 }" @mouseenter.stop v-if="!showSpeed">
              <slider color="#20adff" v-model="volume" @change="_setVolume" :disabled="!clickOpenSound"></slider>
            </div>
          </div>

        </div>

        <div style="float:right">
          <!-- 分段播放功能已实现 -->
          <div class="dp-con">
            <i class="icon iconfont" :class="{'icon-tuichufenduanhuifang': $parent.isSegment, 'icon-fenduanbofang': !$parent.isSegment}" @click="segmentPlay" :title="$parent.isSegment ? '关闭分段回放' : '分段回放'"></i>
            <ul v-show="segmentModal" class="segPlay">
              <i></i>
              <li>
                <TimePicker
                confirm
                type="timerange"
                :value="segmentTime"
                placement="bottom-end"
                size="small"
                format="HH:mm"
                placeholder="Select time"
                @on-change="segmentTimeChange"
                style="width: 120px"></TimePicker>
              </li>
              <li v-for="segment in segmentList" :key="'segment' + segment.value" @mouseenter="hoverShowscreen=segment.value" @mouseleave='hoverShowscreen=segNum' @click="segmentSelectScreen(segment.value)" :class="{active: segment.value===hoverShowscreen}">{{segment.label}}</li>
            </ul>
          </div>
          <!-- 剪切下载功能已实现 -->
          <div class="dp-con">
            <i class="icon iconfont icon-jianqiexiazai" :class="{'disable' :!_isPlay|| !isasyn}" @click="cutDownload" title="剪切"></i>
            <ul v-show="cutModal" class="cutDown">
              <i></i>
              <li @click="cutModalSave">确认</li>
              <li @click="cutModalCannel">放弃</li>
            </ul>
          </div>

          <i class="icon iconfont icon-screenshot" :class="{'disable' :!_isPlay|| !isasyn}" @click="getCapture" title="截图"></i>

          <i class="icon iconfont icon-xiazai" :class="{'disable' :!_isPlay|| !isasyn}" title="下载" @click="openDownload"></i>

          <i class="icon iconfont" @click="boost" :class="[!state.isBoost? 'icon-nk-close': 'icon-niaokan',btnBoostDisable? 'disable': '']" title="鸟瞰"></i>

          <div class="dp-con" @mouseenter="showTowall=true" @mouseleave="showTowall=false">
            <i class="icon iconfont icon-tv-wall" :class="{'disable' :!_isPlay || !isasyn}" title="快速上墙"></i>
            <div v-show="showTowall&&_isPlay&&isasyn" class="showTowall">
              <iframe v-if="showTowall&&_isPlay&&isasyn" style="margin-left:-100%;"></iframe>
              <QuickToWall class="" @checkWall="checkWall" :isPlayback="true" ref="toWall" :camera="id"></QuickToWall>
            </div>
          </div>

          <i class="icon iconfont icon-sign" :class="[ (!_isPlay&&!state.isStopped&&!isNVR) && isasyn ? '': 'disable']" title="标记" @click="signClick"></i>

          <!--<i class="icon iconfont icon-full-screen" @click="fullscreen" :class="{'disable' :!state.isPlay}"></i>-->

          <!--伴音-->
          <!-- <i class="icon iconfont" title="伴音" :class="[state.isVolumeOpen? 'icon-sound-close': 'icon-sound',_isPlay&&isasyn?'':'disable']" @click="!state.isStopped ? (state.isVolumeOpen? _closeSound(): _openSound()) : ''"></i> -->

          <div class="dp-con" @mouseenter="showmodeShow=true" @mouseleave="(hoverShowmode=selectedShowmode)&&(showmodeShow=false)">
            <i class="icon iconfont icon-display-scale" :class="{'disable' :!_isPlay}" title="窗口适配"></i>
            <ul v-show="showmodeShow&&_isPlay" class="display-scale">
              <!-- <ul class="display-scale"> -->
              <i></i>
              <li v-for="mode in showmodeList" :key='mode.value' @mouseenter="hoverShowmode=mode.value" @click="clickShowmode(mode)" :class="{active: mode.value===hoverShowmode}">{{mode.label}}</li>

            </ul>
          </div>

          <div class="dp-con" @mouseenter="(hoverShowscreen=selectedShowscreen)&&(showscreenShow=true)" @mouseleave="showscreenShow=false">
            <i class="icon iconfont icon-multi-screen" title="画面分割"></i>
            <ul v-show="showscreenShow">
              <!-- <ul> -->
              <i></i>
              <li v-for="screen in showscreenList" :key="screen.value" @mouseenter="hoverShowscreen=screen.value" @click="setShowscreen(screen.value)" :class="{active: screen.value===hoverShowscreen}">{{screen.label}}</li>

            </ul>
          </div>

          <i class="icon iconfont icon-full-screen" :class="{'disable' :!_isPlay|| !isasyn}" title="全屏" @click="overlayScreen"></i>

        </div>
      </div>
    </video-frame>

    <!--标记弹窗-->
    <div class="sign" v-if="openSign" @click.stop :mask-closable="false">
      <iframe v-if="openSign"></iframe>
      <div class="signBox">
        <div class="header">
          <div class="title">标记</div>
          <div class="flag" @click='signCancel'>
            <Icon type="close"></Icon>
          </div>
        </div>

        <div class="content">
          <Form ref="signForm" :model="signForm" :rules="signRules" :label-width="100">
            <!-- <div class="condition"> -->
            <!-- <span>标记名称：</span> -->
            <FormItem label="标记名称:" prop="signName">
              <Input v-model="signForm.signName" :maxlength="32" placeholder="请输入..." style="width: 180px" size="small" />
            </FormItem>
            <!-- </div> -->
            <!-- <div class="condition"> -->
            <!-- <span>标记内容：</span> -->
            <FormItem label="标记内容:" prop="signContent">
              <Input v-model="signForm.signContent" :maxlength="128" type="textarea" placeholder="请输入..." style="width: 180px" size="small" />
            </FormItem>
            <!-- </div> -->
          </Form>
        </div>

        <div class="signBtnBox">
          <Button type="ghost" @click='signCancel'>取消</Button>
          <Button type="primary" @click='signSave'>保存</Button>
        </div>
      </div>
    </div>

    <Modal v-model="showDownload" title="下载" :transition-names="[]" :mask-closable="false" @on-cancel="downCloce">
      <iframe style="left:0;top:0" v-if="showDownload"></iframe>
      <div style="height:210px;position:relative">
        选择下载时间段:
        <div style="height: 30px;margin-top:30px;line-height:30px;">
          <span style='vertical-align:top;'>开始时间</span>
          <BStimePicker style='display:inline-block' v-if="showDownload" :datetime='startTime' @timeChange='sTimeChange' :width='180' :height='30'></BStimePicker>
          <!-- <Time-picker v-if="showDownload" style="width:180px;display:inline-block" type="time" v-model="startTime" placeholder="选择时间" :editable="false"></Time-picker> -->
          <span style='vertical-align:top;'>结束时间</span>
          <BStimePicker style='display:inline-block' v-if="showDownload" :datetime='endTime' @timeChange='eTimeChange' :width='180' :height='30'></BStimePicker>
          <!-- <Time-picker v-if="showDownload" style="width:180px;display:inline-block" type="time" v-model="endTime" placeholder="选择时间" :editable="false"></Time-picker> -->
        </div>
      </div>
      <div slot="footer" style="position:relative">
        <Button type="ghost" @click='downCloce'>取消</Button>
        <Button type="primary" @click='downloadSave'>确定</Button>
      </div>
    </Modal>
    <div class="fs-buttons">
      <div class="fs-head"></div>
      <i class="icon iconfont" :class="[_isPlay? 'icon-pause': 'icon-play', state.isStopped? 'disable' : '']" :title="[_isPlay? '暂停': '播放']" @click="_isPlay? pause(): resume()"></i>
      <i class="icon iconfont icon-stop" :class="{disable: !_isPlay}" @click="stop" title="停止"></i>
      <i class="icon iconfont icon-screenshot" :class="{'disable' :!_isPlay|| !isasyn}" @click="getCapture" title="截图"></i>
      <i class="icon iconfont" @click="boost" :class="[!state.isBoost? 'icon-nk-close': 'icon-niaokan',btnBoostDisable? 'disable': '']" title="鸟瞰"></i>
      <i class="icon iconfont icon-frame-forward" :class="{'disable': state.isStopped }" @click="setPlayerMode" title="逐帧进"></i>
      <i class="icon iconfont" :class="[!_isPlay?'disable':'',speedIcon]" @click="showFsSpeed =!showFsSpeed;showFsVolume=false" title="播放速度" style="font-size:23px;"></i>

      <ul v-show="_isPlay&&showFsSpeed" class="fs-speed">
        <li v-for="(speed, i) in speedList" :key='i' @click="clickSpeed(speed)" :class="{active: speed.label===selectedSpeed}">{{speed.label}}x</li>
      </ul>

      <i class="icon iconfont" title="音量" :class="[!state.isVolumeOpen? 'icon-mute': 'icon-volume',_isPlay?'':'disable']" @click="showFsSpeed=false;showFsVolume=!showFsVolume;(state.isVolumeOpen? _closeSound(): _openSound())"></i>

      <div class="fs-slider-box" :style="{bottom:showFsVolume&&state.isVolumeOpen?0:'-50px'}">
        <slider color="#20adff" v-model="volume" @change="_setVolume" :disabled="!clickOpenSound"></slider>
      </div>

    </div>
    <div class="fs-buttons-right">
      <div class="fs-head"></div>
      <!-- <i class="icon iconfont icon-exit-full-screen" style="margin-left:20px" @click="exitFullscreen();$root.$el.classList.remove('fs')" title="退出全屏"></i> -->
    </div>
  </div>
</template>
<script>
import Slider from 'components/Slider'
import QuickToWall from '../../tvwall/QuickToWall'
import { mapState, mapMutations, mapActions } from 'vuex'
import { AV_RECORD_SIGN, AV_NVRRECORD_OPEN, GB_AV_NVRRECORD_OPEN } from '../../../../http/video.api'
export default {
  components: {
    Slider,
    QuickToWall
  },
  data() {
    return {
      volume: 1,
      showVolume: false,
      showDownload: false,
      activedIndex: 0,
      startTime: '00:00:00',
      endTime: '00:00:00',
      hideSlider: true,
      clickMute: false,
      clickOpenSound: false,
      showscreenList: [
        { value: 1, label: '单画面' },
        { value: 4, label: '4画面' },
        { value: 9, label: '9画面' }
        // { value: 16, label: '16画面' }
      ],
      showscreenShow: false,
      selectedShowscreen: 1,
      hoverShowscreen: 4,
      segNum: 4,
      showmodeList: [
        {
          label: '原始比列',
          value: 1,
          item: { w: 1, h: 1, auto: true }
        },
        {
          label: '自适应',
          value: 2,
          item: { w: 0, h: 0, auto: false }
        }
        // {
        //   label: '4:3',
        //   value: 3,
        //   item: { w: 4, h: 3, auto: true }
        // },
        // {
        //   label: '16:9',
        //   value: 4,
        //   item: { w: 16, h: 9, auto: true }
        // }
      ],
      isSelect: true,
      showmodeShow: false,
      selectedShowmode: 2,
      hoverShowmode: 2,
      showSpeed: false,
      speedList: [
        // 新加流控协议字段 1：暂停，2：停止，3 一倍速 4 二倍速 5 四倍速 6 八倍速 7 16倍速 8 1/2倍速 9 1/4倍速  10 1/8倍速 11 1/16倍速
        { value: { nRate: 1, nScale: 16 }, label: '1/16', icon: 'icon-1-16', control: 11 },
        { value: { nRate: 1, nScale: 8 }, label: '1/8', icon: 'icon-1-8', control: 10 },
        { value: { nRate: 1, nScale: 4 }, label: '1/4', icon: 'icon-1-4', control: 9 },
        { value: { nRate: 1, nScale: 2 }, label: '1/2', icon: 'icon-1-2', control: 8 },
        { value: { nRate: 1, nScale: 1 }, label: '1', icon: 'icon-speed', control: 3 },
        { value: { nRate: 2, nScale: 1 }, label: '2', icon: 'icon-2', control: 4 },
        { value: { nRate: 4, nScale: 1 }, label: '4', icon: 'icon-4', control: 5 },
        { value: { nRate: 8, nScale: 1 }, label: '8', icon: 'icon-8', control: 6 },
        { value: { nRate: 16, nScale: 1 }, label: '16', icon: 'icon-16', control: 7 }
      ],
      selectedSpeed: '1',
      speedIcon: 'icon-speed',
      hoverSpeed: '1',
      state: {
        isPlay: '',
        isStopped: '',
        isBoost: '',
        isRecording: '',
        isVolumeOpen: '',
        isFrame: '',
        volumeValue: 0,
        speed: '1',
        streamId: '',
        scale: '自适应'
      },
      openSign: false,
      signContent: '',
      signName: '',
      showTowall: false,
      activePluginData: {},
      id: '',
      picType: 1,
      timeLine: null,
      // 是否全屏
      fullScreenflag: false,
      formatDate: new Date(), // 用于下载的日期
      signForm: {
        signName: '',
        signContent: ''
      },
      signRules: {
        signName: [
          {
            required: true,
            message: '标记名称不能为空',
            trigger: 'blur'
          }
        ]
      },
      wallData: {},
      showFsSpeed: false,
      showFsVolume: false,
      cutModal: false,
      cutDate: {},
      segmentList: [
        // { value: 1, label: '单画面' },
        { value: 4, label: '4画面' },
        { value: 9, label: '9画面' },
        { value: 16, label: '16画面' }
      ],
      segmentModal: false,
      segmentTime: ['00:00', '23:59']
    }
  },
  props: {},
  filters: {
    specialChar(v) {
      return v.replace(/[\-\+\ \—\_\,\!\|\~\`\(\)\#\$\%\^\&\*\{\}\:\;\"\L\<\>\?]/g, '') // eslint-disable-line
    }
  },
  computed: {
    ...mapState({
      curNode: ({ videoOrg }) => videoOrg.curNode,
      parameters: ({ platform }) => platform.parameters,
      strFilter: ({ videoOrg }) => videoOrg.strFilter,
      isSync: ({ playback }) => playback.isSync,
      resourceList: ({ playback }) => playback.resourceList,
      nvrTab: ({ playback }) => playback.nvrTab,
      isNVR: ({ playback }) => playback.isNVR
      // authInfo: ({ user }) => user.securityMonitorrole.playback.normalPlayback
    }),
    authInfo() {
      return {
        downLoad: true,
        screenshot: true
      }
    },
    btnDownloadDisable() {
      return !this.authInfo.downLoad || !this._isPlay || !this.isasyn
    },
    btnScreenshotDisable() {
      return !this.authInfo.screenshot || !this._isPlay || !this.isasyn
    },
    btnBoostDisable() {
      return !(this._isPlay && this.isasyn)
    },
    btnStopDisable() {
      return !this.resourceList[this.activedIndex]
    },
    _isPlay() {
      if (this.isasyn) {
        return this.state.isPlay && !this.state.isFrame && !this.state.isStopped
      } else {
        return this.state.isPlay && !this.state.isFrame
      }
    },
    isasyn() {
      return !this.isSync
    },
    plugin() {
      return this.$refs.frame
    },
    plugins() {
      return this.$refs.frame.plugins
    }
  },
  watch: {
    'state.volumeValue'(v) {
      this.volume = v
    },
    'state.speed'(val) {
      this.selectedSpeed = val
      if (val === '1') {
        this.speedIcon = 'icon-speed'
        return
      }
      let speedIcon = 'icon'
      val.split('/').forEach(item => {
        speedIcon += '-' + item
      })
      this.speedIcon = speedIcon
    },
    'state.scale'(val) {
      this.selectedShowmode = val === '自适应' ? 1 : 2
    },
    '$parent.showThumb'(val) {
      this.segNum = val
    },
    volume() {
      this.clickMute = false
    },
    clickMute(isMute) {
      if (!this._isPlay) {
        return
      }
      if (isMute) {
        this.closeSound()
      } else {
        this.openSound()
      }
    },
    isSync(isSync) {
      if (!isSync) {
        this.state = this.tempState || this.state
      }
    },
    nvrTab(s) {
      if (s && this.selectedShowscreen > 4) {
        this.stopAll()
        this.setShowscreen(4)
        this.warningMsg('前端回放最多支持4画面')
      }
    },
    openSign(isO) {
      if (isO) {
        this.$parent.disabledTimeline = true
      } else {
        this.$parent.disabledTimeline = false
      }
    }
    // showTowall(s) {
    //   if (this.showTowall && this._isPlay && this.isasyn) {
    //     this.id = this.resourceList[this.plugin.activedIndex].res
    //   }
    // }
  },
  methods: {
    ...mapActions([
      'recordDump',
      'backupDownloadList',
      'vodCtrl',
      'vodOpen',
      'getTVList',
      'getMonitorList',
      'gbPlayBackCtrl',
      'recordLog',
      'gbRecordOpen',
      'getPlatformID',
      'getVideoConf'
    ]),
    ...mapMutations(['SET_RESOURCE', 'CLEAR_RESOURCE', 'ADD_DOWNLOADLIST']),
    speedMouseleave() {
      // 速度鼠标移出
      ;(this.hoverSpeed = this.selectedSpeed) && (this.showSpeed = false)
      if (this.$parent.isSegment) {
        this.segmentModal = true
      }
    },
    setState(state) {
      if (this.isSync) {
        // 同步状态暂存当前状态 如果切换成异步了 需要顶替上
        this.tempState = state
      } else {
        this.state = state
      }
    },
    finishPlay(index) {
      this.$emit('playEnd', index)
    },
    sTimeChange(val) {
      this.startTime = val
      // console.log(this.startTime)
    },
    eTimeChange(val) {
      this.endTime = val
    },
    setShowscreen(v) {
      if (this.nvrTab && v > 4) {
        this.warningMsg('前端回放最大支持4画面')
        return
      }
      this.selectedShowscreen = v
      // this.showscreenShow = false
      if (this.plugin.activedIndex >= v) {
        this.plugin.activedIndex = 0
      }
      this.$emit('screen', v)
      this.plugin.setShowscreen(v)
    },
    setPluginType(type) {
      this.plugin.setPluginType(type)
    },
    getSyncPluginTime() {
      let time = 0
      this.plugins.forEach(plugin => {
        if (!plugin.pluginState.isStopped) {
          const res = JSON.parse(plugin.getPlayerCurTime())
          if (res.success) {
            time = res.msCur
          }
        }
      })
      return time
    },
    // 国标播放控制
    gbPlayCtrl({ type, speed, time, id, serverId }) {
      serverId = serverId || this.plugin.pluginData[this.plugin.activedIndex]
      if (!serverId) {
        return
      }
      this.gbPlayBackCtrl({
        ...serverId,
        playHandle: id || this.state.streamId,
        ctrlType: type || 1,
        speed: speed || eval(this.selectedSpeed),
        seekTime: time || parseInt(this.getPluginCurtime() / 1000)
      })
    },
    resume() {
      this.plugin.resume()
      this.wallCtrl(3)

      if (!this.isasyn) {
        this.state.isPlay = true
        this.plugins.forEach((plugin, index) => {
          if (plugin.pluginState.isStopped) {
            return
          }
          plugin.resume()
          if (plugin.pluginState.streamId) {
            // 如果是国标设备
            this.gbPlayCtrl({
              type: 1,
              id: plugin.pluginState.streamId,
              serverId: this.plugin.pluginData[index]
            })
          }
        })
        this.wallCtrlAll(3)
      } else {
        if (this.state.streamId) {
          // 如果是国标设备
          this.gbPlayCtrl({ type: 1 })
        }
      }
      this.$emit('resume')
    },
    pause() {
      this.plugin.pause()
      this.wallCtrl(1)
      if (!this.isasyn) {
        this.state.isPlay = false
        this.plugins.forEach((plugin, index) => {
          if (plugin.pluginState.isStopped) {
            return
          }
          plugin.pause()
          if (plugin.pluginState.streamId) {
            // 如果是国标设备
            this.gbPlayCtrl({
              type: 2,
              id: plugin.pluginState.streamId,
              serverId: this.plugin.pluginData[index]
            })
          }
        })
        this.wallCtrlAll(1)
      } else {
        if (this.state.streamId) {
          // 如果是国标设备
          this.gbPlayCtrl({ type: 2 })
        }
      }
      this.$emit('pause')
    },
    stop() {
      // if (!this.state.isPlay) return
      // const id = this.plugin.stop()
      // delete this.$parent.playbackList[id]
      // this.$parent.upRecordInfo()
      if (!this.isasyn) {
        this.stopAll()
        this.state.isPlay = false
      } else {
        this.$parent.$refs.timeLine.clearThumbQueue() // 清空切片请求队列
        const param = this.plugin.pluginData[this.plugin.activedIndex]
        if (param && param.queryParam) {
          this.$parent.deletePageRequest(param.queryParam.queryId) // 删除这次分页查询
        }
        this.wallCtrl(2)
        delete this.wallData[this.plugin.activedIndex]
        this.plugin.stop()
        const node = this.resourceList[this.plugin.activedIndex]
        this.setPlayLog({ ip: node.queryParam.devIp, name: node.name })
        this.SET_RESOURCE({
          index: this.plugin.activedIndex,
          item: null
        })
        this.cutModalCannel()
      }
      this.resetHook()
    },
    stopAll() {
      this.resourceList.forEach(node => {
        node && this.setPlayLog({ ip: node.queryParam.devIp, name: node.name })
      })
      this.$parent.$refs.timeLine.clearThumbQueue()
      this.plugin.stopAll()
      this.state.isPlay = false
      this.state.isStopped = true
      this.wallCtrlAll(2)
      this.wallData = {}
      // this.$parent.playbackList = {}
      // this.$parent.recordInfo = []
      // this.$parent.paramList = []
      // this.$parent.upRecordInfo()
      this.CLEAR_RESOURCE()
      this.resetHook()
      this.$parent.clearPageRequest() // 清空分页查询列表
      this.cutModalCannel()
      if (this.$parent.isSegment) {
        this.$parent.isSegment = false
        this.segmentModal = false
        this.isSelect = true
      }
    },
    resetHook() {
      this.selectedShowmode = 2
      this.hoverShowmode = 2
      this.selectedSpeed = '1'
      this.speedIcon = 'icon-speed'
      this.hoverSpeed = '1'
    },
    boost(isb) {
      if (this.btnBoostDisable) {
        return
      }
      if (!this.isasyn) {
        this.plugins.forEach(plugin => {
          if (plugin.pluginState.isStopped) {
            return
          }
          plugin.boost(isb)
        })
      } else {
        this.plugin.boost(isb)
      }
    },
    fullscreen() {
      this.plugin.fullScreen()
    },
    _openSound() {
      this.openSound()
      this.setVolume(0)
      this.clickOpenSound = true
      this.showFsVolume = true
    },
    openSound() {
      this.plugin.openSound()
      if (!this.isasyn) {
        this.plugins.forEach(plugin => {
          if (plugin.pluginState.isStopped) {
            return
          }
          plugin.openSound()
        })
      }
    },
    setIMode() {
      this.plugin.setPlayerMode(2)
    },
    _closeSound() {
      this.closeSound()
      this.clickOpenSound = false
      this.volume = 1
    },
    closeSound() {
      this.plugin.closeSound()
      if (!this.isasyn) {
        this.plugins.forEach(plugin => {
          if (plugin.pluginState.isStopped) {
            return
          }
          plugin.closeSound()
        })
      }
    },
    _setVolume(v) {
      this.openSound()
      this.setVolume(v)
    },
    setVolume(v) {
      this.clickMute = false
      if (!this.isasyn) {
        this.plugins.forEach(plugin => {
          if (plugin.pluginState.isStopped) {
            return
          }
          plugin.setVolume(v)
        })
        return
      }
      this.plugin.setVolume(v)
    },
    getCapture() {
      // 抓图
      if (this.btnScreenshotDisable) {
        return
      }
      if (!this.isasyn) {
        this.getVideoConf() // 同步localStorage数据到本地配置
        const type = this.parameters.screenshot === 'JPG' ? 'jpg' : 'bmp'
        const picType = this.parameters.screenshot === 'JPG' ? 1 : 0
        // const state = JSON.parse(this.plugin.getDir())
        // let path = ''
        // if (state.success) {
        //   path = state.DirName
        // } else {
        //   // this.$Notice.error({ title: '失败', desc: '获取保存位置出错！' })
        // }
        let path = this.parameters.screenshotPath
        this.plugins.forEach((plugin, i) => {
          plugin.getPicture({
            path: path + '\\' + i + '.' + type,
            type: picType
          })
        })
        return
      }
      const node = this.resourceList[this.plugin.activedIndex]
      this.recordLog({
        logType: '操作日志',
        module: '录像回放',
        operateName: '截图',
        operateContent: '截图',
        target: node.name,
        deviceIp: node.queryParam.devIp
      })
      this.plugin.getPicture(node.name)
    },
    avtiveChange(i) {
      this.activedIndex = i
      this.$emit('avtiveChange', i)
    },
    setPlayerMode() {
      if (!this.isasyn) {
        this.state.isPlay = false
        this.plugins.forEach(plugin => {
          if (plugin.pluginState.isStopped) {
            return
          }
          plugin.setPlayerMode(1)
        })
        this.wallCtrlAll(4)
      } else {
        if (this.state.isStopped) {
          return
        }
        this.plugin.setPlayerMode(1)
        this.wallCtrl(4)
      }
    },
    changePluginData(data) {
      this.$emit('changePluginData', data)
    },
    // 标记弹窗
    signClick() {
      if (this._isPlay || this.state.isStopped || this.isNVR) {
        return
      }
      if (!this.isasyn) {
        return
      }
      this.plugin.capPause()
      this.activePluginData = this.$lodash.cloneDeep(this.resourceList[this.plugin.activedIndex])
      this.openSign = true
    },
    signCancel() {
      this.plugin.capResume()
      this.openSign = false
      this.signForm = {
        signName: '',
        signContent: ''
      }
    },
    // 拖动时间轴钩子
    dragHook() {
      // 设置上一次的画面比例和播放速度
      const mode = this.showmodeList.find(item => item.value === this.selectedShowmode)
      // const speed = this.speedList.find(item => item.label === this.selectedSpeed) // 20190903 拖拽上墙后再发流控协议
      setTimeout(() => {
        this.clickShowmode(mode)
        // if (speed.label !== '1') {
        // this.clickSpeed(speed)
        // }
        if (this.state.isBoost) {
          this.boost(true)
        }
      }, 0)
      // 上次有声音也要开启
      if (this.state.isVolumeOpen) {
        this.openSound()
        this.setVolume(this.state.volumeValue)
      }
    },
    findStrmInfo(infos = [], time) {
      let info = null
      this.$lodash.each(infos, item => {
        const timeInfo = item.evtTblInfo
        if (time >= timeInfo.startTime && time < timeInfo.endTime) {
          info = item
          return false
        }
      })
      return info
    },
    signSave() {
      this.$refs.signForm.validate(valid => {
        if (!valid) {
          return
        }
        const re = /[\-\+\ \—\_\,\!\|\~\`\(\)\#\$\%\^\&\*\{\}\:\;\"\<\>\?\[\]\，\？\‘\’\、\“\”]/g // eslint-disable-line
        if (re.test(this.signForm.signName) || re.test(this.signForm.signContent)) {
          this.errorMsg('标记失败！请检查输入是否正确')
          return
        }
        const cutTime = JSON.parse(this.plugin.getPlayerCurTime())
        if (!cutTime.success) {
          return
        }
        const params = {
          event: this.findStrmInfo(this.activePluginData.eventList, parseInt(cutTime.msCur / 1000)),
          cutTime: parseInt(cutTime.msCur / 1000),
          tagState: 'add'
        }
        let objTgs = {
          // 要添加的标记对象 添加标记成功后 要绘制到时间轴上
          name: this.signForm.signName,
          time: cutTime.msCur
        }
        params.event.evtTblInfo.remark = this.signForm.signName + '#' + this.signForm.signContent
        AV_RECORD_SIGN(params)
          .then(res => {
            if (res.data.result === 'error') {
              this.errorMsg('标记失败！')
            } else {
              let tags = this.$parent.$refs.timeLine.recordInfo[this.plugin.activedIndex].tags
              tags.push(objTgs)
              this.$set(this.$parent.$refs.timeLine.recordInfo[this.plugin.activedIndex], 'tags', tags) // 加上标记 让页面重绘时间轴
              this.successMsg('标记成功！')
            }
          })
          .catch(err => {
            this.errorMsg('标记失败！')
            console.log(err)
          })
        this.signCancel()
      })
    },
    getPluginCurtime() {
      let time = this.plugin.getPlayerCurTime()
      // console.log(this.plugin.getPlayerTime())
      time = JSON.parse(time)
      // console.log(time)
      if (time.success && time.msCur) {
        return time.msCur
      } else {
        return 0
      }
    },
    clickSpeed(speed) {
      this.selectedSpeed = speed.label
      this.speedIcon = speed.icon
      this.plugin.setPlayerRate(speed.value)
      // if (speed.label === '4') {
      this.wallCtrl(speed) // 回放上墙倍数调节
      // }
      // this.showSpeed = false
      if (!this.isasyn) {
        this.plugins.forEach((plugin, index) => {
          if (plugin.pluginState.isStopped) {
            return
          }
          plugin.setPlayerRate(speed.value)
          if (plugin.pluginState.streamId) {
            // 如果是国标设备
            this.gbPlayCtrl({
              id: plugin.pluginState.streamId,
              serverId: this.plugin.pluginData[index],
              speed: eval(this.selectedSpeed)
            })
          }
        })
      } else {
        if (this.state.streamId) {
          // 如果是国标设备
          this.gbPlayCtrl({ type: 1, speed: eval(this.selectedSpeed) })
        }
      }
    },
    clickShowmode(mode) {
      this.selectedShowmode = mode.value
      this.plugin.setScale(mode.item)
      // this.showmodeShow = false
      if (!this.isasyn) {
        this.plugins.forEach(plugin => {
          if (plugin.pluginState.isStopped) {
            return
          }
          plugin.setScale(mode.item)
        })
      }
    },
    // 快速上墙
    async checkWall(i) {
      if (!this.isasyn) {
        return
      }
      console.log('checkWall', i)
      let eventList, ds, streamId, ts
      const cutTime = JSON.parse(this.plugin.getPlayerCurTime())
      if (!cutTime.success) {
        return
      }
      if (this.isNVR) {
        const nvrOpenRes = await this.$parent.nvrVodOpen({ time: cutTime.msCur / 1000 })
        ts = {
          tsPort: nvrOpenRes.TsPort,
          tsIp: nvrOpenRes.TsIp
        }
        streamId = nvrOpenRes.streamId
      } else if (this.state.streamId) {
        const gbOpenRes = await this.$parent.gbVodOpen({ time: cutTime.msCur / 1000 })
        ts = {
          tsPort: gbOpenRes.TsPort,
          tsIp: gbOpenRes.TsIp
        }
        streamId = gbOpenRes.streamId
      } else {
        this.activePluginData = this.$lodash.cloneDeep(this.resourceList[this.plugin.activedIndex])
        const event = this.findStrmInfo(this.activePluginData.eventList, parseInt(cutTime.msCur / 1000))
        ds = {
          dsIp: this.activePluginData.dsIp,
          dsPort: 9000
        }
        eventList = {
          timeInfo: {
            startTime: parseInt(cutTime.msCur / 1000),
            endTime: parseInt(new Date().getTime() / 1000)
          },
          strmInfo: event.strmInfo
        }
        eventList = {
          params: {
            jsonrpc: '2.0',
            id: '1',
            method: 'brest',
            call: 'AV.Record.playopen',
            args: {
              eventList: eventList
            }
          }
        }
      }
      this.id = this.resourceList[this.plugin.activedIndex].res
      this.$refs.toWall.addToWall(this.id, i, eventList, ds, streamId, ts).then(r => {
        this.wallData[this.plugin.activedIndex] = r.data
      })
    },
    // 上墙跳转
    async wallOpen(time, data) {
      data = data || this.wallData[this.plugin.activedIndex]
      if (!data || this.isNVR) {
        return
      }
      // await this.wallCtrl(2, data)
      const cutTime = JSON.parse(this.plugin.getPlayerCurTime())
      time = time || {
        startTime: parseInt(cutTime.msCur / 1000),
        endTime: parseInt(new Date().getTime() / 1000)
      }
      data.dsCmdContent.params.args.eventList.timeInfo = {
        startTime: time.startTime,
        endTime: time.endTime
      }
      if (time.strmInfo) {
        data.dsCmdContent.params.args.eventList.strmInfo = time.strmInfo
      }
      const param = {
        devInfo: data.devInfo,
        devCtl: data.devCtl,
        dsCmdContent: data.dsCmdContent
      }
      await this.vodOpen(param)
      const speed = this.speedList.find(item => item.label === this.selectedSpeed)
      if (speed.label === '1') {
        return
      } // 上墙跳转后看是否需要流控设置
      this.wallCtrl(speed)
    },
    // 上墙控制
    wallCtrl(ctrl, data) {
      data = data || this.wallData[this.plugin.activedIndex]
      if (!data) {
        return
      }
      if (ctrl instanceof Object) {
        ctrl = ctrl.control
      }
      // 1：暂停，2：停止，3 一倍速 4 二倍速 5 四倍速 6 八倍速 7 16倍速 8 1/2倍速 9 1/4倍速  10 1/8倍速 11 1/16倍速  control
      const param = {
        devInfo: data.devInfo,
        devCtl: {
          monitor: data.devCtl.monitor,
          pane: data.devCtl.pane,
          control: ctrl // 1>PAUSE, 2>STOP, 3>PLAY, 4>BYFRAME, 5>FF_4,vodOpen
        }
      }
      return this.vodCtrl(param)
    },
    wallCtrlAll(ctrl) {
      for (let i = 0; i < this.selectedShowscreen; i++) {
        if (this.wallData[i]) {
          this.wallCtrl(ctrl, this.wallData[i])
        }
      }
    },
    // 点击下载
    openDownload() {
      if (this.btnDownloadDisable) {
        return
      }
      this.startTime = '00:00:00'
      this.endTime = '00:00:00'
      this.showDownload = true
      this.plugins.forEach(plugin => {
        if (!plugin.pluginState.isStopped) {
          plugin.capPause()
        }
      })
    },
    downCloce() {
      this.showDownload = false
      // this.plugin.capResume()
      this.plugins.forEach(plugin => {
        if (!plugin.pluginState.isStopped) {
          plugin.capResume()
        }
      })
    },
    // 点击视频下面的全屏按钮
    overlayScreen() {
      if (!this._isPlay || !this.isasyn) {
        return
      }
      if (this.$root.isFullscreen) {
        this.exitFullscreen()
        this.$root.$el.classList.remove('fs')
        this.$root.isFullscreen = false
      } else {
        this.requestFullscreen()
        this.$root.$el.classList.add('fs')
        this.$root.isFullscreen = true
      }
    },
    downloadSave() {
      let downLoadTime = this.getDownloadTime()
      if (!this.startTime || !this.endTime || downLoadTime.startTime >= downLoadTime.endTime) {
        this.$Notice.warning({ desc: '请选择正确的时间段！', title: '警告' })
      } else {
        this.showDownload = false
        this.download()
        this.plugin.capResume()
      }
    },
    getDownloadTime() {
      // 回放界面下载录像的时候 的开始结束时间
      if (isNaN(Number(this.startTime))) {
        let date = this.$moment(this.$parent.$refs.timeLine.now).format('YYYY-MM-DD')
        return {
          startTime: this.$moment(`${date} ${this.startTime}`).unix(),
          endTime: this.$moment(`${date} ${this.endTime}`).unix()
        }
      } else {
        // 剪切会传进来时间戳
        return {
          startTime: Number(this.startTime),
          endTime: Number(this.endTime)
        }
      }
    },
    download() {
      // const type = this.parameters.videotape === 'BSR' ? 'bsr' : 'avi'
      // const file = this.strFilter[type]
      // let path = ''
      // this.plugin.getFileBrowserEx({
      //   type: 0,
      //   defaultName: type,
      //   file,
      //   callback: res => {
      //     res = JSON.parse(res)
      //     if (res.success) {
      //       path = res.fileName
      //     } else {
      //       return
      //     }
      //     if (!this.isasyn) {
      //       // 同步回放时下载禁用了
      //     } else {
      //       let event = null
      //       const paramed = this.$lodash.cloneDeep(this.resourceList[this.plugin.activedIndex])
      //       if (this.isNVR) {
      //         event = this.$lodash.cloneDeep(this.resourceList[this.plugin.activedIndex].recordInfo[0])
      //       } else if (paramed.queryParam.childId) {
      //         event = this.$lodash.cloneDeep(this.resourceList[this.plugin.activedIndex].recordList[0])
      //       } else {
      //         const eventList = this.$lodash.cloneDeep(this.resourceList[this.plugin.activedIndex].eventList)
      //         const time = JSON.parse(this.plugin.getPlayerCurTime())
      //         if (time.success && time.msCur) {
      //           eventList.forEach(item => {
      //             if (item.evtTblInfo.startTime * 1000 <= time.msCur && item.evtTblInfo.endTime * 1000 >= time.msCur) {
      //               event = item
      //             }
      //           })
      //         }
      //       }
      //       this.dw(event, path, paramed)
      //       console.log(paramed, 'paramed')
      //       console.log(event, 'event')
      //       console.log(path, 'path')
      //       console.log(time, 'time')
      //     }
      //   }
      // })
      this.getVideoConf() // 同步localStorage数据到本地配置
      const paramed = this.$lodash.cloneDeep(this.resourceList[this.plugin.activedIndex])
      const videoType = this.parameters.downloadVideoType.toLowerCase()
      let downLoadTime = this.getDownloadTime()
      let videoName =
        paramed.name +
        '(' +
        this.$moment(downLoadTime.startTime * 1000).format('YYYYMMDDHHmmss') +
        '-' +
        this.$moment(downLoadTime.endTime * 1000).format('YYYYMMDDHHmmss') +
        ')' +
        new Date().getTime() +
        '.' +
        videoType
      let strFileDir = this.parameters.downloadVideoPath + '\\download.txt'
      let creatDir = this.plugins[this.activedIndex].plugin.SaveFileInfo(strFileDir, videoName)
      if (creatDir) {
        this.$Notice.warning({ desc: '创建目录文件失败', title: '警告' })
      }
      let path = this.parameters.downloadVideoPath + '\\' + videoName.toString()
      let event = null
      if (!this.isasyn) {
        // 同步回放时下载禁用了
      } else {
        if (this.isNVR) {
          if (paramed.queryParam.childId) {
            // 国标前端
            event = this.$lodash.cloneDeep(this.resourceList[this.plugin.activedIndex])
          } else {
            event = this.$lodash.cloneDeep(this.resourceList[this.plugin.activedIndex].recordInfo[0])
          }
        } else if (paramed.queryParam.childId) {
          // event = this.$lodash.cloneDeep(this.resourceList[this.plugin.activedIndex].recordInfo[0])
          event = true // 在dw 方法中 这参数没有使用 只是判断 疑问？？
        } else {
          const eventList = this.$lodash.cloneDeep(this.resourceList[this.plugin.activedIndex].eventList)
          const time = JSON.parse(this.plugin.getPlayerCurTime())
          if (time.success && time.msCur) {
            eventList.forEach(item => {
              if (item.evtTblInfo.startTime * 1000 <= time.msCur && item.evtTblInfo.endTime * 1000 >= time.msCur) {
                event = item
              }
            })
          }
        }
        this.dw(event, path, paramed, downLoadTime)
      }
    },
    findAvaliableTime(time, l) {
      const list = l.sort((it1, it2) => {
        return it1.evtTblInfo.startTime - it2.evtTblInfo.startTime
      })
      for (let index = 0; index < list.length; index++) {
        const info = list[index].evtTblInfo
        if (info.startTime <= time && time <= info.endTime) {
          break
        }
        if (info.endTime > time && index !== list.length - 1 && list[index + 1].evtTblInfo.startTime > time) {
          time = list[index + 1].evtTblInfo.startTime
          break
        }
        if (list.length === 1 && time < info.startTime) {
          time = info.startTime
          break
        }
      }
      return time
    },
    async dw(event, path, paramed, downLoadTime) {
      if (event && path) {
        let param, startTime, endTime
        startTime = downLoadTime.startTime
        endTime = downLoadTime.endTime
        if (this.isNVR) {
          // startTime = parseInt(this.startTimeFormatted.getTime() / 1000)
          // endTime = parseInt(this.endTimeFormatted.getTime() / 1000)
          if (paramed.node.nodeId) {
            // 国标前端回放下载
            let openParam = {
              downLoad: 'FrontDownload',
              endTime: endTime + '',
              gbDevIp: event.data.gbDevIp,
              gbDevPort: event.data.gbDevPort,
              gbDeviceID: event.data.gbDevId,
              gbPlatformID: event.data.platformID,
              startTime: startTime,
              streamType: 'main'
            }
            const res = await GB_AV_NVRRECORD_OPEN(openParam).catch(() => this.errorMsg('请求错误！'))
            if (!res.data) {
              this.errorMsg('请求数据错误！')
            }
            param = {
              ip: res.data.TsIp,
              port: res.data.TsPort + '',
              fileName: path,
              beginTime: startTime + '',
              endTime: endTime + '',
              cmdStr: JSON.stringify({
                streamId: res.data.streamId
              })
            }
          } else {
            // 前端回放下载
            const res = await AV_NVRRECORD_OPEN({
              devIp: paramed.queryParam.devIp,
              devPort: paramed.queryParam.devPort,
              channel: paramed.queryParam.channel,
              // sTime: event.sTime,
              // eTime: event.eTime,
              sTime: startTime + '',
              eTime: endTime + '',
              streamType: paramed.queryParam.streamType,
              streamConnPort: paramed.node.eid.dport
            })
            param = {
              ip: res.data.TsIp,
              port: res.data.TsPort + '',
              fileName: path,
              beginTime: startTime + '',
              endTime: endTime + '',
              cmdStr: JSON.stringify({
                streamType: paramed.queryParam.streamType,
                vendor: paramed.node.eid.manufacturer,
                session: '',
                ip: paramed.queryParam.devIp,
                channel: paramed.queryParam.channel,
                port: paramed.queryParam.devPort + '',
                streamId: res.data.streamId
              })
            }
          }
        } else {
          if (paramed.queryParam.childId) {
            // 下联设备
            // startTime = parseInt(this.startTimeFormatted.getTime() / 1000)
            // endTime = parseInt(this.endTimeFormatted.getTime() / 1000)
            const gbParam = paramed.queryParam
            const serverId = await this.getPlatformID(gbParam.shareServer)
            const openParam = {
              gbPlaDevIp: serverId.ip,
              gbPlaDevPort: serverId.port,
              parentId: serverId.serverId,
              childId: gbParam.childId,
              channel: gbParam.channel,
              startTime,
              endTime,
              streamType: 'main',
              downLoad: 'Download'
            }
            const res = await this.gbRecordOpen(openParam).catch(() => this.errorMsg('请求错误！'))
            if (!res.data) {
              this.errorMsg('录像下载请求错误！')
              return
            }
            param = {
              ip: res.data.TsIp,
              port: res.data.TsPort + '',
              fileName: path,
              beginTime: startTime + '',
              endTime: endTime + '',
              cmdStr: JSON.stringify({
                streamId: res.data.streamId
              })
            }
          } else {
            // 本级设备中心录像
            const obj = {}
            obj.eventList = {}
            obj.eventList.timeInfo = {}
            obj.eventList.strmInfo = {}
            // const copyList = JSON.parse(JSON.stringify(this.resourceList[this.plugin.activedIndex].eventList))
            // obj.eventList.timeInfo.startTime = startTime = this.findAvaliableTime(
            //   parseInt(this.startTimeFormatted.getTime() / 1000),
            //   copyList
            // )
            obj.eventList.timeInfo.startTime = startTime
            obj.eventList.timeInfo.endTime = endTime
            obj.eventList.strmInfo = event.strmInfo
            param = {
              ip: paramed.dsIp + '',
              port: 9000 + '',
              fileName: path,
              beginTime: obj.eventList.timeInfo.startTime + '',
              endTime: obj.eventList.timeInfo.endTime + '',
              cmdStr: JSON.stringify({
                params: {
                  jsonrpc: '2.0',
                  id: '1',
                  method: 'brest',
                  call: 'AV.Record.playopen',
                  args: obj
                }
              })
            }
          }
        }
        const DATEFORMAT = 'YYYY-MM-DD HH:mm:ss'
        let type = this.$parent.$refs.retrieval.selectedType
        if (type === '全部' || this.isNVR) {
          type = ''
        }
        this.recordDump(param).then(dump => {
          const item = {
            param: param,
            name: paramed.name,
            startTime: this.$moment(startTime * 1000).format(DATEFORMAT),
            endTime: this.$moment(endTime * 1000).format(DATEFORMAT),
            size: '',
            type: '定时录像',
            pre: '--',
            dumpHandle: dump.DumpHandle,
            state: ''
          }
          if (dump.success) {
            this.$Notice.warning({ title: '提示', desc: `录像开始下载，下载路径为${path}` })
            item.state = '下载中'
          } else {
            item.state = '下载失败'
          }
          this.setDownLog({
            name: item.name,
            startTime: item.startTime,
            endTime: item.endTime,
            ip: paramed.queryParam.devIp
          })
          this.ADD_DOWNLOADLIST(item)
          this.backupDownloadList()
        })
      }
    },
    setPlayLog({ ip, name }) {
      const param = {
        logType: '操作日志',
        module: '录像回放',
        operateName: '录像回放',
        operateContent: '停止录像回放',
        target: name,
        deviceIp: ip
      }
      this.recordLog(param)
    },
    setDownLog({ ip, name, startTime, endTime }) {
      const param = {
        logType: '操作日志',
        module: '录像回放',
        operateName: '录像下载',
        operateContent: `开始时间:${startTime},结束时间:${endTime}`,
        target: name,
        deviceIp: ip
      }
      this.recordLog(param)
    },
    // 剪切下载
    cutDownload() {
      if (!this._isPlay || !this.isasyn) {
        return
      }
      if (!this.$parent.isCut) {
        this.$parent.isCut = true
        this.cutModal = true
        this.$parent.cutTime = this.$parent.timelineValue / 1000
      }
      // this.$parent.$refs.timeLine.cutDate.startTime = this.$parent.timelineValue / 1000
      // this.$parent.$refs.timeLine.cutDate.endTime = this.$parent.timelineValue / 1000 + 7200
    },
    // 剪切下载确认
    cutModalSave() {
      this.cutDate = this.$parent.$refs.timeLine.cutDate
      if (!this.cutDate.startTime || !this.cutDate.endTime) {
        this.cutModalCannel()
        return
      }
      this.startTime = this.cutDate.startTime
      this.endTime = this.cutDate.endTime
      this.download()
      this.cutModalCannel()
    },
    // 剪切现在取消
    cutModalCannel() {
      this.cutModal = false
      this.$parent.isCut = false
      this.$parent.$refs.timeLine.initCut()
    },
    // 分段播放
    segmentPlay() {
      this.segmentTime = ['00:00', '23:59']
      // if (!this._isPlay || !this.isasyn) { return }
      // if (this.$parent.sourceType !== 1) {
      //   return
      // }
      if (!this.$parent.isSegment) {
        // this.$Notice.warning({
        //   title: '提示',
        //   desc: '进行分段回放时，当前播放的通道视频将停止'
        // })
        this.setShowscreen(4)
        this.segNum = 4
        this.$parent.isSegment = true
        this.segmentModal = true
      } else {
        if (!this.isSelect) {
          this.$parent.segmentStop()
          this.stopAll()
        }
        this.$parent.isSegment = false
        this.segmentModal = false
        this.isSelect = true
      }
    },
    // 时间变化
    segmentTimeChange(time) {
      this.segmentTime = time
    },
    // 分段保存
    segmentSelectScreen(i) {
      if (this.isSelect && this._isPlay) {
        this.$Notice.warning({
          title: '提示',
          desc: '进行分段回放时，当前播放的通道视频将停止'
        })
      }
      this.isSelect = false
      this.$parent.segNum = i
      this.$parent.segTime = this.segmentTime
      this.$parent.segmentPlay()
      console.log(this.state.isPlay)
    }
  },
  created() {
    this.getTVList().then(() => {
      this.getMonitorList()
    })
  },
  mounted() {
    this.beforeunload = () => {
      this.wallCtrlAll(2)
    }
    document.addEventListener('beforeunload', this.beforeunload, false)
    // console.log(this.$refs, this.$parent.$refs.timeLine.isasyn, 2323)
    this.setPluginType('record')
    this.timeLine = this.$parent.$refs.timeLine
    // setTimeout(() => {
    //   this.showVolume = false
    //   this.hideSlider = false
    // }, 3500)
  },
  beforeDestroy() {
    document.removeEventListener('beforeunload', this.beforeunload, false)
    this.stopAll()
  }
}
</script>
<style>
.ivu-modal-close {
  z-index: 19;
}
</style>

<style lang="less" scoped>
.video-container {
  position: absolute;
  left: 0px;
  right: 350px;
  top: 0;
  bottom: 200px;
}

iframe {
  position: absolute;
  width: 100%;
  height: 100%;
  z-index: 0;
  border: 0 none;
}

.playback {
  height: 56px;
  padding: 13px 6px;
  color: #fffafa;
  background: #1b3153;
}

.iconfont {
  padding: 5px 11px;
  height: 36px;
  color: #fff;
  font-size: 20px;
  cursor: pointer;
  margin: 0;
  // background: #5676aa;
  border-radius: 3px;
}

.leftIcon .iconfont {
  font-size: 22px;
}

.iconfont:hover {
  color: #fda548;
  // background: #fa893b;
}
.iconfont:active {
  color: #c47019;
}

.iconfont.disable:hover,
.iconfont.disable,
.iconfont.disable:active {
  color: #9298a4;
  // color: rgba(0,0,0,0.5);
  // background: #5676aa;
}

.dp-con {
  position: relative;
  display: inline-block;

  ul,
  .showTowall {
    position: absolute;
    bottom: 32px;
    left: -10px;
  }

  ul {
    bottom: -3px;
    left: -194px;
    background: #335589;
    width: 191px;
    /* padding-top: 30px; */
    height: 40px;
    line-height: 40px;
    border-radius: 3px;

    li {
      color: #fff;
      // height: 24px;
      line-height: 12px;
      text-align: center;
      cursor: pointer;
      position: relative;
      display: inline-block;
      padding: 0 14px;
      border-right: 1px solid rgba(255, 255, 255, 0.1);
    }

    li:last-child {
      border-right: 0;
    }

    i {
      display: block;
      position: absolute;
      background: #335589;
      width: 14px;
      height: 14px;
      z-index: 0;
      transform: rotate(45deg);
      bottom: 13px;
      left: 183px;
    }

    .active {
      color: #fa8a3b;
    }
  }

  ul.display-scale {
    left: -153px;
    width: 150px;

    i {
      left: 143px;
    }
  }

  ul.iconspeed {
    left: 45px;
    width: 380px;

    i {
      left: -7px;
    }
  }
  ul.cutDown {
    left: -115px;
    width: 110px;
    i {
      left: 102px;
    }
  }
  ul.segPlay {
    width: 338px;
    left: -339px;
    i {
      left: 330px;
    }
  }
  .showTowall {
    list-style: none;
    background-color: #1b3153;
    color: #fff;
    border-radius: 0 0 3px 3px;
    text-align: center;
    bottom: 30px;
    z-index: 99999;
    left: calc(~'50%');
    transform: translate(-50%, 0);

    .quickToWall {
      width: 100%;
      height: 100%;
      position: absolute;
      z-index: 99999999;
      background: #335589;
      border: 1px solid #4699f9;
    }
  }
}

.dp-con:hover .iconfont {
  // background: #fa893b;
  color: #fda548;
}

.dp-con:hover .iconfont.disable {
  color: #9298a4;
  // background: #5676aa;
  cursor: not-allowed;
}

.vol-slider {
  width: 150px;
}

.iconfont {
  user-select: none;
}

.sign {
  width: 340px;
  height: 240px;
  position: absolute;
  background: #1b3153;
  top: 50%;
  left: 50%;
  margin-left: -150px;
  margin-top: -120px;
  z-index: 99999;
  color: #fff;

  iframe,
  .signBox {
    background-color: transparent;
    position: absolute;
    z-index: 0;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    border: 0 none;
  }

  .header {
    width: 100%;
    height: 40px;
    line-height: 40px;
    background: #0f2243;
    padding: 0 10px;

    .title {
      float: left;
    }

    .flag {
      float: right;
      cursor: pointer;
    }
  }

  .content {
    width: 100%;
    padding: 15px;

    .condition {
      height: 24px;
      margin: 10px 0;
      width: 100%;
      margin: 10px 0 0;

      * {
        display: inline-block;
      }

      span {
        width: 67px;
        line-height: 24px;
        color: #fff;
      }
    }
  }

  .signBtnBox {
    width: 165px;
    position: absolute;
    right: 20px;
    bottom: 12px;

    * {
      margin: 0 10px;
    }
  }
}

.video-bottom-bottom {
  width: 100%;
  height: 40px;
  position: absolute;
  background: #355284;
  left: 0;
  bottom: 15px;
}

.video-bottom-jiexian {
  width: 100%;
  border-top: 1px solid rgba(58, 90, 139, 0.4);
  position: absolute;
  left: 0;
  bottom: 54px;
}

.fs-head {
  height: 0px;
  background: #254576;
  margin-bottom: 15px;
}

.fs-buttons,
.fs-buttons-right {
  display: none;
  background: #1c3053;
}

.fs-buttons .iconfont {
  padding: 2px 12px 5px 12px;
}

#app-main.fs .fs-buttons,
#app-main.fs .fs-buttons-right {
  display: block;
  position: fixed;
  left: 0;
  width: 400px;
  bottom: 8px;
  height: 68px;
  z-index: 9;
}

#app-main.fs .fs-buttons-right {
  right: 0;
  bottom: 0;
  left: auto;
  width: 80px;
}
.fs-speed {
  position: absolute;
  left: 108px;
}
.fs-speed li {
  display: inline-block;
  margin-left: 6px;
  cursor: pointer;
}
.fs-speed li.active {
  color: #4699f9;
}
.fs-slider-box {
  position: absolute;
  left: 268px;
  width: 80px;
  display: inline-block;
  vertical-align: top;
}
</style>
<style lang="less">
ul.segPlay {
  .ivu-select-dropdown {
    z-index: 100000;
  }
  .ivu-picker-panel-body .ivu-picker-panel-content div.ivu-time-picker-cells-list {
    max-height: 70px;
  }
  .ivu-input-wrapper-small .ivu-input-icon {
    line-height: 24px;
  }
}
</style>
