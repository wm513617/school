{"version":3,"sources":["../../../lib/doc/range.js"],"names":["colCache","require","Range","decode","arguments","t","l","b","r","s","length","tl","decodeAddress","br","model","top","Math","min","row","left","col","bottom","max","right","sheetName","setTLBR","argv","value","Array","tlbr","decodeEx","Error","dimensions","number","expand","addressStr","address","range","other","containsEx","test","n2l","_serialisedSheetName","$t$l","$b$r","count","$range","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst colCache = require('./../utils/col-cache');\n\n// used by worksheet to calculate sheet dimensions\nclass Range {\n  constructor() {\n    this.decode(arguments);\n  }\n\n  setTLBR(t, l, b, r, s) {\n    if (arguments.length < 4) {\n      // setTLBR(tl, br, s)\n      const tl = colCache.decodeAddress(t);\n      const br = colCache.decodeAddress(l);\n      this.model = {\n        top: Math.min(tl.row, br.row),\n        left: Math.min(tl.col, br.col),\n        bottom: Math.max(tl.row, br.row),\n        right: Math.max(tl.col, br.col),\n        sheetName: b,\n      };\n\n      this.setTLBR(tl.row, tl.col, br.row, br.col, s);\n    } else {\n      // setTLBR(t, l, b, r, s)\n      this.model = {\n        top: Math.min(t, b),\n        left: Math.min(l, r),\n        bottom: Math.max(t, b),\n        right: Math.max(l, r),\n        sheetName: s,\n      };\n    }\n  }\n\n  decode(argv) {\n    switch (argv.length) {\n      case 5: // [t,l,b,r,s]\n        this.setTLBR(argv[0], argv[1], argv[2], argv[3], argv[4]);\n        break;\n      case 4: // [t,l,b,r]\n        this.setTLBR(argv[0], argv[1], argv[2], argv[3]);\n        break;\n\n      case 3: // [tl,br,s]\n        this.setTLBR(argv[0], argv[1], argv[2]);\n        break;\n      case 2: // [tl,br]\n        this.setTLBR(argv[0], argv[1]);\n        break;\n\n      case 1: {\n        const value = argv[0];\n        if (value instanceof Range) {\n          // copy constructor\n          this.model = {\n            top: value.model.top,\n            left: value.model.left,\n            bottom: value.model.bottom,\n            right: value.model.right,\n            sheetName: value.sheetName,\n          };\n        } else if (value instanceof Array) {\n          // an arguments array\n          this.decode(value);\n        } else if (value.top && value.left && value.bottom && value.right) {\n          // a model\n          this.model = {\n            top: value.top,\n            left: value.left,\n            bottom: value.bottom,\n            right: value.right,\n            sheetName: value.sheetName,\n          };\n        } else {\n          // [sheetName!]tl:br\n          const tlbr = colCache.decodeEx(value);\n          if (tlbr.top) {\n            this.model = {\n              top: tlbr.top,\n              left: tlbr.left,\n              bottom: tlbr.bottom,\n              right: tlbr.right,\n              sheetName: tlbr.sheetName,\n            };\n          } else {\n            this.model = {\n              top: tlbr.row,\n              left: tlbr.col,\n              bottom: tlbr.row,\n              right: tlbr.col,\n              sheetName: tlbr.sheetName,\n            };\n          }\n        }\n        break;\n      }\n\n      case 0:\n        this.model = {\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n        };\n        break;\n\n      default:\n        throw new Error(`Invalid number of arguments to _getDimensions() - ${argv.length}`);\n    }\n  }\n\n  get top() {\n    return this.model.top || 1;\n  }\n\n  set top(value) {\n    this.model.top = value;\n  }\n\n  get left() {\n    return this.model.left || 1;\n  }\n\n  set left(value) {\n    this.model.left = value;\n  }\n\n  get bottom() {\n    return this.model.bottom || 1;\n  }\n\n  set bottom(value) {\n    this.model.bottom = value;\n  }\n\n  get right() {\n    return this.model.right || 1;\n  }\n\n  set right(value) {\n    this.model.right = value;\n  }\n\n  get sheetName() {\n    return this.model.sheetName;\n  }\n\n  set sheetName(value) {\n    this.model.sheetName = value;\n  }\n\n  get _serialisedSheetName() {\n    const {sheetName} = this.model;\n    if (sheetName) {\n      if (/^[a-zA-Z0-9]*$/.test(sheetName)) {\n        return `${sheetName}!`;\n      }\n      return `'${sheetName}'!`;\n    }\n    return '';\n  }\n\n  expand(top, left, bottom, right) {\n    if (!this.model.top || top < this.top) this.top = top;\n    if (!this.model.left || left < this.left) this.left = left;\n    if (!this.model.bottom || bottom > this.bottom) this.bottom = bottom;\n    if (!this.model.right || right > this.right) this.right = right;\n  }\n\n  expandRow(row) {\n    if (row) {\n      const {dimensions, number} = row;\n      if (dimensions) {\n        this.expand(number, dimensions.min, number, dimensions.max);\n      }\n    }\n  }\n\n  expandToAddress(addressStr) {\n    const address = colCache.decodeEx(addressStr);\n    this.expand(address.row, address.col, address.row, address.col);\n  }\n\n  get tl() {\n    return colCache.n2l(this.left) + this.top;\n  }\n\n  get $t$l() {\n    return `$${colCache.n2l(this.left)}$${this.top}`;\n  }\n\n  get br() {\n    return colCache.n2l(this.right) + this.bottom;\n  }\n\n  get $b$r() {\n    return `$${colCache.n2l(this.right)}$${this.bottom}`;\n  }\n\n  get range() {\n    return `${this._serialisedSheetName + this.tl}:${this.br}`;\n  }\n\n  get $range() {\n    return `${this._serialisedSheetName + this.$t$l}:${this.$b$r}`;\n  }\n\n  get shortRange() {\n    return this.count > 1 ? this.range : this._serialisedSheetName + this.tl;\n  }\n\n  get $shortRange() {\n    return this.count > 1 ? this.$range : this._serialisedSheetName + this.$t$l;\n  }\n\n  get count() {\n    return (1 + this.bottom - this.top) * (1 + this.right - this.left);\n  }\n\n  toString() {\n    return this.range;\n  }\n\n  intersects(other) {\n    if (other.sheetName && this.sheetName && other.sheetName !== this.sheetName) return false;\n    if (other.bottom < this.top) return false;\n    if (other.top > this.bottom) return false;\n    if (other.right < this.left) return false;\n    if (other.left > this.right) return false;\n    return true;\n  }\n\n  contains(addressStr) {\n    const address = colCache.decodeEx(addressStr);\n    return this.containsEx(address);\n  }\n\n  containsEx(address) {\n    if (address.sheetName && this.sheetName && address.sheetName !== this.sheetName) return false;\n    return address.row >= this.top && address.row <= this.bottom && address.col >= this.left && address.col <= this.right;\n  }\n}\n\nmodule.exports = Range;\n"],"file":"range.js"}