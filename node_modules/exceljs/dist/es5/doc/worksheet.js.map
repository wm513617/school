{"version":3,"sources":["../../../lib/doc/worksheet.js"],"names":["_","require","colCache","Range","Row","Column","Enums","Image","Table","DataValidations","Encryptor","PromiseLib","Worksheet","options","id","orderNo","name","state","_rows","_columns","_keys","_merges","rowBreaks","_workbook","workbook","properties","Object","assign","defaultRowHeight","dyDescent","outlineLevelCol","outlineLevelRow","pageSetup","margins","left","right","top","bottom","header","footer","orientation","horizontalDpi","verticalDpi","fitToPage","fitToWidth","fitToHeight","scale","pageOrder","blackAndWhite","draft","cellComments","errors","paperSize","undefined","showRowColHeaders","showGridLines","firstPageNumber","horizontalCentered","verticalCentered","colBreaks","headerFooter","differentFirst","differentOddEven","oddHeader","oddFooter","evenHeader","evenFooter","firstHeader","firstFooter","dataValidations","views","autoFilter","_media","sheetProtection","tables","removeWorksheetEx","key","value","f","each","c","col","l2n","length","n","push","start","count","inserts","Array","prototype","slice","call","arguments","rows","nRows","i","rowArguments","forEach","insert","row","getRow","splice","apply","r","nExpand","nKeep","nEnd","getColumn","defn","definedNames","spliceColumns","_nextRow","values","addRow","rSrc","rDst","style","eachCell","includeEmpty","cell","colNumber","getCell","spliceRows","iteratee","hasValues","number","address","getAddress","findCell","getCellEx","dimensions","merge","intersects","Error","master","j","unmerge","type","ValueType","Merge","_unMergeMaster","range","formula","results","decoded","decode","width","masterAddress","encodeAddress","getResult","isArray","first","result","sharedFormula","imageId","model","filter","m","image","find","password","Promise","resolve","sheet","algorithmName","saltValue","randomBytes","toString","spinCount","hashValue","convertPasswordToHash","table","rowModel","mergeCells","rowDims","expand","min","max","_headerRowCount","reduce","pv","cv","headerCount","headers","Math","columns","column","maxCount","eachRow","cellCount","counts","_lastRowNumber","some","Boolean","console","trace","tabColor","media","map","medium","cols","toModel","merges","fromModel","_parseRows","_parseMergeCells","t","module","exports"],"mappings":"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","sourcesContent":["const _ = require('../utils/under-dash');\n\nconst colCache = require('./../utils/col-cache');\nconst Range = require('./range');\nconst Row = require('./row');\nconst Column = require('./column');\nconst Enums = require('./enums');\nconst Image = require('./image');\nconst Table= require('./table');\nconst DataValidations = require('./data-validations');\nconst Encryptor = require('../utils/encryptor');\nconst PromiseLib = require('../utils/promise');\n\n// Worksheet requirements\n//  Operate as sheet inside workbook or standalone\n//  Load and Save from file and stream\n//  Access/Add/Delete individual cells\n//  Manage column widths and row heights\n\nclass Worksheet {\n  constructor(options) {\n    options = options || {};\n\n    // in a workbook, each sheet will have a number\n    this.id = options.id;\n    this.orderNo = options.orderNo;\n\n    // and a name\n    this.name = options.name || `Sheet${this.id}`;\n\n    // add a state\n    this.state = options.state || 'visible';\n\n    // rows allows access organised by row. Sparse array of arrays indexed by row-1, col\n    // Note: _rows is zero based. Must subtract 1 to go from cell.row to index\n    this._rows = [];\n\n    // column definitions\n    this._columns = null;\n\n    // column keys (addRow convenience): key ==> this._collumns index\n    this._keys = {};\n\n    // keep record of all merges\n    this._merges = {};\n\n    // record of all row and column pageBreaks\n    this.rowBreaks = [];\n\n    this._workbook = options.workbook;\n\n    // for tabColor, default row height, outline levels, etc\n    this.properties = Object.assign(\n      {},\n      {\n        defaultRowHeight: 15,\n        dyDescent: 55,\n        outlineLevelCol: 0,\n        outlineLevelRow: 0,\n      },\n      options.properties\n    );\n\n    // for all things printing\n    this.pageSetup = Object.assign(\n      {},\n      {\n        margins: {left: 0.7, right: 0.7, top: 0.75, bottom: 0.75, header: 0.3, footer: 0.3},\n        orientation: 'portrait',\n        horizontalDpi: 4294967295,\n        verticalDpi: 4294967295,\n        fitToPage: !!(options.pageSetup && ((options.pageSetup.fitToWidth || options.pageSetup.fitToHeight) && !options.pageSetup.scale)),\n        pageOrder: 'downThenOver',\n        blackAndWhite: false,\n        draft: false,\n        cellComments: 'None',\n        errors: 'displayed',\n        scale: 100,\n        fitToWidth: 1,\n        fitToHeight: 1,\n        paperSize: undefined,\n        showRowColHeaders: false,\n        showGridLines: false,\n        firstPageNumber: undefined,\n        horizontalCentered: false,\n        verticalCentered: false,\n        rowBreaks: null,\n        colBreaks: null,\n      },\n      options.pageSetup\n    );\n\n    this.headerFooter = {\n      differentFirst: false,\n      differentOddEven: false,\n      oddHeader: null,\n      oddFooter: null,\n      evenHeader: null,\n      evenFooter: null,\n      firstHeader: null,\n      firstFooter: null,\n    };\n\n    this.dataValidations = new DataValidations();\n\n    // for freezepanes, split, zoom, gridlines, etc\n    this.views = options.views || [];\n\n    this.autoFilter = options.autoFilter || null;\n\n    // for images, etc\n    this._media = [];\n\n    // worksheet protection\n    this.sheetProtection = null;\n\n    // for tables\n    this.tables = {};\n\n  }\n\n  get workbook() {\n    return this._workbook;\n  }\n\n  // when you're done with this worksheet, call this to remove from workbook\n  destroy() {\n    this._workbook.removeWorksheetEx(this);\n  }\n\n  // Get the bounding range of the cells in this worksheet\n  get dimensions() {\n    const dimensions = new Range();\n    this._rows.forEach(row => {\n      if (row) {\n        const rowDims = row.dimensions;\n        if (rowDims) {\n          dimensions.expand(row.number, rowDims.min, row.number, rowDims.max);\n        }\n      }\n    });\n    return dimensions;\n  }\n\n  // =========================================================================\n  // Columns\n\n  // get the current columns array.\n  get columns() {\n    return this._columns;\n  }\n\n  // set the columns from an array of column definitions.\n  // Note: any headers defined will overwrite existing values.\n  set columns(value) {\n    // calculate max header row count\n    this._headerRowCount = value.reduce((pv, cv) => {\n      const headerCount = (cv.header && 1) || (cv.headers && cv.headers.length) || 0;\n      return Math.max(pv, headerCount);\n    }, 0);\n\n    // construct Column objects\n    let count = 1;\n    const columns = (this._columns = []);\n    value.forEach(defn => {\n      const column = new Column(this, count++, false);\n      columns.push(column);\n      column.defn = defn;\n    });\n  }\n\n  getColumnKey(key) {\n    return this._keys[key];\n  }\n\n  setColumnKey(key, value) {\n    this._keys[key] = value;\n  }\n\n  deleteColumnKey(key) {\n    delete this._keys[key];\n  }\n\n  eachColumnKey(f) {\n    _.each(this._keys, f);\n  }\n\n  // get a single column by col number. If it doesn't exist, create it and any gaps before it\n  getColumn(c) {\n    if (typeof c === 'string') {\n      // if it matches a key'd column, return that\n      const col = this._keys[c];\n      if (col) return col;\n\n      // otherwise, assume letter\n      c = colCache.l2n(c);\n    }\n    if (!this._columns) {\n      this._columns = [];\n    }\n    if (c > this._columns.length) {\n      let n = this._columns.length + 1;\n      while (n <= c) {\n        this._columns.push(new Column(this, n++));\n      }\n    }\n    return this._columns[c - 1];\n  }\n\n  spliceColumns(start, count) {\n    // each member of inserts is a column of data.\n    const inserts = Array.prototype.slice.call(arguments, 2);\n    const rows = this._rows;\n    const nRows = rows.length;\n    if (inserts.length > 0) {\n      // must iterate over all rows whether they exist yet or not\n      for (let i = 0; i < nRows; i++) {\n        const rowArguments = [start, count];\n        // eslint-disable-next-line no-loop-func\n        inserts.forEach(insert => {\n          rowArguments.push(insert[i] || null);\n        });\n        const row = this.getRow(i + 1);\n        // eslint-disable-next-line prefer-spread\n        row.splice.apply(row, rowArguments);\n      }\n    } else {\n      // nothing to insert, so just splice all rows\n      this._rows.forEach(r => {\n        if (r) {\n          r.splice(start, count);\n        }\n      });\n    }\n\n    // splice column definitions\n    const nExpand = inserts.length - count;\n    const nKeep = start + count;\n    const nEnd = this._columns.length;\n    if (nExpand < 0) {\n      for (let i = start + inserts.length; i <= nEnd; i++) {\n        this.getColumn(i).defn = this.getColumn(i - nExpand).defn;\n      }\n    } else if (nExpand > 0) {\n      for (let i = nEnd; i >= nKeep; i--) {\n        this.getColumn(i + nExpand).defn = this.getColumn(i).defn;\n      }\n    }\n    for (let i = start; i < start + inserts.length; i++) {\n      this.getColumn(i).defn = null;\n    }\n\n    // account for defined names\n    this.workbook.definedNames.spliceColumns(this.name, start, count, inserts.length);\n  }\n\n  get columnCount() {\n    let maxCount = 0;\n    this.eachRow(row => {\n      maxCount = Math.max(maxCount, row.cellCount);\n    });\n    return maxCount;\n  }\n\n  get actualColumnCount() {\n    // performance nightmare - for each row, counts all the columns used\n    const counts = [];\n    let count = 0;\n    this.eachRow(row => {\n      row.eachCell(({col}) => {\n        if (!counts[col]) {\n          counts[col] = true;\n          count++;\n        }\n      });\n    });\n    return count;\n  }\n\n  // =========================================================================\n  // Rows\n\n  _commitRow() {\n    // nop - allows streaming reader to fill a document\n  }\n\n  get _lastRowNumber() {\n    // need to cope with results of splice\n    const rows = this._rows;\n    let n = rows.length;\n    while (n > 0 && rows[n - 1] === undefined) {\n      n--;\n    }\n    return n;\n  }\n\n  get _nextRow() {\n    return this._lastRowNumber + 1;\n  }\n\n  get lastRow() {\n    if (this._rows.length) {\n      return this._rows[this._rows.length - 1];\n    }\n    return undefined;\n  }\n\n  // find a row (if exists) by row number\n  findRow(r) {\n    return this._rows[r - 1];\n  }\n\n  get rowCount() {\n    return this._lastRowNumber;\n  }\n\n  get actualRowCount() {\n    // counts actual rows that have actual data\n    let count = 0;\n    this.eachRow(() => {\n      count++;\n    });\n    return count;\n  }\n\n  // get a row by row number.\n  getRow(r) {\n    let row = this._rows[r - 1];\n    if (!row) {\n      row = this._rows[r - 1] = new Row(this, r);\n    }\n    return row;\n  }\n\n  addRow(value) {\n    const row = this.getRow(this._nextRow);\n    row.values = value;\n    return row;\n  }\n\n  addRows(value) {\n    value.forEach(row => {\n      this.addRow(row);\n    });\n  }\n\n  spliceRows(start, count) {\n    // same problem as row.splice, except worse.\n    const inserts = Array.prototype.slice.call(arguments, 2);\n    const nKeep = start + count;\n    const nExpand = inserts.length - count;\n    const nEnd = this._rows.length;\n    let i;\n    let rSrc;\n    if (nExpand < 0) {\n      // remove rows\n      for (i = nKeep; i <= nEnd; i++) {\n        rSrc = this._rows[i - 1];\n        if (rSrc) {\n          const rDst = this.getRow(i + nExpand);\n          rDst.values = rSrc.values;\n          rDst.style = rSrc.style;\n          // eslint-disable-next-line no-loop-func\n          rSrc.eachCell({includeEmpty: true}, (cell, colNumber) => {\n            rDst.getCell(colNumber).style = cell.style;\n          });\n          this._rows[i - 1] = undefined;\n        } else {\n          this._rows[i + nExpand - 1] = undefined;\n        }\n      }\n    } else if (nExpand > 0) {\n      // insert new cells\n      for (i = nEnd; i >= nKeep; i--) {\n        rSrc = this._rows[i - 1];\n        if (rSrc) {\n          const rDst = this.getRow(i + nExpand);\n          rDst.values = rSrc.values;\n          rDst.style = rSrc.style;\n          // eslint-disable-next-line no-loop-func\n          rSrc.eachCell({includeEmpty: true}, (cell, colNumber) => {\n            rDst.getCell(colNumber).style = cell.style;\n          });\n        } else {\n          this._rows[i + nExpand - 1] = undefined;\n        }\n      }\n    }\n\n    // now copy over the new values\n    for (i = 0; i < inserts.length; i++) {\n      const rDst = this.getRow(start + i);\n      rDst.style = {};\n      rDst.values = inserts[i];\n    }\n\n    // account for defined names\n    this.workbook.definedNames.spliceRows(this.name, start, count, inserts.length);\n  }\n\n  // iterate over every row in the worksheet, including maybe empty rows\n  eachRow(options, iteratee) {\n    if (!iteratee) {\n      iteratee = options;\n      options = undefined;\n    }\n    if (options && options.includeEmpty) {\n      const n = this._rows.length;\n      for (let i = 1; i <= n; i++) {\n        iteratee(this.getRow(i), i);\n      }\n    } else {\n      this._rows.forEach(row => {\n        if (row && row.hasValues) {\n          iteratee(row, row.number);\n        }\n      });\n    }\n  }\n\n  // return all rows as sparse array\n  getSheetValues() {\n    const rows = [];\n    this._rows.forEach(row => {\n      if (row) {\n        rows[row.number] = row.values;\n      }\n    });\n    return rows;\n  }\n\n  // =========================================================================\n  // Cells\n\n  // returns the cell at [r,c] or address given by r. If not found, return undefined\n  findCell(r, c) {\n    const address = colCache.getAddress(r, c);\n    const row = this._rows[address.row - 1];\n    return row ? row.findCell(address.col) : undefined;\n  }\n\n  // return the cell at [r,c] or address given by r. If not found, create a new one.\n  getCell(r, c) {\n    const address = colCache.getAddress(r, c);\n    const row = this.getRow(address.row);\n    return row.getCellEx(address);\n  }\n\n  // =========================================================================\n  // Merge\n\n  // convert the range defined by ['tl:br'], [tl,br] or [t,l,b,r] into a single 'merged' cell\n  mergeCells() {\n    const dimensions = new Range(Array.prototype.slice.call(arguments, 0)); // convert arguments into Array\n\n    // check cells aren't already merged\n    _.each(this._merges, merge => {\n      if (merge.intersects(dimensions)) {\n        throw new Error('Cannot merge already merged cells');\n      }\n    });\n\n    // apply merge\n    const master = this.getCell(dimensions.top, dimensions.left);\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\n        // merge all but the master cell\n        if (i > dimensions.top || j > dimensions.left) {\n          this.getCell(i, j).merge(master);\n        }\n      }\n    }\n\n    // index merge\n    this._merges[master.address] = dimensions;\n  }\n\n  _unMergeMaster(master) {\n    // master is always top left of a rectangle\n    const merge = this._merges[master.address];\n    if (merge) {\n      for (let i = merge.top; i <= merge.bottom; i++) {\n        for (let j = merge.left; j <= merge.right; j++) {\n          this.getCell(i, j).unmerge();\n        }\n      }\n      delete this._merges[master.address];\n    }\n  }\n\n  get hasMerges() {\n    // return true if this._merges has a merge object\n    return _.some(this._merges, Boolean);\n  }\n\n  // scan the range defined by ['tl:br'], [tl,br] or [t,l,b,r] and if any cell is part of a merge,\n  // un-merge the group. Note this function can affect multiple merges and merge-blocks are\n  // atomic - either they're all merged or all un-merged.\n  unMergeCells() {\n    const dimensions = new Range(Array.prototype.slice.call(arguments, 0)); // convert arguments into Array\n\n    // find any cells in that range and unmerge them\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\n        const cell = this.findCell(i, j);\n        if (cell) {\n          if (cell.type === Enums.ValueType.Merge) {\n            // this cell merges to another master\n            this._unMergeMaster(cell.master);\n          } else if (this._merges[cell.address]) {\n            // this cell is a master\n            this._unMergeMaster(cell);\n          }\n        }\n      }\n    }\n  }\n\n  // ===========================================================================\n  // Shared Formula\n  fillFormula(range, formula, results) {\n    // Define formula for top-left cell and share to rest\n    const decoded = colCache.decode(range);\n    const {top, left, bottom, right} = decoded;\n    const width = right - left + 1;\n    const masterAddress = colCache.encodeAddress(top, left);\n\n    // work out result accessor\n    let getResult;\n    if (typeof results === 'function') {\n      getResult = results;\n    } else if (Array.isArray(results)) {\n      if (Array.isArray(results[0])) {\n        getResult = (row, col) => results[row - top][col - left];\n      } else {\n        getResult = (row, col) => results[((row - top) * width) + (col - left)];\n      }\n    } else {\n      getResult = () => undefined;\n    }\n    let first = true;\n    for (let r = top; r <= bottom; r++) {\n      for (let c = left; c <= right; c++) {\n        if (first) {\n          this.getCell(r, c).value = {\n            formula,\n            result: getResult(r, c),\n          };\n          first = false;\n        } else {\n          this.getCell(r, c).value = {\n            sharedFormula: masterAddress,\n            result: getResult(r, c),\n          };\n        }\n      }\n    }\n  }\n\n  // =========================================================================\n  // Images\n  addImage(imageId, range) {\n    const model = {\n      type: 'image',\n      imageId,\n      range,\n    };\n    this._media.push(new Image(this, model));\n  }\n\n  getImages() {\n    return this._media.filter(m => m.type === 'image');\n  }\n\n  addBackgroundImage(imageId) {\n    const model = {\n      type: 'background',\n      imageId,\n    };\n    this._media.push(new Image(this, model));\n  }\n\n  getBackgroundImageId() {\n    const image = this._media.find(m => m.type === 'background');\n    return image && image.imageId;\n  }\n\n  // =========================================================================\n  // Worksheet Protection\n  protect(password, options){\n    // TODO: make this function truly async\n    // perhaps marshal to worker thread or something\n    return new PromiseLib.Promise(resolve => {\n      this.sheetProtection = {\n        sheet : true,\n      };\n      if (password) {\n          this.sheetProtection.algorithmName = 'SHA-512';\n          this.sheetProtection.saltValue = Encryptor.randomBytes(16).toString('base64');\n          this.sheetProtection.spinCount = 100000;\n          this.sheetProtection.hashValue = Encryptor.convertPasswordToHash(password, 'SHA512', this.sheetProtection.saltValue, this.sheetProtection.spinCount);\n      }\n      if(options){\n        this.sheetProtection = Object.assign(this.sheetProtection, options);\n      }\n      resolve();\n    });\n  }\n\n  unprotect(){\n    this.sheetProtection = null;\n  }\n\n  // =========================================================================\n  // Tables\n  addTable(model) {\n    const table = new Table(this, model);\n    this.tables[model.name] = table;\n    return table;\n  }\n\n  getTable(name) {\n    return this.tables[name];\n  }\n\n  removeTable(name) {\n    delete this.tables[name];\n  }\n\n  getTables() {\n    return Object.values(this.tables);\n  }\n\n  // ===========================================================================\n  // Deprecated\n  get tabColor() {\n    // eslint-disable-next-line no-console\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\n    return this.properties.tabColor;\n  }\n\n  set tabColor(value) {\n    // eslint-disable-next-line no-console\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\n    this.properties.tabColor = value;\n  }\n\n  // ===========================================================================\n  // Model\n\n  get model() {\n    const model = {\n      id: this.id,\n      name: this.name,\n      dataValidations: this.dataValidations.model,\n      properties: this.properties,\n      state: this.state,\n      pageSetup: this.pageSetup,\n      headerFooter: this.headerFooter,\n      rowBreaks: this.rowBreaks,\n      views: this.views,\n      autoFilter: this.autoFilter,\n      media: this._media.map(medium => medium.model),\n      sheetProtection: this.sheetProtection,\n      tables: Object.values(this.tables).map(table => table.model),\n    };\n\n    // =================================================\n    // columns\n    model.cols = Column.toModel(this.columns);\n\n    // ==========================================================\n    // Rows\n    const rows = (model.rows = []);\n    const dimensions = (model.dimensions = new Range());\n    this._rows.forEach(row => {\n      const rowModel = row && row.model;\n      if (rowModel) {\n        dimensions.expand(rowModel.number, rowModel.min, rowModel.number, rowModel.max);\n        rows.push(rowModel);\n      }\n    });\n\n    // ==========================================================\n    // Merges\n    model.merges = [];\n    _.each(this._merges, merge => {\n      model.merges.push(merge.range);\n    });\n\n    return model;\n  }\n\n  _parseRows(model) {\n    this._rows = [];\n    model.rows.forEach(rowModel => {\n      const row = new Row(this, rowModel.number);\n      this._rows[row.number - 1] = row;\n      row.model = rowModel;\n    });\n  }\n\n  _parseMergeCells(model) {\n    _.each(model.mergeCells, merge => {\n      this.mergeCells(merge);\n    });\n  }\n\n  set model(value) {\n    this.name = value.name;\n    this._columns = Column.fromModel(this, value.cols);\n    this._parseRows(value);\n\n    this._parseMergeCells(value);\n    this.dataValidations = new DataValidations(value.dataValidations);\n    this.properties = value.properties;\n    this.pageSetup = value.pageSetup;\n    this.headerFooter = value.headerFooter;\n    this.views = value.views;\n    this.autoFilter = value.autoFilter;\n    this._media = value.media.map(medium => new Image(this, medium));\n    this.sheetProtection = value.sheetProtection;\n    this.tables = value.tables.reduce(\n      (tables, table) => {\n        const t = new Table;\n        t.model = table;\n        tables[table.name] = t;\n        return tables;\n      },\n      {}\n    );\n  }\n}\n\nmodule.exports = Worksheet;\n"],"file":"worksheet.js"}