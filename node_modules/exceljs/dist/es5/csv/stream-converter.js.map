{"version":3,"sources":["../../../lib/csv/stream-converter.js"],"names":["jconv","StreamConverter","module","exports","inner","options","innerEncoding","toUpperCase","outerEncoding","innerBOM","outerBOM","writeStarted","prototype","convertInwards","data","Buffer","convert","convertOutwards","addListener","event","handler","removeListener","write","encoding","callback","Function","undefined","length","bomless","copy","read","pipe","destination","reverseConverter","close","on","type","chunk","once","end","emit","value"],"mappings":"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","sourcesContent":["'use strict';\n\n// =======================================================================================================\n// StreamConverter\n//\n// convert between encoding schemes in a stream\n// Work in Progress - Will complete this at some point\nlet jconv;\n\nconst StreamConverter = (module.exports = function(inner, options) {\n  this.inner = inner;\n\n  options = options || {};\n  this.innerEncoding = (options.innerEncoding || 'UTF8').toUpperCase();\n  this.outerEncoding = (options.outerEncoding || 'UTF8').toUpperCase();\n\n  this.innerBOM = options.innerBOM || null;\n  this.outerBOM = options.outerBOM || null;\n\n  this.writeStarted = false;\n});\n\nStreamConverter.prototype.convertInwards = function(data) {\n  if (data) {\n    if (typeof data === 'string') {\n      data = new Buffer(data, this.outerEncoding);\n    }\n\n    if (this.innerEncoding !== this.outerEncoding) {\n      data = jconv.convert(data, this.outerEncoding, this.innerEncoding);\n    }\n  }\n\n  return data;\n};\nStreamConverter.prototype.convertOutwards = function(data) {\n  if (typeof data === 'string') {\n    data = new Buffer(data, this.innerEncoding);\n  }\n\n  if (this.innerEncoding !== this.outerEncoding) {\n    data = jconv.convert(data, this.innerEncoding, this.outerEncoding);\n  }\n  return data;\n};\n\nStreamConverter.prototype.addListener = function(event, handler) {\n  this.inner.addListener(event, handler);\n};\n\nStreamConverter.prototype.removeListener = function(event, handler) {\n  this.inner.removeListener(event, handler);\n};\n\nStreamConverter.prototype.write = function(data, encoding, callback) {\n  if (encoding instanceof Function) {\n    callback = encoding;\n    encoding = undefined;\n  }\n\n  if (!this.writeStarted) {\n    // if inner encoding has BOM, write it now\n    if (this.innerBOM) {\n      this.inner.write(this.innerBOM);\n    }\n\n    // if outer encoding has BOM, delete it now\n    if (this.outerBOM) {\n      if (data.length <= this.outerBOM.length) {\n        if (callback) {\n          callback();\n        }\n        return;\n      }\n      const bomless = new Buffer(data.length - this.outerBOM.length);\n      data.copy(bomless, 0, this.outerBOM.length, data.length);\n      data = bomless;\n    }\n\n    this.writeStarted = true;\n  }\n\n  this.inner.write(this.convertInwards(data), encoding ? this.innerEncoding : undefined, callback);\n};\n\nStreamConverter.prototype.read = function() {\n  // TBD\n};\n\nStreamConverter.prototype.pipe = function(destination, options) {\n  const reverseConverter = new StreamConverter(destination, {\n    innerEncoding: this.outerEncoding,\n    outerEncoding: this.innerEncoding,\n    innerBOM: this.outerBOM,\n    outerBOM: this.innerBOM,\n  });\n\n  this.inner.pipe(\n    reverseConverter,\n    options\n  );\n};\n\nStreamConverter.prototype.close = function() {\n  this.inner.close();\n};\n\nStreamConverter.prototype.on = function(type, callback) {\n  switch (type) {\n    case 'data':\n      this.inner.on('data', chunk => {\n        callback(this.convertOutwards(chunk));\n      });\n      return this;\n    default:\n      this.inner.on(type, callback);\n      return this;\n  }\n};\n\nStreamConverter.prototype.once = function(type, callback) {\n  this.inner.once(type, callback);\n};\n\nStreamConverter.prototype.end = function(chunk, encoding, callback) {\n  this.inner.end(this.convertInwards(chunk), this.innerEncoding, callback);\n};\n\nStreamConverter.prototype.emit = function(type, value) {\n  this.inner.emit(type, value);\n};\n"],"file":"stream-converter.js"}