{"version":3,"sources":["../../../lib/utils/col-cache.js"],"names":["colCache","_dictionary","_l2n","_n2l","_level","n","_fill","level","c","v","l1","l2","l3","Math","floor","l2n","l","length","Error","n2l","_hash","validateAddress","value","match","decodeAddress","addr","matchCol","col","colNumber","matchRow","row","rowNumber","parseInt","address","$col$row","getAddress","r","decode","parts","split","tl","br","result","top","min","left","bottom","max","right","dimensions","decodeEx","groups","sheetName","reference","startsWith","error","Object","assign","encodeAddress","encode","arguments","module","exports"],"mappings":"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","sourcesContent":["// =========================================================================\n// Column Letter to Number conversion\nconst colCache = {\n  _dictionary: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n  _l2n: {},\n  _n2l: [],\n  _level(n) {\n    if (n <= 26) {\n      return 1;\n    }\n    if (n <= 26 * 26) {\n      return 2;\n    }\n    return 3;\n  },\n  _fill(level) {\n    let c;\n    let v;\n    let l1;\n    let l2;\n    let l3;\n    let n = 1;\n    if (level >= 1) {\n      while (n <= 26) {\n        c = this._dictionary[n - 1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n    }\n    if (level >= 2) {\n      while (n <= 26 + (26 * 26)) {\n        v = n - (26 + 1);\n        l1 = v % 26;\n        l2 = Math.floor(v / 26);\n        c = this._dictionary[l2] + this._dictionary[l1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n    }\n    if (level >= 3) {\n      while (n <= 16384) {\n        v = n - ((26 * 26) + 26 + 1);\n        l1 = v % 26;\n        l2 = Math.floor(v / 26) % 26;\n        l3 = Math.floor(v / (26 * 26));\n        c = this._dictionary[l3] + this._dictionary[l2] + this._dictionary[l1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n    }\n  },\n  l2n(l) {\n    if (!this._l2n[l]) {\n      this._fill(l.length);\n    }\n    if (!this._l2n[l]) {\n      throw new Error(`Out of bounds. Invalid column letter: ${l}`);\n    }\n    return this._l2n[l];\n  },\n  n2l(n) {\n    if (n < 1 || n > 16384) {\n      throw new Error(`${n} is out of bounds. Excel supports columns from 1 to 16384`);\n    }\n    if (!this._n2l[n]) {\n      this._fill(this._level(n));\n    }\n    return this._n2l[n];\n  },\n\n  // =========================================================================\n  // Address processing\n  _hash: {},\n\n  // check if value looks like an address\n  validateAddress(value) {\n    if (!value.match(/^[A-Z]+\\d+$/)) {\n      throw new Error(`Invalid Address: ${value}`);\n    }\n    return true;\n  },\n\n  // convert address string into structure\n  decodeAddress(value) {\n    const addr = this._hash[value];\n    if (addr) {\n      return addr;\n    }\n    const matchCol = value.match(/[A-Z]+/);\n    let col;\n    let colNumber;\n    if (matchCol) {\n      col = matchCol[0];\n      colNumber = this.l2n(col);\n    }\n    const matchRow = value.match(/\\d+/);\n    let row;\n    let rowNumber;\n    if (matchRow) {\n      row = matchRow[0];\n      rowNumber = parseInt(row, 10);\n    }\n\n    // in case $row$col\n    value = (col || '') + (row || '');\n\n    const address = {\n      address: value,\n      col: colNumber,\n      row: rowNumber,\n      $col$row: `$${col || ''}$${row || ''}`,\n    };\n\n    // mem fix - cache only the tl 100x100 square\n    if (colNumber <= 100 && rowNumber <= 100) {\n      this._hash[value] = address;\n      this._hash[address.$col$row] = address;\n    }\n\n    return address;\n  },\n\n  // convert r,c into structure (if only 1 arg, assume r is address string)\n  getAddress(r, c) {\n    if (c) {\n      const address = this.n2l(c) + r;\n      return this.decodeAddress(address);\n    }\n    return this.decodeAddress(r);\n  },\n\n  // convert [address], [tl:br] into address structures\n  decode(value) {\n    const parts = value.split(':');\n    if (parts.length === 2) {\n      const tl = this.decodeAddress(parts[0]);\n      const br = this.decodeAddress(parts[1]);\n      const result = {\n        top: Math.min(tl.row, br.row),\n        left: Math.min(tl.col, br.col),\n        bottom: Math.max(tl.row, br.row),\n        right: Math.max(tl.col, br.col),\n      };\n      // reconstruct tl, br and dimensions\n      result.tl = this.n2l(result.left) + result.top;\n      result.br = this.n2l(result.right) + result.bottom;\n      result.dimensions = `${result.tl}:${result.br}`;\n      return result;\n    }\n    return this.decodeAddress(value);\n  },\n\n  // convert [sheetName!][$]col[$]row[[$]col[$]row] into address or range structures\n  decodeEx(value) {\n    const groups = value.match(/(?:(?:(?:'((?:[^']|'')*)')|([^'^ !]*))!)?(.*)/);\n\n    const sheetName = groups[1] || groups[2]; // Qouted and unqouted groups\n    const reference = groups[3]; // Remaining address\n\n    const parts = reference.split(':');\n    if (parts.length > 1) {\n      let tl = this.decodeAddress(parts[0]);\n      let br = this.decodeAddress(parts[1]);\n      const top = Math.min(tl.row, br.row);\n      const left = Math.min(tl.col, br.col);\n      const bottom = Math.max(tl.row, br.row);\n      const right = Math.max(tl.col, br.col);\n\n      tl = this.n2l(left) + top;\n      br = this.n2l(right) + bottom;\n\n      return {\n        top,\n        left,\n        bottom,\n        right,\n        sheetName,\n        tl: {address: tl, col: left, row: top, $col$row: `$${this.n2l(left)}$${top}`, sheetName},\n        br: {address: br, col: right, row: bottom, $col$row: `$${this.n2l(right)}$${bottom}`, sheetName},\n        dimensions: `${tl}:${br}`,\n      };\n    }\n    if (reference.startsWith('#')) {\n      return sheetName ? {sheetName, error: reference} : {error: reference};\n    }\n\n    const address = this.decodeAddress(reference);\n    return sheetName ? Object.assign({sheetName}, address) : address;\n  },\n\n  // convert row,col into address string\n  encodeAddress(row, col) {\n    return colCache.n2l(col) + row;\n  },\n\n  // convert row,col into string address or t,l,b,r into range\n  encode() {\n    switch (arguments.length) {\n      case 2:\n        return colCache.encodeAddress(arguments[0], arguments[1]);\n      case 4:\n        return `${colCache.encodeAddress(arguments[0], arguments[1])}:${colCache.encodeAddress(arguments[2], arguments[3])}`;\n      default:\n        throw new Error('Can only encode with 2 or 4 arguments');\n    }\n  },\n};\n\nmodule.exports = colCache;\n"],"file":"col-cache.js"}