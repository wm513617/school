{"version":3,"sources":["../../../../../lib/xlsx/xform/drawing/drawing-xform.js"],"names":["colCache","require","XmlStream","BaseXform","TwoCellAnchorXform","OneCellAnchorXform","getAnchorType","model","range","decode","br","DrawingXform","map","anchors","forEach","item","index","anchorType","anchor","prepare","xmlStream","openXml","StdDocAttributes","openNode","tag","DRAWING_ATTRIBUTES","render","closeNode","node","parser","parseOpen","name","reset","text","parseText","parseClose","push","undefined","options","reconcile","module","exports"],"mappings":"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","sourcesContent":["const colCache = require('../../../utils/col-cache');\nconst XmlStream = require('../../../utils/xml-stream');\n\nconst BaseXform = require('../base-xform');\nconst TwoCellAnchorXform = require('./two-cell-anchor-xform');\nconst OneCellAnchorXform = require('./one-cell-anchor-xform');\n\nfunction getAnchorType(model) {\n  const range = typeof model.range === 'string' ? colCache.decode(model.range) : model.range;\n\n  return range.br ? 'xdr:twoCellAnchor' : 'xdr:oneCellAnchor';\n}\n\nclass DrawingXform extends BaseXform {\n  constructor() {\n    super();\n\n    this.map = {\n      'xdr:twoCellAnchor': new TwoCellAnchorXform(),\n      'xdr:oneCellAnchor': new OneCellAnchorXform(),\n    };\n  }\n\n  prepare(model) {\n    model.anchors.forEach((item, index) => {\n      item.anchorType = getAnchorType(item);\n      const anchor = this.map[item.anchorType];\n      anchor.prepare(item, {index});\n    });\n  }\n\n  get tag() {\n    return 'xdr:wsDr';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n    xmlStream.openNode(this.tag, DrawingXform.DRAWING_ATTRIBUTES);\n\n    model.anchors.forEach(item => {\n      const anchor = this.map[item.anchorType];\n      anchor.render(xmlStream, item);\n    });\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.tag:\n        this.reset();\n        this.model = {\n          anchors: [],\n        };\n        break;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n        break;\n    }\n    return true;\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.anchors.push(this.parser.model);\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case this.tag:\n        return false;\n      default:\n        // could be some unrecognised tags\n        return true;\n    }\n  }\n\n  reconcile(model, options) {\n    model.anchors.forEach(anchor => {\n      if (anchor.br) {\n        this.map['xdr:twoCellAnchor'].reconcile(anchor, options);\n      } else {\n        this.map['xdr:oneCellAnchor'].reconcile(anchor, options);\n      }\n    });\n  }\n}\n\n\nDrawingXform.DRAWING_ATTRIBUTES = {\n  'xmlns:xdr': 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing',\n  'xmlns:a': 'http://schemas.openxmlformats.org/drawingml/2006/main',\n};\n\nmodule.exports = DrawingXform;\n"],"file":"drawing-xform.js"}