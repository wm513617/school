{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/data-validations-xform.js"],"names":["_","require","utils","BaseXform","assign","definedName","attributes","name","defaultValue","value","undefined","parseBool","assignBool","DataValidationsXform","xmlStream","model","count","Object","keys","length","openNode","each","address","type","addAttribute","operator","allowBlank","showInputMessage","promptTitle","prompt","showErrorMessage","errorStyle","errorTitle","error","formulae","forEach","formula","index","writeText","dateToExcel","closeNode","node","_address","sqref","_definedName","_formula","text","push","join","parseInt","parseFloat","excelToDate","module","exports"],"mappings":"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","sourcesContent":["const _ = require('../../../utils/under-dash');\nconst utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\n\nfunction assign(definedName, attributes, name, defaultValue) {\n  const value = attributes[name];\n  if (value !== undefined) {\n    definedName[name] = value;\n  } else if (defaultValue !== undefined) {\n    definedName[name] = defaultValue;\n  }\n}\nfunction parseBool(value) {\n  switch (value) {\n    case '1':\n    case 'true':\n      return true;\n    default:\n      return false;\n  }\n}\nfunction assignBool(definedName, attributes, name, defaultValue) {\n  const value = attributes[name];\n  if (value !== undefined) {\n    definedName[name] = parseBool(value);\n  } else if (defaultValue !== undefined) {\n    definedName[name] = defaultValue;\n  }\n}\n\nclass DataValidationsXform extends BaseXform {\n  get tag() {\n    return 'dataValidations';\n  }\n\n  render(xmlStream, model) {\n    const count = model && Object.keys(model).length;\n    if (count) {\n      xmlStream.openNode('dataValidations', {count});\n\n      _.each(model, (value, address) => {\n        xmlStream.openNode('dataValidation');\n        if (value.type !== 'any') {\n          xmlStream.addAttribute('type', value.type);\n\n          if (value.operator && value.type !== 'list' && value.operator !== 'between') {\n            xmlStream.addAttribute('operator', value.operator);\n          }\n          if (value.allowBlank) {\n            xmlStream.addAttribute('allowBlank', '1');\n          }\n        }\n        if (value.showInputMessage) {\n          xmlStream.addAttribute('showInputMessage', '1');\n        }\n        if (value.promptTitle) {\n          xmlStream.addAttribute('promptTitle', value.promptTitle);\n        }\n        if (value.prompt) {\n          xmlStream.addAttribute('prompt', value.prompt);\n        }\n        if (value.showErrorMessage) {\n          xmlStream.addAttribute('showErrorMessage', '1');\n        }\n        if (value.errorStyle) {\n          xmlStream.addAttribute('errorStyle', value.errorStyle);\n        }\n        if (value.errorTitle) {\n          xmlStream.addAttribute('errorTitle', value.errorTitle);\n        }\n        if (value.error) {\n          xmlStream.addAttribute('error', value.error);\n        }\n        xmlStream.addAttribute('sqref', address);\n        (value.formulae || []).forEach((formula, index) => {\n          xmlStream.openNode(`formula${index + 1}`);\n          if (value.type === 'date') {\n            xmlStream.writeText(utils.dateToExcel(formula));\n          } else {\n            xmlStream.writeText(formula);\n          }\n          xmlStream.closeNode();\n        });\n        xmlStream.closeNode();\n      });\n      xmlStream.closeNode();\n    }\n  }\n\n  parseOpen(node) {\n    switch (node.name) {\n      case 'dataValidations':\n        this.model = {};\n        return true;\n\n      case 'dataValidation': {\n        this._address = node.attributes.sqref;\n        const definedName = node.attributes.type\n          ? {\n            type: node.attributes.type,\n            formulae: [],\n          }\n          : {\n            type: 'any',\n          };\n\n        if (node.attributes.type) {\n          assignBool(definedName, node.attributes, 'allowBlank');\n        }\n        assignBool(definedName, node.attributes, 'showInputMessage');\n        assignBool(definedName, node.attributes, 'showErrorMessage');\n\n        switch (definedName.type) {\n          case 'any':\n          case 'list':\n          case 'custom':\n            break;\n          default:\n            assign(definedName, node.attributes, 'operator', 'between');\n            break;\n        }\n        assign(definedName, node.attributes, 'promptTitle');\n        assign(definedName, node.attributes, 'prompt');\n        assign(definedName, node.attributes, 'errorStyle');\n        assign(definedName, node.attributes, 'errorTitle');\n        assign(definedName, node.attributes, 'error');\n\n        this._definedName = definedName;\n        return true;\n      }\n\n      case 'formula1':\n      case 'formula2':\n        this._formula = [];\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  parseText(text) {\n    this._formula.push(text);\n  }\n\n  parseClose(name) {\n    switch (name) {\n      case 'dataValidations':\n        return false;\n      case 'dataValidation':\n        if (!this._definedName.formulae || !this._definedName.formulae.length) {\n          delete this._definedName.formulae;\n          delete this._definedName.operator;\n        }\n        this.model[this._address] = this._definedName;\n        return true;\n      case 'formula1':\n      case 'formula2': {\n        let formula = this._formula.join('');\n        switch (this._definedName.type) {\n          case 'whole':\n          case 'textLength':\n            formula = parseInt(formula, 10);\n            break;\n          case 'decimal':\n            formula = parseFloat(formula);\n            break;\n          case 'date':\n            formula = utils.excelToDate(parseFloat(formula));\n            break;\n          default:\n            break;\n        }\n        this._definedName.formulae.push(formula);\n        return true;\n      }\n      default:\n        return true;\n    }\n  }\n}\n\nmodule.exports = DataValidationsXform;\n"],"file":"data-validations-xform.js"}