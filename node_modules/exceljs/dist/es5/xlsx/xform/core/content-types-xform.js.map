{"version":3,"sources":["../../../../../lib/xlsx/xform/core/content-types-xform.js"],"names":["XmlStream","require","BaseXform","ContentTypesXform","xmlStream","model","openXml","StdDocAttributes","openNode","PROPERTY_ATTRIBUTES","mediaHash","media","forEach","medium","type","imageType","extension","leafNode","Extension","ContentType","PartName","worksheets","worksheet","name","id","hasSharedStrings","sharedStrings","count","tables","table","target","drawings","drawing","commentRefs","commentName","closeNode","xmlns","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,2BAAD,CAAzB;;AAEA,IAAMC,SAAS,GAAGD,OAAO,CAAC,eAAD,CAAzB,C,CAEA;AACA;;;IACME,iB;;;;;;;;;;;;;2BACGC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAACE,OAAV,CAAkBN,SAAS,CAACO,gBAA5B;AAEAH,MAAAA,SAAS,CAACI,QAAV,CAAmB,OAAnB,EAA4BL,iBAAiB,CAACM,mBAA9C;AAEA,UAAMC,SAAS,GAAG,EAAlB;AACA,OAACL,KAAK,CAACM,KAAN,IAAe,EAAhB,EAAoBC,OAApB,CAA4B,UAAAC,MAAM,EAAI;AACpC,YAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,cAAMC,SAAS,GAAGF,MAAM,CAACG,SAAzB;;AACA,cAAI,CAACN,SAAS,CAACK,SAAD,CAAd,EAA2B;AACzBL,YAAAA,SAAS,CAACK,SAAD,CAAT,GAAuB,IAAvB;AACAX,YAAAA,SAAS,CAACa,QAAV,CAAmB,SAAnB,EAA8B;AAACC,cAAAA,SAAS,EAAEH,SAAZ;AAAuBI,cAAAA,WAAW,kBAAWJ,SAAX;AAAlC,aAA9B;AACD;AACF;AACF,OARD;AAUAX,MAAAA,SAAS,CAACa,QAAV,CAAmB,SAAnB,EAA8B;AAACC,QAAAA,SAAS,EAAE,MAAZ;AAAoBC,QAAAA,WAAW,EAAE;AAAjC,OAA9B;AACAf,MAAAA,SAAS,CAACa,QAAV,CAAmB,SAAnB,EAA8B;AAACC,QAAAA,SAAS,EAAE,KAAZ;AAAmBC,QAAAA,WAAW,EAAE;AAAhC,OAA9B;AAEAf,MAAAA,SAAS,CAACa,QAAV,CAAmB,UAAnB,EAA+B;AAC7BG,QAAAA,QAAQ,EAAE,kBADmB;AAE7BD,QAAAA,WAAW,EAAE;AAFgB,OAA/B;AAKAd,MAAAA,KAAK,CAACgB,UAAN,CAAiBT,OAAjB,CAAyB,UAAAU,SAAS,EAAI;AACpC,YAAMC,IAAI,iCAA0BD,SAAS,CAACE,EAApC,SAAV;AACApB,QAAAA,SAAS,CAACa,QAAV,CAAmB,UAAnB,EAA+B;AAACG,UAAAA,QAAQ,EAAEG,IAAX;AAAiBJ,UAAAA,WAAW,EAAE;AAA9B,SAA/B;AACD,OAHD;AAKAf,MAAAA,SAAS,CAACa,QAAV,CAAmB,UAAnB,EAA+B;AAACG,QAAAA,QAAQ,EAAE,sBAAX;AAAmCD,QAAAA,WAAW,EAAE;AAAhD,OAA/B;AACAf,MAAAA,SAAS,CAACa,QAAV,CAAmB,UAAnB,EAA+B;AAACG,QAAAA,QAAQ,EAAE,gBAAX;AAA6BD,QAAAA,WAAW,EAAE;AAA1C,OAA/B;AAEA,UAAMM,gBAAgB,GAAGpB,KAAK,CAACqB,aAAN,IAAuBrB,KAAK,CAACqB,aAAN,CAAoBC,KAApE;;AACA,UAAIF,gBAAJ,EAAsB;AACpBrB,QAAAA,SAAS,CAACa,QAAV,CAAmB,UAAnB,EAA+B;AAC7BG,UAAAA,QAAQ,EAAE,uBADmB;AAE7BD,UAAAA,WAAW,EAAE;AAFgB,SAA/B;AAID;;AAED,UAAId,KAAK,CAACuB,MAAV,EAAkB;AAChBvB,QAAAA,KAAK,CAACuB,MAAN,CAAahB,OAAb,CAAqB,UAAAiB,KAAK,EAAI;AAC5BzB,UAAAA,SAAS,CAACa,QAAV,CAAmB,UAAnB,EAA+B;AAC7BG,YAAAA,QAAQ,uBAAgBS,KAAK,CAACC,MAAtB,CADqB;AAE7BX,YAAAA,WAAW,EAAE;AAFgB,WAA/B;AAID,SALD;AAMD;;AAED,UAAId,KAAK,CAAC0B,QAAV,EAAoB;AAClB1B,QAAAA,KAAK,CAAC0B,QAAN,CAAenB,OAAf,CAAuB,UAAAoB,OAAO,EAAI;AAChC5B,UAAAA,SAAS,CAACa,QAAV,CAAmB,UAAnB,EAA+B;AAC7BG,YAAAA,QAAQ,yBAAkBY,OAAO,CAACT,IAA1B,SADqB;AAE7BJ,YAAAA,WAAW,EAAE;AAFgB,WAA/B;AAID,SALD;AAMD;;AAED,UAAId,KAAK,CAAC4B,WAAV,EAAuB;AACrB7B,QAAAA,SAAS,CAACa,QAAV,CAAmB,SAAnB,EAA8B;AAC5BC,UAAAA,SAAS,EAAE,KADiB;AAE5BC,UAAAA,WAAW,EAAE;AAFe,SAA9B;AAKAd,QAAAA,KAAK,CAAC4B,WAAN,CAAkBrB,OAAlB,CAA0B,gBAAmB;AAAA,cAAjBsB,WAAiB,QAAjBA,WAAiB;AAC3C9B,UAAAA,SAAS,CAACa,QAAV,CAAmB,UAAnB,EAA+B;AAC7BG,YAAAA,QAAQ,gBAASc,WAAT,SADqB;AAE7Bf,YAAAA,WAAW,EAAE;AAFgB,WAA/B;AAID,SALD;AAMD;;AAEDf,MAAAA,SAAS,CAACa,QAAV,CAAmB,UAAnB,EAA+B;AAACG,QAAAA,QAAQ,EAAE,oBAAX;AAAiCD,QAAAA,WAAW,EAAE;AAA9C,OAA/B;AACAf,MAAAA,SAAS,CAACa,QAAV,CAAmB,UAAnB,EAA+B;AAACG,QAAAA,QAAQ,EAAE,mBAAX;AAAgCD,QAAAA,WAAW,EAAE;AAA7C,OAA/B;AAEAf,MAAAA,SAAS,CAAC+B,SAAV;AACD;;;gCAEW;AACV,aAAO,KAAP;AACD;;;gCAEW,CAEX;;;iCAEY;AACX,aAAO,KAAP;AACD;;;;EAzF6BjC,S;;AA4FhCC,iBAAiB,CAACM,mBAAlB,GAAwC;AACtC2B,EAAAA,KAAK,EAAE;AAD+B,CAAxC;AAIAC,MAAM,CAACC,OAAP,GAAiBnC,iBAAjB","sourcesContent":["const XmlStream = require('../../../utils/xml-stream');\n\nconst BaseXform = require('../base-xform');\n\n// used for rendering the [Content_Types].xml file\n// not used for parsing\nclass ContentTypesXform extends BaseXform {\n  render(xmlStream, model) {\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n\n    xmlStream.openNode('Types', ContentTypesXform.PROPERTY_ATTRIBUTES);\n\n    const mediaHash = {};\n    (model.media || []).forEach(medium => {\n      if (medium.type === 'image') {\n        const imageType = medium.extension;\n        if (!mediaHash[imageType]) {\n          mediaHash[imageType] = true;\n          xmlStream.leafNode('Default', {Extension: imageType, ContentType: `image/${imageType}`});\n        }\n      }\n    });\n\n    xmlStream.leafNode('Default', {Extension: 'rels', ContentType: 'application/vnd.openxmlformats-package.relationships+xml'});\n    xmlStream.leafNode('Default', {Extension: 'xml', ContentType: 'application/xml'});\n\n    xmlStream.leafNode('Override', {\n      PartName: '/xl/workbook.xml',\n      ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',\n    });\n\n    model.worksheets.forEach(worksheet => {\n      const name = `/xl/worksheets/sheet${worksheet.id}.xml`;\n      xmlStream.leafNode('Override', {PartName: name, ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'});\n    });\n\n    xmlStream.leafNode('Override', {PartName: '/xl/theme/theme1.xml', ContentType: 'application/vnd.openxmlformats-officedocument.theme+xml'});\n    xmlStream.leafNode('Override', {PartName: '/xl/styles.xml', ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'});\n\n    const hasSharedStrings = model.sharedStrings && model.sharedStrings.count;\n    if (hasSharedStrings) {\n      xmlStream.leafNode('Override', {\n        PartName: '/xl/sharedStrings.xml',\n        ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',\n      });\n    }\n\n    if (model.tables) {\n      model.tables.forEach(table => {\n        xmlStream.leafNode('Override', {\n          PartName: `/xl/tables/${table.target}`,\n          ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml',\n        });\n      });\n    }\n\n    if (model.drawings) {\n      model.drawings.forEach(drawing => {\n        xmlStream.leafNode('Override', {\n          PartName: `/xl/drawings/${drawing.name}.xml`,\n          ContentType: 'application/vnd.openxmlformats-officedocument.drawing+xml',\n        });\n      });\n    }\n\n    if (model.commentRefs) {\n      xmlStream.leafNode('Default', {\n        Extension: 'vml',\n        ContentType: 'application/vnd.openxmlformats-officedocument.vmlDrawing',\n      });\n\n      model.commentRefs.forEach(({commentName}) => {\n        xmlStream.leafNode('Override', {\n          PartName: `/xl/${commentName}.xml`,\n          ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml',\n        });\n      });\n    }\n\n    xmlStream.leafNode('Override', {PartName: '/docProps/core.xml', ContentType: 'application/vnd.openxmlformats-package.core-properties+xml'});\n    xmlStream.leafNode('Override', {PartName: '/docProps/app.xml', ContentType: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'});\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen() {\n    return false;\n  }\n\n  parseText() {\n\n  }\n\n  parseClose() {\n    return false;\n  }\n}\n\nContentTypesXform.PROPERTY_ATTRIBUTES = {\n  xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types',\n};\n\nmodule.exports = ContentTypesXform;\n"],"file":"content-types-xform.js"}