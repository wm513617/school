{"version":3,"sources":["../../../../../lib/xlsx/xform/style/numfmt-xform.js"],"names":["_","require","defaultNumFormats","BaseXform","hashDefaultFormats","hash","each","dnf","id","f","parseInt","defaultFmtHash","NumFmtXform","formatCode","xmlStream","model","leafNode","numFmtId","node","name","attributes","replace","getDefaultFmtId","getDefaultFmtCode","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,CAAC,GAAGC,OAAO,CAAC,2BAAD,CAAjB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,yBAAD,CAAjC;;AAEA,IAAME,SAAS,GAAGF,OAAO,CAAC,eAAD,CAAzB;;AAEA,SAASG,kBAAT,GAA8B;AAC5B,MAAMC,IAAI,GAAG,EAAb;;AACAL,EAAAA,CAAC,CAACM,IAAF,CAAOJ,iBAAP,EAA0B,UAACK,GAAD,EAAMC,EAAN,EAAa;AACrC,QAAID,GAAG,CAACE,CAAR,EAAW;AACTJ,MAAAA,IAAI,CAACE,GAAG,CAACE,CAAL,CAAJ,GAAcC,QAAQ,CAACF,EAAD,EAAK,EAAL,CAAtB;AACD,KAHoC,CAIrC;;AACD,GALD;;AAMA,SAAOH,IAAP;AACD;;AACD,IAAMM,cAAc,GAAGP,kBAAkB,EAAzC,C,CAEA;;IACMQ,W;;;;;AACJ,uBAAYJ,EAAZ,EAAgBK,UAAhB,EAA4B;AAAA;;AAAA;;AAC1B;AAEA,UAAKL,EAAL,GAAUA,EAAV;AACA,UAAKK,UAAL,GAAkBA,UAAlB;AAJ0B;AAK3B;;;;2BAMMC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAACE,QAAV,CAAmB,QAAnB,EAA6B;AAACC,QAAAA,QAAQ,EAAEF,KAAK,CAACP,EAAjB;AAAqBK,QAAAA,UAAU,EAAEE,KAAK,CAACF;AAAvC,OAA7B;AACD;;;8BAESK,I,EAAM;AACd,cAAQA,IAAI,CAACC,IAAb;AACE,aAAK,QAAL;AACE,eAAKJ,KAAL,GAAa;AACXP,YAAAA,EAAE,EAAEE,QAAQ,CAACQ,IAAI,CAACE,UAAL,CAAgBH,QAAjB,EAA2B,EAA3B,CADD;AAEXJ,YAAAA,UAAU,EAAEK,IAAI,CAACE,UAAL,CAAgBP,UAAhB,CAA2BQ,OAA3B,CAAmC,UAAnC,EAA+C,IAA/C;AAFD,WAAb;AAIA,iBAAO,IAAP;;AACF;AACE,iBAAO,KAAP;AARJ;AAUD;;;gCAEW,CACX;;;iCAEY;AACX,aAAO,KAAP;AACD;;;wBA1BS;AACR,aAAO,QAAP;AACD;;;;EAVuBlB,S;;AAqC1BS,WAAW,CAACU,eAAZ,GAA8B,SAASA,eAAT,CAAyBT,UAAzB,EAAqC;AACjE,SAAOF,cAAc,CAACE,UAAD,CAArB;AACD,CAFD;;AAIAD,WAAW,CAACW,iBAAZ,GAAgC,SAASA,iBAAT,CAA2BN,QAA3B,EAAqC;AACnE,SAAOf,iBAAiB,CAACe,QAAD,CAAjB,IAA+Bf,iBAAiB,CAACe,QAAD,CAAjB,CAA4BR,CAAlE;AACD,CAFD;;AAIAe,MAAM,CAACC,OAAP,GAAiBb,WAAjB","sourcesContent":["const _ = require('../../../utils/under-dash');\nconst defaultNumFormats = require('../../defaultnumformats');\n\nconst BaseXform = require('../base-xform');\n\nfunction hashDefaultFormats() {\n  const hash = {};\n  _.each(defaultNumFormats, (dnf, id) => {\n    if (dnf.f) {\n      hash[dnf.f] = parseInt(id, 10);\n    }\n    // at some point, add the other cultures here...\n  });\n  return hash;\n}\nconst defaultFmtHash = hashDefaultFormats();\n\n// NumFmt encapsulates translation between number format and xlsx\nclass NumFmtXform extends BaseXform {\n  constructor(id, formatCode) {\n    super();\n\n    this.id = id;\n    this.formatCode = formatCode;\n  }\n\n  get tag() {\n    return 'numFmt';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.leafNode('numFmt', {numFmtId: model.id, formatCode: model.formatCode});\n  }\n\n  parseOpen(node) {\n    switch (node.name) {\n      case 'numFmt':\n        this.model = {\n          id: parseInt(node.attributes.numFmtId, 10),\n          formatCode: node.attributes.formatCode.replace(/[\\\\](.)/g, '$1'),\n        };\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  parseText() {\n  }\n\n  parseClose() {\n    return false;\n  }\n}\n\nNumFmtXform.getDefaultFmtId = function getDefaultFmtId(formatCode) {\n  return defaultFmtHash[formatCode];\n};\n\nNumFmtXform.getDefaultFmtCode = function getDefaultFmtCode(numFmtId) {\n  return defaultNumFormats[numFmtId] && defaultNumFormats[numFmtId].f;\n};\n\nmodule.exports = NumFmtXform;\n"],"file":"numfmt-xform.js"}