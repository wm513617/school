{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/rich-text-xform.js"],"names":["TextXform","require","FontXform","BaseXform","RichTextXform","model","xmlStream","openNode","font","fontXform","render","textXform","text","closeNode","node","parser","parseOpen","name","parseText","undefined","parseClose","_textXform","_fontXform","FONT_OPTIONS","tagName","fontNameTag","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAzB;;AAEA,IAAME,SAAS,GAAGF,OAAO,CAAC,eAAD,CAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IAEMG,a;;;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB;AAEA,UAAKA,KAAL,GAAaA,KAAb;AAHiB;AAIlB;;;;2BAcMC,S,EAAWD,K,EAAO;AACvBA,MAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAtB;AAEAC,MAAAA,SAAS,CAACC,QAAV,CAAmB,GAAnB;;AACA,UAAIF,KAAK,CAACG,IAAV,EAAgB;AACd,aAAKC,SAAL,CAAeC,MAAf,CAAsBJ,SAAtB,EAAiCD,KAAK,CAACG,IAAvC;AACD;;AACD,WAAKG,SAAL,CAAeD,MAAf,CAAsBJ,SAAtB,EAAiCD,KAAK,CAACO,IAAvC;AACAN,MAAAA,SAAS,CAACO,SAAV;AACD;;;8BAESC,I,EAAM;AACd,UAAI,KAAKC,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYC,SAAZ,CAAsBF,IAAtB;AACA,eAAO,IAAP;AACD;;AACD,cAAQA,IAAI,CAACG,IAAb;AACE,aAAK,GAAL;AACE,eAAKZ,KAAL,GAAa,EAAb;AACA,iBAAO,IAAP;;AACF,aAAK,GAAL;AACE,eAAKU,MAAL,GAAc,KAAKJ,SAAnB;AACA,eAAKI,MAAL,CAAYC,SAAZ,CAAsBF,IAAtB;AACA,iBAAO,IAAP;;AACF,aAAK,KAAL;AACE,eAAKC,MAAL,GAAc,KAAKN,SAAnB;AACA,eAAKM,MAAL,CAAYC,SAAZ,CAAsBF,IAAtB;AACA,iBAAO,IAAP;;AACF;AACE,iBAAO,KAAP;AAbJ;AAeD;;;8BAESF,I,EAAM;AACd,UAAI,KAAKG,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYG,SAAZ,CAAsBN,IAAtB;AACD;AACF;;;+BAEUK,I,EAAM;AACf,cAAQA,IAAR;AACE,aAAK,GAAL;AACE,iBAAO,KAAP;;AACF,aAAK,GAAL;AACE,eAAKZ,KAAL,CAAWO,IAAX,GAAkB,KAAKG,MAAL,CAAYV,KAA9B;AACA,eAAKU,MAAL,GAAcI,SAAd;AACA,iBAAO,IAAP;;AACF,aAAK,KAAL;AACE,eAAKd,KAAL,CAAWG,IAAX,GAAkB,KAAKO,MAAL,CAAYV,KAA9B;AACA,eAAKU,MAAL,GAAcI,SAAd;AACA,iBAAO,IAAP;;AACF;AACE,cAAI,KAAKJ,MAAT,EAAiB;AACf,iBAAKA,MAAL,CAAYK,UAAZ,CAAuBH,IAAvB;AACD;;AACD,iBAAO,IAAP;AAfJ;AAiBD;;;wBArES;AACR,aAAO,GAAP;AACD;;;wBAEe;AACd,aAAO,KAAKI,UAAL,KAAoB,KAAKA,UAAL,GAAkB,IAAIrB,SAAJ,EAAtC,CAAP;AACD;;;wBAEe;AACd,aAAO,KAAKsB,UAAL,KAAoB,KAAKA,UAAL,GAAkB,IAAIpB,SAAJ,CAAcE,aAAa,CAACmB,YAA5B,CAAtC,CAAP;AACD;;;;EAjByBpB,S;;AA+E5BC,aAAa,CAACmB,YAAd,GAA6B;AAC3BC,EAAAA,OAAO,EAAE,KADkB;AAE3BC,EAAAA,WAAW,EAAE;AAFc,CAA7B;AAKAC,MAAM,CAACC,OAAP,GAAiBvB,aAAjB","sourcesContent":["const TextXform = require('./text-xform');\nconst FontXform = require('../style/font-xform');\n\nconst BaseXform = require('../base-xform');\n\n// <r>\n//   <rPr>\n//     <sz val=\"11\"/>\n//     <color theme=\"1\" tint=\"5\"/>\n//     <rFont val=\"Calibri\"/>\n//     <family val=\"2\"/>\n//     <scheme val=\"minor\"/>\n//   </rPr>\n//   <t xml:space=\"preserve\"> is </t>\n// </r>\n\nclass RichTextXform extends BaseXform {\n  constructor(model) {\n    super();\n\n    this.model = model;\n  }\n\n  get tag() {\n    return 'r';\n  }\n\n  get textXform() {\n    return this._textXform || (this._textXform = new TextXform());\n  }\n\n  get fontXform() {\n    return this._fontXform || (this._fontXform = new FontXform(RichTextXform.FONT_OPTIONS));\n  }\n\n  render(xmlStream, model) {\n    model = model || this.model;\n\n    xmlStream.openNode('r');\n    if (model.font) {\n      this.fontXform.render(xmlStream, model.font);\n    }\n    this.textXform.render(xmlStream, model.text);\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case 'r':\n        this.model = {};\n        return true;\n      case 't':\n        this.parser = this.textXform;\n        this.parser.parseOpen(node);\n        return true;\n      case 'rPr':\n        this.parser = this.fontXform;\n        this.parser.parseOpen(node);\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    switch (name) {\n      case 'r':\n        return false;\n      case 't':\n        this.model.text = this.parser.model;\n        this.parser = undefined;\n        return true;\n      case 'rPr':\n        this.model.font = this.parser.model;\n        this.parser = undefined;\n        return true;\n      default:\n        if (this.parser) {\n          this.parser.parseClose(name);\n        }\n        return true;\n    }\n  }\n}\n\nRichTextXform.FONT_OPTIONS = {\n  tagName: 'rPr',\n  fontNameTag: 'rFont',\n};\n\nmodule.exports = RichTextXform;\n"],"file":"rich-text-xform.js"}