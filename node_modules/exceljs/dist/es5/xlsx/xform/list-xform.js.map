{"version":3,"sources":["../../../../lib/xlsx/xform/list-xform.js"],"names":["BaseXform","require","ListXform","options","tag","always","count","empty","$count","$","childXform","maxItems","model","forEach","childModel","index","prepare","xmlStream","length","openNode","addAttribute","render","closeNode","leafNode","node","parser","parseOpen","name","text","parseText","parseClose","push","undefined","Error","reconcile","module","exports"],"mappings":"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","sourcesContent":["const BaseXform = require('./base-xform');\n\nclass ListXform extends BaseXform {\n  constructor(options) {\n    super();\n\n    this.tag = options.tag;\n    this.always = !!options.always;\n    this.count = options.count;\n    this.empty = options.empty;\n    this.$count = options.$count || 'count';\n    this.$ = options.$;\n    this.childXform = options.childXform;\n    this.maxItems = options.maxItems;\n  }\n\n  prepare(model, options) {\n    const {childXform} = this;\n    if (model) {\n      model.forEach((childModel, index) => {\n        options.index = index;\n        childXform.prepare(childModel, options);\n      });\n    }\n  }\n\n  render(xmlStream, model) {\n    if (this.always || (model && model.length)) {\n      xmlStream.openNode(this.tag, this.$);\n      if (this.count) {\n        xmlStream.addAttribute(this.$count, (model && model.length) || 0);\n      }\n\n      const {childXform} = this;\n      (model || []).forEach((childModel, index) => {\n        childXform.render(xmlStream, childModel, index);\n      });\n\n      xmlStream.closeNode();\n    } else if (this.empty) {\n      xmlStream.leafNode(this.tag);\n    }\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.tag:\n        this.model = [];\n        return true;\n      default:\n        if (this.childXform.parseOpen(node)) {\n          this.parser = this.childXform;\n          return true;\n        }\n        return false;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.push(this.parser.model);\n        this.parser = undefined;\n\n        if (this.maxItems && this.model.length > this.maxItems) {\n          throw new Error(`Max ${this.childXform.tag} count exceeded`);\n        }\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  reconcile(model, options) {\n    if (model) {\n      const {childXform} = this;\n      model.forEach(childModel => {\n        childXform.reconcile(childModel, options);\n      });\n    }\n  }\n}\n\nmodule.exports = ListXform;\n"],"file":"list-xform.js"}