'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Jimp = _interopDefault(require('jimp'));
var dataUriToBuffer = _interopDefault(require('data-uri-to-buffer'));
var QRCode = _interopDefault(require('qrcode'));
var pathModule = _interopDefault(require('path'));
var lruCache = _interopDefault(require('lru-cache'));
var l = _interopDefault(require('loglevel'));

var asyncToGenerator = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var STATUS = {
  initialized: 'initialized',
  fetching: 'fetching',
  fetched: 'fetched',
  fetchFailed: 'fetch failed'
};

var CacheItem = function () {
  function CacheItem(opts) {
    classCallCheck(this, CacheItem);

    this.key = opts.key;
    this.value = opts.value;
    this.fetchFunction = opts.fetchFunction;
    this.init();
  }

  createClass(CacheItem, [{
    key: 'init',
    value: function init() {
      var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : STATUS.initialized;

      this.status = status;
      this.resolvers = [];
      this.rejectors = [];
      return this.rejectors;
    }
  }, {
    key: 'fetch',
    value: function fetch() {
      var _this = this;

      return Promise.resolve().then(function () {
        if (_this.status === STATUS.fetchFailed) {
          _this.init();
        }
        if (_this.status === STATUS.fetched || !_this.fetchFunction) {
          // Return the current value
          return _this.value;
        }
        // Add a promise to the list of promises awaiting fetch completion
        var p = new Promise(function (resolve, reject) {
          _this.resolvers.push(resolve);
          return _this.rejectors.push(reject);
        });
        if (_this.status === STATUS.initialized) {
          // Call the fetch function
          _this.status = STATUS.fetching;
          Promise.resolve().then(function () {
            return _this.fetchFunction(_this.key);
          }).then(function (value) {
            _this.value = value;
            _this.status = STATUS.fetched;
            var ref = _this.resolvers;
            var results = [];
            for (var i = 0, len = ref.length; i < len; i++) {
              var r = ref[i];
              results.push(r(value));
            }
            _this.init(_this.status);
            return results;
          }).catch(function (err) {
            _this.status = STATUS.fetchFailed;
            var ref = _this.rejectors;
            var results = [];
            for (var i = 0, len = ref.length; i < len; i++) {
              var r = ref[i];
              results.push(r(err));
            }
            _this.init(_this.status);
            return results;
          });
        }
        return p;
      });
    }
  }]);
  return CacheItem;
}();

function cachePromise (opts) {
  var cache = lruCache(opts);
  cache.getAsync = function getAsync(key, fetchFunction) {
    var item = void 0;
    item = cache.get(key);
    if (item === undefined && fetchFunction) {
      // Create a new cache item
      item = new CacheItem({
        key,
        fetchFunction
      });
      cache.set(key, item);
    }
    if (!(item instanceof CacheItem)) {
      return Promise.resolve(item);
    }
    return item.fetch();
  };
  return cache;
}

function createImageFromDataUri(dataUri) {
  return new Promise(function (res) {
    new Jimp(dataUriToBuffer(dataUri), function (err, img) {
      // eslint-disable-line
      if (err) throw err;
      res(img);
    });
  });
}

function createQRCode(data) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { errorCorrectionLevel: 'M', margin: 2 };

  // FIXME: it works. But it could be more efficient.
  // The npm qrcode module cannot output just a buffer.
  // So we need to pass through base64 encoding.
  // To fix this, we need to create a PR on qrcode to support output as a buffer.
  return new Promise(function (res) {
    QRCode.toDataURL(data, opt, function (err, response) {
      if (err) throw err;
      res(createImageFromDataUri(response));
    });
  });
}

// TODO: Configurable cache params
var cacheLogo = cachePromise();
var cacheLogoResized = cachePromise();

function fetchLogo(_logoPath) {
  var logoPath = _logoPath[0] === '/' || _logoPath[0] === '\\' ? _logoPath : pathModule.resolve(__dirname, _logoPath);
  return Jimp.read(logoPath);
}

function resizeSquared(img, _w, _h) {
  var w = void 0;
  var h = void 0;

  if (_h > _w) {
    w = Jimp.AUTO;
    h = _h;
  } else {
    w = _w;
    h = Jimp.AUTO;
  }
  return img.resize(w, h);
}

function getResizedLogo(_ref) {
  var _this = this;

  var path = _ref.path,
      w = _ref.w,
      h = _ref.h,
      _ref$ignoreCache = _ref.ignoreCache,
      ignoreCache = _ref$ignoreCache === undefined ? false : _ref$ignoreCache;

  if (ignoreCache) {
    return fetchLogo(path).then(function (img) {
      return resizeSquared(img, w, h);
    });
  }

  var resizedLogoKey = `${w}x${h}-${path}`;
  return cacheLogoResized.getAsync(resizedLogoKey, asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var logoFullImg;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return cacheLogo.getAsync(path, function () {
              return fetchLogo(path);
            });

          case 2:
            logoFullImg = _context.sent;
            return _context.abrupt('return', resizeSquared(logoFullImg.clone(), w, h));

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this);
  })));
}

var generate = (function () {
  var _ref4 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3) {
    var text = _ref3.text,
        path = _ref3.path,
        opt = _ref3.opt,
        ignoreCache = _ref3.ignoreCache,
        _ref3$ratio = _ref3.ratio,
        ratio = _ref3$ratio === undefined ? 2 : _ref3$ratio;
    var img, logo, x, y, qrImg;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return createQRCode(text, opt);

          case 2:
            img = _context2.sent;
            _context2.next = 5;
            return getResizedLogo({
              path,
              w: Math.floor(img.bitmap.width / ratio),
              h: Math.floor(img.bitmap.height / ratio),
              ignoreCache
            });

          case 5:
            logo = _context2.sent;


            // Center the logo
            x = Math.floor((img.bitmap.width - logo.bitmap.width) / 2);
            y = Math.floor((img.bitmap.height - logo.bitmap.height) / 2);

            // Apply on the QRCode

            qrImg = img.composite(logo, x, y);
            return _context2.abrupt('return', new Promise(function (res, rej) {
              qrImg.getBuffer(Jimp.MIME_PNG, function (err, buf) {
                if (err) return rej(err);
                return res(buf);
              });
            }));

          case 10:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  function generate(_x2) {
    return _ref4.apply(this, arguments);
  }

  return generate;
})();

function defaultErrorFunction(req, res, err) {
  l.error(err.stack || new Error(err.error || err).stack);
  res.status(404).send('Not found');
}

function factoryQrRequest() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      text = _ref.text,
      _ref$getText = _ref.getText,
      getText = _ref$getText === undefined ? !text && function (req) {
    return req.query.t;
  } : _ref$getText,
      getLogoPath = _ref.getLogoPath,
      logoPath = _ref.logoPath,
      getRatio = _ref.getRatio,
      ignoreCache = _ref.ignoreCache,
      qrOpt = _ref.qrOpt,
      getQrOpt = _ref.getQrOpt,
      _ref$maxAge = _ref.maxAge,
      maxAge = _ref$maxAge === undefined ? 31557600 : _ref$maxAge,
      _ref$onError = _ref.onError,
      onError = _ref$onError === undefined ? defaultErrorFunction : _ref$onError;

  return function () {
    var _ref2 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
      var actualText, actualLogoPath, actualQrOpt;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              actualText = text;
              actualLogoPath = logoPath;
              actualQrOpt = qrOpt;

              if (!getText) {
                _context.next = 13;
                break;
              }

              _context.prev = 4;
              _context.next = 7;
              return getText(req);

            case 7:
              actualText = _context.sent;
              _context.next = 13;
              break;

            case 10:
              _context.prev = 10;
              _context.t0 = _context['catch'](4);
              return _context.abrupt('return', (onError || defaultErrorFunction)(req, res, { error: 'GETTEXT-EXCEPTION' }));

            case 13:
              if (!getLogoPath) {
                _context.next = 23;
                break;
              }

              _context.prev = 14;
              _context.next = 17;
              return getLogoPath(req);

            case 17:
              actualLogoPath = _context.sent;
              _context.next = 23;
              break;

            case 20:
              _context.prev = 20;
              _context.t1 = _context['catch'](14);
              return _context.abrupt('return', (onError || defaultErrorFunction)(req, res, { error: 'GETLOGOPATH-EXCEPTION' }));

            case 23:
              if (!getQrOpt) {
                _context.next = 33;
                break;
              }

              _context.prev = 24;
              _context.next = 27;
              return getQrOpt(req);

            case 27:
              actualQrOpt = _context.sent;
              _context.next = 33;
              break;

            case 30:
              _context.prev = 30;
              _context.t2 = _context['catch'](24);
              return _context.abrupt('return', (onError || defaultErrorFunction)(req, res, { error: 'GETQROPT-EXCEPTION' }));

            case 33:
              if (actualText) {
                _context.next = 35;
                break;
              }

              return _context.abrupt('return', (onError || defaultErrorFunction)(req, res, { error: 'NOTEXT' }));

            case 35:
              if (actualLogoPath) {
                _context.next = 37;
                break;
              }

              return _context.abrupt('return', (onError || defaultErrorFunction)(req, res, { error: 'NOLOGOPATH' }));

            case 37:
              _context.t3 = generate;
              _context.t4 = actualText;
              _context.t5 = actualLogoPath;

              if (!getRatio) {
                _context.next = 46;
                break;
              }

              _context.next = 43;
              return getRatio(req);

            case 43:
              _context.t6 = _context.sent;
              _context.next = 47;
              break;

            case 46:
              _context.t6 = 2;

            case 47:
              _context.t7 = _context.t6;
              _context.t8 = actualQrOpt;
              _context.t9 = ignoreCache;
              _context.t10 = {
                text: _context.t4,
                path: _context.t5,
                ratio: _context.t7,
                opt: _context.t8,
                ignoreCache: _context.t9
              };

              _context.t11 = function (imgBuffer) {
                res.setHeader('Content-Type', 'image/png');
                if (maxAge !== false) res.setHeader('Cache-Control', `public, max-age=${maxAge}`);
                res.send(imgBuffer);
              };

              _context.t12 = function (err) {
                (onError || defaultErrorFunction)(req, res, { error: err });
              };

              return _context.abrupt('return', (0, _context.t3)(_context.t10).then(_context.t11).catch(_context.t12));

            case 54:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this, [[4, 10], [14, 20], [24, 30]]);
    }));

    function qrRequest(_x2, _x3) {
      return _ref2.apply(this, arguments);
    }

    return qrRequest;
  }();
}

exports.generate = generate;
exports.route = factoryQrRequest;
//# sourceMappingURL=index.js.map
